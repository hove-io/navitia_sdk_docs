{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Navitia SDK Documentation","text":"<p>Navitia (pronounce [navi-sia]) provides a bunch of native SDKs for developers that can be easily integrated within an application. Each separate module offers a different service and may have its own requirements and configuration process. Please check the Getting Started page before proceeding to configure the desirable module.</p> Modules <p> Around Me </p> <p>Search for transport data nearby the user position, show schedules of available lines and a lot more</p> <ul> <li> <p> Android</p> <p> Documentation  Changelogs</p> </li> <li> <p> iOS</p> <p> Documentation  Changelogs</p> </li> </ul> <ul> <li> <p> Screens</p> </li> </ul> <p> Bookmark </p> <p>Show to the user his preferred data and more</p> <ul> <li> <p> Android</p> <p> Documentation  Changelogs</p> </li> <li> <p> iOS</p> <p> Documentation  Changelogs</p> </li> </ul> <ul> <li> <p> Screens</p> </li> </ul> <p> Journey </p> <p>Allows to search itineraries from an origin point to a destination point. These points can be stations, points of interest, addresses or even location coordinates</p> <ul> <li> <p> Android</p> <p> Documentation  Changelogs</p> </li> <li> <p> iOS</p> <p> Documentation  Changelogs</p> </li> </ul> <ul> <li> <p> Screens</p> </li> </ul> <p> Schedule </p> <p>Show upcoming departures and the timetable of a line in a specific station</p> <ul> <li> <p> Android</p> <p> Documentation  Changelogs</p> </li> <li> <p> iOS</p> <p> Documentation  Changelogs</p> </li> </ul> <ul> <li> <p> Screens</p> </li> </ul> <p> Traffic </p> <p>Show upcoming departures and the timetable of a line in a specific station</p> <ul> <li> <p> Android</p> <p> Documentation  Changelogs</p> </li> <li> <p> iOS</p> <p> Documentation  Changelogs</p> </li> </ul> <ul> <li> <p> Screens</p> </li> </ul> <p> Expert </p> <p>Request natively Navitia while avoiding network calls, response parsing and boilerplate code</p> <ul> <li> <p> Android</p> <p> Documentation  APIs  Models  Changelogs</p> </li> <li> <p> iOS</p> <p> Documentation  APIs  Models  Changelogs</p> </li> </ul>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#requirements","title":"\ud83e\uddf0 Requirements","text":"<ul> <li>Get an access to Navitia.io API. A token will be provided later and will be used to configure all the modules.</li> <li>The SDKs are accessible privately, so you should request an access to our private artifactory. Those credentials will be used later to configure your machine to be able to download our dependencies.</li> </ul> AndroidiOS <p>Add the following in the <code>build.gradle</code> of your app: <pre><code>android {\n    defaultConfig {\n        minSdk = 23\n    }\n}\n</code></pre></p> <p>Install Cocoapods and add the following in the <code>Podfile</code> of your project: <pre><code>platform :ios, '16.0'\nuse_frameworks!\n</code></pre></p>"},{"location":"getting_started/#artifactory-setup","title":"\ud83d\udcbb Artifactory Setup","text":"<p>The access to the SDK requires valid credentials to our private artifactory. See Requirements for more information. Replace <code>artifactoryUsername</code> and <code>artifactoryPassword</code> with your credentials.</p> AndroidiOS <p>Add the following in the <code>build.gradle</code> of your project:</p> <pre><code>repositories {\n    maven {\n        credentials {\n            username = artifactoryUsername\n            password = artifactoryPassword\n        }\n        url = uri(\"https://kisiodigital.jfrog.io/kisiodigital/android-release\")\n    }\n}\n</code></pre> <p>Create a <code>.netrc</code> file in the <code>$HOME</code> directory of your machine and add the following line to your <code>.netrc</code> file:</p> <pre><code>machine kisiodigital.jfrog.io login artifactoryUsername password artifactoryPassword\n</code></pre>"},{"location":"getting_started/#modules-configuration","title":"\ud83d\udee0 Modules Configuration","text":"<p>The Navitia SDKs should be configured before usage. Within a specific module, the customization can affect data or graphical components. Since your application can integrate one or more Navitia modules, you can use a single JSON file to configure all the modules at once. The following are the possible configuration parameters:</p> Name Required Description Type Possible values Target modules <code>coverage</code> Navitia coverage <code>String</code> <code>fr-idf</code> All <code>timezone</code> Timezone <code>String</code> <code>Europe/Paris</code> All <code>env</code> Navitia environment <code>String</code> <code>PROD</code>, <code>CUSTOMER</code> All <code>osm_region</code> OSM region <code>OSM Region</code> - All <code>colors</code> Colors configuration <code>Colors</code> - UI modules <code>transport_categories</code> List of supported transport modes <code>Transport category[]</code> - UI modules <code>poi_categories</code> List of supported POIs <code>Poi category[]</code> - Around Me, Bookmark <code>features_configuration</code> Enable/disable different module features <code>Features</code> - All <code>fonts</code> Override the fonts used in UI modules <code>Fonts</code> - UI modules <code>lines_resources</code> Resources ids for transport lines <code>Line resource[]</code> - UI modules <code>modes_resources</code> Resources ids for transport modes <code>Mode resource[]</code> - UI modules <code>providers_resources</code> Resources ids for data providers <code>Provider resource[]</code> - UI modules <code>networks_resources</code> Resources ids for data networks <code>Network resource[]</code> - UI modules <code>icons_resources</code> Resources ids for some specific icons <code>Icon resource</code> - UI modules <code>titles_resources</code> Resources ids for screen titles <code>Title resource</code> - UI modules"},{"location":"getting_started/#colors","title":"Colors","text":"Name Required Type Target module <code>aroundme</code> <code>Around Me color</code> Around Me <code>bookmark</code> <code>Bookmark color</code> Bookmark <code>journey</code> <code>Journey color</code> Journey <code>schedule</code> <code>Schedule color</code> Schedule <code>traffic</code> <code>Traffic color</code> Traffic <code>disruptions</code> <code>Disruptions color</code> All"},{"location":"getting_started/#appearance-color","title":"Appearance color","text":"Name Required Description Type Example <code>dark</code> To set the color for dark mode <code>String</code> <code>#88819f</code> <code>light</code> To set the color for light mode <code>String</code> <code>#8faa96</code>"},{"location":"getting_started/#around-me-color","title":"Around Me color","text":"Name Required Description Type Example <code>primary</code> To set the main color of the screens <code>String</code> <code>#88819f</code> <code>secondary</code> To set the color of some UI components <code>String</code> <code>#8faa96</code> <code>tertiary</code> To set the color of more UI components <code>String</code> <code>#efa59f</code> <code>map</code> To set colors of the markers on map <code>Map color</code> -"},{"location":"getting_started/#around-me-map-color","title":"Around Me map color","text":"Name Required Description Type Example <code>poi</code> To set the marker color of pois <code>String</code> <code>#9b59B6</code> <code>transport</code> To set the marker color of stations <code>String</code> <code>#2980B9</code>"},{"location":"getting_started/#bookmark-color","title":"Bookmark color","text":"Name Required Description Type Example <code>primary</code> To set the main color of the screens <code>String</code> <code>#88819f</code> <code>secondary</code> To set the color of some UI components <code>String</code> <code>#8faa96</code>"},{"location":"getting_started/#journey-color","title":"Journey color","text":"Name Required Description Type Example <code>primary</code> To set the main color of the screens <code>String</code> <code>#88819f</code> <code>secondary</code> To set the color of some UI components <code>String</code> <code>#8faa96</code> <code>tertiary</code> To set the color of more UI components <code>String</code> <code>#efa59f</code> <code>origin</code> To set colors of the journey origin <code>Journey origin color</code> - <code>destination</code> To set colors of the journey destination <code>Journey destination color</code> - <code>map</code> To set colors of the map elements <code>Journey map color</code> - <code>nav_bar_background</code> To set the color of the navigation bar. iOS only. <code>String</code> <code>#efa59f</code>"},{"location":"getting_started/#journey-origin-color","title":"Journey origin color","text":"Name Required Description Type Example <code>icon</code> To set the icon color of the itinerary origin <code>String</code> <code>#88819f</code>"},{"location":"getting_started/#journey-destination-color","title":"Journey destination color","text":"Name Required Description Type Example <code>primary</code> To set the color of the arrival block <code>String</code> <code>#8faa96</code> <code>icon</code> To set the icon color of the itinerary destination <code>String</code> <code>#88819f</code>"},{"location":"getting_started/#journey-map-color","title":"Journey map color","text":"Name Required Description Type Example <code>path</code> To set the color of the paths drawn on the map <code>Journey map path color</code> -"},{"location":"getting_started/#journey-map-path-color","title":"Journey map path color","text":"Name Required Description Type Example <code>bike</code> To set colors of the specific bike journey <code>Journey bike color</code> - <code>car</code> To set the color of the car path <code>String</code> `#88819f"},{"location":"getting_started/#journey-bike-color","title":"Journey bike color","text":"Name Required Description Type Example <code>cyclable</code> To set the main color of the cyclable part for a specific bike journey <code>String</code> <code>#8faa96</code> <code>non_cyclable</code> To set the color of the non cyclable part for a specific bike journey <code>String</code> <code>#88819f</code>"},{"location":"getting_started/#schedule-color","title":"Schedule color","text":"Name Required Description Type Example <code>primary</code> To set the main color of the screens <code>String</code> <code>#88819f</code> <code>secondary</code> To set the color of some UI components <code>String</code> <code>#8faa96</code>"},{"location":"getting_started/#traffic-color","title":"Traffic color","text":"Name Required Description Type <code>primary</code> To set the main color of the screens <code>Appearance color</code> <code>secondary</code> To set the color of some UI components <code>Appearance color</code>"},{"location":"getting_started/#disruptions-color","title":"Disruptions color","text":"Name Required Description Type Default <code>information</code> To set the color for informative disruptions <code>String</code> <code>#3FA26D</code> <code>non_blocking</code> To set the color for non blocking disruptions <code>String</code> <code>#EF662F</code> <code>blocking</code> To set the color for blocking disruptions <code>String</code> <code>#FF0000</code>"},{"location":"getting_started/#transport-category","title":"Transport category","text":"Name Required Description Type Example Target modules <code>modules</code> To set the target modules <code>String[]</code> <code>[\"aroundme\", \"journey\"]</code> <code>ALL</code> <code>name_res</code> To set the localized resource id <code>String</code> <code>transport_name_res</code> <code>ALL</code> <code>icon_res</code> To set the icon resource id <code>String</code> <code>ic_metro</code> <code>ALL</code> <code>selected</code> Whether the transport mode is selected by default or not <code>Boolean</code> <code>true</code> <code>ALL</code> <code>modes</code> List of supported transport modes <code>Transport Mode</code> - <code>ALL</code> <code>networks</code> List of supported networks <code>String[]</code> <code>[\"network:BIL:27\"]</code> <code>Schedule</code> <code>first_section_modes</code> List of first section modes <code>String[]</code> <code>[\"bike\", \"car\"]</code> <code>Journey</code> <code>last_section_modes</code> List of last section modes <code>String[]</code> <code>[\"ridesharing\", \"bss\"]</code> <code>Journey</code> <code>direct_path_modes</code> List of direct path modes <code>String[]</code> <code>[\"taxi\", \"car_no_park\"]</code> <code>Journey</code> <code>add_poi_infos</code> List of requested extra POI data <code>String[]</code> <code>[\"bss_stands\", \"car_park\"]</code> <code>Journey</code> <code>park_mode</code> Show to the user where to park his bike <code>String</code> <code>\"on_street\"</code> <code>Journey</code>"},{"location":"getting_started/#transport-mode","title":"Transport mode","text":"Name Required Description Type Example <code>physical</code> To set the transport physical mode <code>Transport Physical Mode</code> <code>[\"aroundme\",\"journey\"]</code> <code>commercial</code> To set the transport commercial mode <code>Transport Commercial Mode</code> -"},{"location":"getting_started/#transport-physical-mode","title":"Transport physical mode","text":"Name Required Description Type Example <code>id</code> Navitia physical mode id <code>String</code> <code>\"physical_mode:Bus\"</code> <code>name_res</code> Localized name resource id <code>String</code> <code>\"transport_bus\"</code>"},{"location":"getting_started/#transport-commercial-mode","title":"Transport commercial mode","text":"Name Required Description Type Example <code>id</code> Navitia commercial mode id <code>String</code> <code>\"commercial_mode:Bus\"</code> <code>name</code> Navitia commercial mode name <code>String</code> <code>\"Bus\"</code>"},{"location":"getting_started/#poi-category","title":"POI category","text":"Name Required Description Type Example <code>name_res</code> Localized POI category name id <code>String</code> <code>\"stations\"</code> <code>subcategories</code> List of POI subcategories <code>POI subcategory[]</code> -"},{"location":"getting_started/#poi-subcategory","title":"POI subcategory","text":"Name Required Description Type Example <code>name_res</code> Localized POI subcategory name id <code>String</code> <code>\"bike_stations\"</code> <code>icon_res</code> POI subcategory icon id <code>String</code> <code>\"ic_bike_stations\"</code> <code>selected</code> Whether the subcategory is selected by default or not <code>Boolean</code> <code>true</code> <code>group</code> Subcategory POI group <code>String</code> <code>STANDARD</code>, <code>QUICK_FILTER_FREE_FLOATING</code>,  <code>QUICK_FILTER_POI</code> <code>types</code> Subcategory POI types. Can be a POI type id or a free floating type <code>String[]</code> <code>[\"poi_type:amenity:bicycle_rental\"]</code> <code>booking</code> POI booking resources POI booking resources -"},{"location":"getting_started/#poi-booking-resources","title":"POI booking resources","text":"Name Required Description Type Example <code>title_res</code> Localized POI booking button title id <code>String</code> <code>\"book_a_bike\"</code>"},{"location":"getting_started/#features","title":"Features","text":"Name Required Type Target module <code>aroundme</code> <code>Around Me features</code> Around Me <code>bookmark</code> <code>Bookmark features</code> Bookmark <code>journey</code> <code>Journey features</code> Journey <code>schedule</code> <code>Schedule features</code> Schedule <code>traffic</code> <code>Traffic features</code> Traffic"},{"location":"getting_started/#around-me-features","title":"Around Me features","text":"Name Required Description Type Example <code>account_mode</code> Enable/disable the account button <code>Boolean</code> <code>false</code> <code>bookmark_mode</code> Enable/disable the bookmarks feature <code>Bookmark mode</code> - <code>default_location</code> The default location on first launch <code>Default location</code> - <code>default_zoom_level</code> Define the default zoom level of map by selecting the corresponding type <code>String</code> <code>TRANSPORTS</code>, <code>BUS</code>, <code>POI</code>, <code>FREE_FLOATING</code> <code>go_from_go_to</code> Show/hide the go from/go to buttons <code>Boolean</code> <code>true</code> <code>journey_mode</code> Enable/disable the journey search mode <code>Boolean</code> <code>true</code> <code>max_history</code> Define the max history items <code>Int</code> 10 <code>default_zoom_level</code> Define the default zoom level of map. <code>('BUS' or 'FREE_FLOATING' or 'POI' or 'TRANSPORTS')</code> <code>TRANSPORTS</code> <code>next_departures</code> Show/hide the next departures <code>Next departures</code> - <code>park_availability</code> Show/hide the bss and car parking availability <code>Park Availability</code> - <code>schedule_mode</code> Enable/disable redirection to schedule autocompletion screen <code>Boolean</code> <code>true</code> <code>stop_point_search</code> Enable/disable search by stop point instead of stop area <code>Boolean</code> <code>true</code> <code>traffic_mode</code> Show/hide the traffic button <code>Boolean</code> <code>true</code> <code>vehicle_positions</code> Show bus vehicle positions on map <code>Vehicle positions</code> -"},{"location":"getting_started/#bookmark-mode-around-me","title":"Bookmark Mode (Around Me)","text":"Name Required Description Type Example <code>enabled</code> Enable/disable to add and remove an item as favorite <code>Boolean</code> <code>true</code> <code>tabs</code> Set the configuration for bookmark tabs <code>Bookmark mode tabs (Around me)</code> -"},{"location":"getting_started/#bookmark-mode-tabs-around-me","title":"Bookmark mode tabs (Around me)","text":"Name Required Description Type Example <code>bss</code> Favorite bss tab configuration <code>Bookmark mode tab (Around me)</code> - <code>journeys</code> Favorite journeys tab configuration <code>Bookmark mode tab (Around me)</code> - <code>stations</code> Favorite stations tab configuration <code>Bookmark mode tab (Around me)</code> -"},{"location":"getting_started/#bookmark-mode-tab-around-me","title":"Bookmark mode tab (Around me)","text":"Name Required Description Type Example <code>display</code> Display/hide favorite tab <code>Boolean</code> <code>true</code> <code>title_res</code> Title resource name <code>String</code> <code>\"tab_title\"</code> <code>empty_state_text_res</code> Title resource name <code>String</code> <code>\"stations_empty_state_text\"</code>"},{"location":"getting_started/#default-location","title":"Default location","text":"Name Required Description Type Example <code>lat</code> The latitude of the default location <code>String</code> <code>\"48.846790\"</code> <code>lon</code> The longitude of the default location <code>String</code> <code>\"2.377090\"</code>"},{"location":"getting_started/#bookmark-features","title":"Bookmark features","text":"Name Required Description Type Example <code>go_from_go_to</code> Show/hide the go from/go to buttons <code>Boolean</code> <code>true</code> <code>next_departures</code> Show/hide the next departures <code>Next departures</code> - <code>park_availability</code> Show/hide the bss and car parking availability <code>Park Availability</code> - <code>schedule_mode</code> Show/hide the \"See all schedules\" button <code>Boolean</code> <code>true</code> <code>tabs</code> Enable/disable tabs <code>Bookmark tabs</code> -"},{"location":"getting_started/#tabs-bookmark","title":"Tabs (Bookmark)","text":"Name Required Description Type Example <code>transports</code> Transport tab configuration <code>Bookmark transports tab</code> - <code>journeys</code> Enable/disable journeys tab <code>Boolean</code> <code>true</code> <code>addresses</code> Addresses tab configuration <code>Bookmark addresses tab</code> -"},{"location":"getting_started/#transports-tab-bookmark","title":"Transports tab (Bookmark)","text":"Name Required Description Type Example <code>stations_title_res</code> 'Stations' title resource name <code>String</code> <code>\"stops\"</code> <code>bss_stations_title_res</code> 'Bike sharing service stations' title resource name <code>String</code> <code>\"bike_rental\"</code> <code>car_parking_title_res</code> 'P+R parkings' title resource name <code>String</code> <code>\"relay_parkings\"</code>"},{"location":"getting_started/#addresses-tab-bookmark","title":"Addresses tab (Bookmark)","text":"Name Required Description Type Example <code>enabled</code> Enable/disable addresses tab <code>Boolean</code> <code>true</code> <code>sections</code> Custom titles for the sections of this tab <code>Bookmark addresses tab sections</code> -"},{"location":"getting_started/#addresses-tab-sections-bookmark","title":"Addresses tab sections (Bookmark)","text":"Name Required Description Type Example <code>places_title_res</code> 'Places' title resource name <code>String</code> <code>\"convenient_places\"</code>"},{"location":"getting_started/#journey-features","title":"Journey features","text":"Name Required Description Type Example <code>bookmark_mode</code> Enable/disable and handle the display screens of the bookmarks feature <code>Bookmark mode</code> <code>calories</code> Show/hide the itinerary calories summary <code>Boolean</code> <code>false</code> <code>carbon</code> Show/hide the itinerary carbon summary <code>Boolean</code> <code>true</code> <code>car_parking_highlight</code> Show/hide the car parking in the journey solution <code>Boolean</code> <code>true</code> <code>car_traffic_jam</code> Show/hide the car traffic jam in the journey solution and the roadmap <code>Boolean</code> <code>true</code> <code>departure_time_shift</code> Configure the times of earlier/later shifts <code>Departure time shift</code> - <code>disruption_contributors</code> Define the list of disruption contributors id <code>String[]</code> <code>[\"shortterm.tr_idfm\"]</code> <code>external_navigation</code> Enable/disable the navigation using external applications <code>Boolean</code> <code>true</code> <code>max_favorite_addresses</code> Define the max favorite addresses alongside with home and work addresses <code>Int</code> <code>10</code> <code>max_favorite_pois</code> Define the max favorite POIs <code>Int</code> <code>10</code> <code>max_history</code> Define the max history items <code>Int</code> <code>10</code> <code>min_walking_duration_display</code> Define the minimum walking duration to be displayed in a walking section (in seconds) <code>Min walking duration display</code> - <code>next_departures</code> Show/hide the next departures <code>Next departures (Journey)</code> - <code>park_availability</code> Show/hide the bss and car parking availability <code>Park availability</code> - <code>price</code> Show/hide the itinerary price <code>Boolean</code> <code>true</code> <code>realtime_delays</code> Show/hide the itinerary realtime delays <code>Boolean</code> <code>true</code> <code>ridesharing_price</code> Show/hide the itinerary ridesharing price <code>Boolean</code> <code>true</code> <code>search_only</code> Enable/disable a direct search without input from user <code>Boolean</code> <code>false</code> <code>speed</code> Define speeds <code>Speed</code> - <code>step_by_step_guidance</code> Configure the step by step guidance <code>Step-by-step guidance</code> - <code>stop_point_search_mode</code> Enable/disable search by stop point instead of stop area <code>Boolean</code> <code>false</code> <code>traffic_mode</code> Define Traffic module options <code>Traffic options</code> - <code>transport_networks</code> Show/hide the public transport network <code>Boolean</code> <code>false</code> <code>vehicle_positions</code> Show bus vehicle positions on roadmap <code>Vehicle positions</code> -"},{"location":"getting_started/#bookmark-mode-journey","title":"Bookmark Mode (Journey)","text":"Name Required Description Type Example <code>enabled</code> Enable/disable to add and remove an item as favorite <code>Boolean</code> <code>true</code> <code>display</code> Display options of favorite items on screen <code>Bookmark mode display options (Journey)</code> -"},{"location":"getting_started/#bookmark-mode-display-options-journey","title":"Bookmark mode display options (Journey)","text":"Name Required Description Type Example <code>home</code> Display/hide favorite items on home screen <code>Boolean</code> <code>true</code> <code>autocompletion</code> Display/hide favorite items on autocompletion screen <code>Boolean</code> <code>true</code>"},{"location":"getting_started/#departure-time-shift-journey","title":"Departure time shift (Journey)","text":"Name Required Description Type Example <code>earlier_minutes</code> Minutes of the earlier shift <code>Int</code> <code>10</code> <code>later_minutes</code> Minutes of the later shift <code>Int</code> <code>5</code>"},{"location":"getting_started/#minimum-walking-duration-display-journey","title":"Minimum walking duration display (Journey)","text":"Name Required Description Type Example <code>journey_summary</code> Minimum number of minutes shown in a journey summary for a walking section <code>Int</code> <code>180</code>"},{"location":"getting_started/#min-walking-duration-display-journey","title":"Min walking duration display (Journey)","text":"Name Required Description Type Example <code>journey_summary</code> Define the min walking duration to be displayed in journey summary view in secondes <code>Int</code> <code>180</code>"},{"location":"getting_started/#next-departures-journey","title":"Next departures (Journey)","text":"Name Required Description Type Example <code>guidance</code> Show/hide the next departures in the guidance screen <code>Next departures</code> - <code>journeys</code> Show/hide the next departures in the journeys screen <code>Next departures</code> - <code>roadmap</code> Show/hide the next departures in the roadmap screen <code>Next departures</code> -"},{"location":"getting_started/#speed-journey","title":"Speed (Journey)","text":"Name Required Description Type Example <code>enabled</code> Enable/disable custom speed values <code>Boolean</code> <code>true</code> <code>bike</code> Custom values for personal bike speed <code>Bike / Bss Speed</code> - <code>bss</code> Custom values for bike sharing service speed <code>Bike / Bss Speed</code> -"},{"location":"getting_started/#bike-bss-speed-journey","title":"Bike / Bss Speed (Journey)","text":"Name Required Description Type Example <code>slow</code> custom speed value for slow bikes <code>Float</code> <code>1.2</code> <code>fast</code> custom speed value for fast bikes <code>Float</code> <code>3.4</code>"},{"location":"getting_started/#step-by-step-guidance-journey","title":"Step-by-step guidance (Journey)","text":"Name Required Description Type Example <code>enabled</code> Enable/disable the step by step guidance <code>Boolean</code> <code>true</code> <code>launch_button_res</code> Resource name of the launch button label <code>String</code> <code>\"lets_go\"</code>"},{"location":"getting_started/#step-by-step-guidance-journey_1","title":"Step by step guidance (Journey)","text":"Name Required Description Type Example <code>enabled</code> Enable step by step guidance screen <code>Boolean</code> <code>false</code> <code>launch_button_label_res</code> The guidance screen launch string resource <code>String</code> <code>go_guidance_button_text</code>"},{"location":"getting_started/#traffic-options-journey","title":"Traffic options (Journey)","text":"Name Required Description Type Example <code>alert_subscription</code> Enable Traffic alert subscriptions <code>Boolean</code> <code>Traffic alert subscription</code>"},{"location":"getting_started/#traffic-alert-subscription-journey","title":"Traffic alert subscription (Journey)","text":"Name Required Description Type Example <code>enabled</code> Enable Traffic alert subscriptions <code>Boolean</code> <code>false</code> <code>excluded_physical_modes</code> List of excluded physical modes <code>[String]</code> <code>[physical_mode:Bus]</code>"},{"location":"getting_started/#schedule-features","title":"Schedule features","text":"Name Required Description Type <code>bookmark_mode</code> Enable/disable the bookmarks feature <code>Bookmark mode</code> <code>go_from_go_to</code> Show/hide the go from/go to buttons <code>Boolean</code> <code>line_name</code> Show the name of the line <code>Line name</code> <code>max_history</code> Define the max history items <code>Int</code> <code>networks_filter</code> Show/hide the networks selector <code>Boolean</code> <code>next_departures</code> Show/hide the next departures <code>Next departures</code> <code>station_map</code> Show/hide stations on the map <code>Boolean</code> <code>traffic_mode</code> Enable/disable the traffic feature <code>Boolean</code> <code>transport_networks</code> Enable/disable grouping lines by network <code>Boolean</code> <code>vehicle_positions</code> Show bus vehicle positions on map <code>Vehicle positions</code>"},{"location":"getting_started/#bookmark-mode-schedule","title":"Bookmark Mode (Schedule)","text":"Name Required Description Type Example <code>enabled</code> Enable/disable to add and remove an item as favorite <code>Boolean</code> <code>true</code> <code>display</code> Display options of favorite items on screen <code>Bookmark mode display options (Schedule)</code> -"},{"location":"getting_started/#bookmark-mode-display-options-schedule","title":"Bookmark mode display options (Schedule)","text":"Name Required Description Type Example <code>home</code> Display/hide favorite items on home screen <code>Boolean</code> <code>true</code>"},{"location":"getting_started/#line-name-schedule","title":"Line Name (Schedule)","text":"Name Required Description Type Example <code>allowed_commercial_modes</code> Define the list of commercial mode id allowed to show their name <code>String[]</code> <code>[\"commercial_mode:Train\"]</code>"},{"location":"getting_started/#traffic-features","title":"Traffic features","text":"Name Required Description Type Example <code>alert_subscription</code> Alert subscription environment configuration <code>Alert subscription</code> - <code>application_periods</code> Show/hide the disruption application date <code>Boolean</code> - <code>disruption_contributors</code> Define the list of disruption contributors id <code>String[]</code> <code>[\"shortterm.tr_idfm\"]</code> <code>filters</code> Show/hide the filters selector <code>Boolean</code> <code>forbidden_networks</code> Define the list of forbidden network ids <code>String[]</code> <code>[\"network:ABCD\"]</code> <code>transport_networks</code> Enable/disable showing network on lines <code>Boolean</code> -"},{"location":"getting_started/#alert-subscription","title":"Alert subscription","text":"Name Required Description Type Example <code>env</code> Kronos environment <code>String</code> <code>PROD</code> <code>timezone</code> Subscriptions timezone <code>String</code> <code>Europe/Paris</code>"},{"location":"getting_started/#common-features","title":"Common features","text":""},{"location":"getting_started/#next-departures","title":"Next departures","text":"Name Required Description Type Example <code>frequency</code> Frequency of the next departures request in seconds <code>Int</code> <code>30</code>"},{"location":"getting_started/#park-availability","title":"Park availability","text":"Name Required Description Type Example <code>frequency</code> Frequency of the bss and park availability request in seconds <code>Int</code> <code>30</code> <code>display</code> Display options of park availability on screen <code>Park availability display options</code> -"},{"location":"getting_started/#park-availability-display-options","title":"Park availability display options","text":"Name Required Description Type Example <code>prm</code> Display/hide reduced mobility park availability on screen <code>Boolean</code> <code>true</code>"},{"location":"getting_started/#vehicle-positions","title":"Vehicle positions","text":"Name Required Description Type Example <code>frequency</code> Frequency of the vehicle positions request in seconds <code>String</code> <code>30</code>"},{"location":"getting_started/#fonts","title":"Fonts","text":"Name Required Type Target module <code>aroundme</code> <code>Custom font</code> Around Me <code>bookmark</code> <code>Custom font</code> Bookmark <code>journey</code> <code>Custom font</code> Journey <code>schedule</code> <code>Custom font</code> Schedule <code>traffic</code> <code>Custom font</code> Traffic"},{"location":"getting_started/#custom-font","title":"Custom font","text":"Name Required Description Type <code>numeric</code> Custom numeric font <code>Font category</code> <code>alphanumeric</code> Custom alphanumeric font <code>Font category</code>"},{"location":"getting_started/#font-category","title":"Font category","text":"Name Required Description Type <code>regular</code> Custom numeric font for regular typeface <code>Font Typeface</code> <code>italic</code> Custom numeric font for italic typeface <code>Font Typeface</code> <code>semi_bold</code> Custom numeric font for semi bold typeface <code>Font Typeface</code> <code>semi_bold_italic</code> Custom numeric font for semi bold italic typeface <code>Font Typeface</code> <code>bold</code> Custom numeric font for bold typeface <code>Font Typeface</code> <code>bold_italic</code> Custom numeric font for bold italic typeface <code>Font Typeface</code> <code>light</code> Custom numeric font for light typeface <code>Font Typeface</code> <code>light_italic</code> Custom numeric font for light italic typeface <code>Font Typeface</code>"},{"location":"getting_started/#font-typeface","title":"Font Typeface","text":"Name Required Description Type Platform Example <code>font_res</code> Font resource name <code>String</code> Android <code>source_sans_pro_semi_bold</code> <code>ttf_file</code> TTF file name <code>String</code> iOS <code>\"SourceSansPro\"</code> <code>font_name</code> Font name <code>String</code> iOS <code>\"SourceSansPro-Bold\"</code>"},{"location":"getting_started/#line-resource","title":"Line resource","text":"Name Required Description Type Example <code>code</code> Navitia line code <code>String</code> <code>1</code> <code>icon_res</code> Line icon resource id <code>String</code> <code>ic_metro_1</code> <code>commercial</code> Transport commercial mode <code>Transport Commercial Mode</code> -"},{"location":"getting_started/#mode-resource","title":"Mode resource","text":"Name Required Description Type Example <code>icon_res</code> Transport mode icon resource id <code>String</code> <code>ic_bus</code> <code>commercial</code> Transport commercial mode <code>Transport Commercial Mode</code> -"},{"location":"getting_started/#provider-resource","title":"Provider resource","text":"Name Required Description Type Example <code>type_id</code> Navitia provider type id <code>String</code> <code>provider:ridesharing:lime</code> <code>provider_id</code> Navitia provider id <code>String</code> <code>ridesharing_provider</code> <code>icon_res</code> Provider icon resource id <code>String</code> <code>ic_lime</code> <code>name_res</code> Localized network name resource id <code>String</code> <code>lime</code>"},{"location":"getting_started/#network-resource","title":"Network resource","text":"Name Required Description Type Example <code>network_id</code> Navitia network id <code>String</code> <code>network:BIL:27</code> <code>name_res</code> Localized network name resource id <code>String</code> <code>sncf</code> <code>icon_res</code> Network icon resource IidD <code>String</code> <code>ic_sncf</code>"},{"location":"getting_started/#icon-resource","title":"Icon resource","text":"Name Required Type Target module <code>journey</code> <code>Journey icon resource</code> Journey"},{"location":"getting_started/#journey-icon-resource","title":"Journey icon resource","text":"Name Required Description Type Example <code>departure</code> Departure icon resource id <code>String</code> <code>ic_departure</code> <code>arrival</code> Arrival icon resource id <code>String</code> <code>ic_departure</code> <code>indoor_parking</code> Indoor parking icon resource id <code>String</code> <code>ic_indoor_parking</code> <code>outdoor_parking</code> Outdoor parking icon resource id <code>String</code> <code>ic_outdoor_parking</code> <code>parking_relay</code> Parking relay icon resource id <code>String</code> <code>ic_parking_relay</code> <code>transports_tab</code> Transports tab icon resource id <code>String</code> <code>ic_transports_tab</code> <code>walking_tab</code> Walking tab icon resource id <code>String</code> <code>ic_walking_tab</code> <code>bike_tab</code> Bike tab icon resource id <code>String</code> <code>ic_bike_tab</code> <code>car_tab</code> Car tab icon resource id <code>String</code> <code>ic_car_tab</code> <code>ridesharing_tab</code> Ridesharing tab icon resource id <code>String</code> <code>ic_ridesharing_tab</code>"},{"location":"getting_started/#title-resource","title":"Title resource","text":"Name Required Type Target module <code>aroundme</code> <code>Around Me title resource</code> Around Me <code>journey</code> <code>Journey title resource</code> Journey"},{"location":"getting_started/#around-me-title-resource","title":"Around Me title resource","text":"Name Required Description Type Example <code>filters</code> Localized filters screen title resource id <code>String</code> <code>filters_screen_title</code>"},{"location":"getting_started/#journey-title-resource","title":"Journey title resource","text":"Name Required Description Type Example <code>journeys</code> Localized journeys screen title resource id <code>String</code> <code>journeys_screen_title</code> <code>roadmap</code> Localized roadmap screen title resource id <code>String</code> <code>roadmap_screen_title</code> <code>ridesharing</code> Localized ridesharing screen title resource id <code>String</code> <code>ridesharing_screen_title</code>"},{"location":"getting_started/#osm-region","title":"OSM Region","text":"Name Required Description Type Example <code>id</code> id of the region <code>String</code> <code>azerty</code> <code>name</code> name of the region <code>String</code> <code>\u00eele de France</code>"},{"location":"getting_started/#configuration-json-file","title":"Configuration JSON file","text":"<p>You can refer to the JSON file here to generate your own configuration. Note that this is the complete version of the configuration. Remove unused objects and adapt the values as needed.</p>"},{"location":"getting_started/#modules-events-tracking","title":"\ud83d\udcc8 Modules events tracking","text":"<p>The events triggered within Navitia UI modules can be traced and forwarded to the application module. Each generated event is served with other information allowing to identify the target object on the module screen. You can refer to the table below for possible generated events.</p> Event name Possible object types Description <code>drag</code> <code>map</code>, <code>bottomSheet</code>, <code>chart</code>, <code>map</code> The user performs a drag action <code>edit</code> <code>field</code> The user has changed the input value of an object <code>pull</code> <code>list</code> The user has pulled the object <code>tap</code> <code>button</code>, <code>item</code>, <code>switch</code>, <code>tab</code> The user performs a tap action <code>scroll</code> <code>bottomSheet</code>, <code>list</code> The user started a scroll on an object <code>show</code> - A screen is displayed <code>swipe</code> <code>bottomSheet</code> The user performs a swipe action <code>zoom</code> <code>map</code> The user performs whether a pinch, a double tap action to zoom on an object AndroidiOS Module name Implementation Around me Around Me Android events tracking Bookmark Bookmark Android events tracking Journey Journey Android events tracking Schedule Schedule Android events tracking Traffic Traffic Android events tracking Module name Implementation Around Me Around Me iOS events tracking Bookmark Bookmark iOS events tracking Journey Journey iOS events tracking Schedule Schedule iOS events tracking Traffic Traffic iOS events tracking"},{"location":"around_me/android/","title":"Around Me Android","text":""},{"location":"around_me/android/#setup","title":"Setup","text":"<p>Add the following dependencies in the <code>build.gradle</code> file of your application:</p> <pre><code>dependencies {\n    implementation(\"com.kisio.navitia.sdk.ui:aroundme:2.17.0\")\n}\n</code></pre> <p>For the use of cartography, add your Google Maps API Key to your <code>AndroidManifest.xml</code> as well. Replace <code>YOUR_API_KEY</code> with your key:</p> <pre><code>&lt;meta-data\n    android:name=\"com.google.android.geo.API_KEY\"\n    android:value=\"YOUR_API_KEY\"/&gt;\n</code></pre> <p>The activity launching Around Me must handle the following configuration changes: <code>orientation|screenSize</code> declared into your <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;activity\n    android:configChanges=\"orientation|screenSize\"/&gt;\n</code></pre>"},{"location":"around_me/android/#implementation","title":"Implementation","text":"<p>Warning</p> <p>Make sure to read the modules configuration section before proceeding</p> <p>This module is set up by calling <code>AroundMeUI.getInstance()</code>. The singleton behaves like a builder in which each method allows you to configure the module. Then, you need to call the <code>init()</code> method at the end. You should call this method in an <code>Application</code> subclass. This method takes the following parameters:</p> Name Required Description Type Default <code>context</code> Context in which the module is launched <code>Context</code> <code>token</code> Get your token <code>String</code> <code>configuration</code> Module configuration object <code>AroundMeConfiguration</code> <code>null</code> <code>configurationJsonFile</code> Module configuration JSON file name <code>String</code> <code>null</code> Example Configuration with fileManual configuration <pre><code>AroundMeUI.getInstance().let { instance -&gt;\n    instance.init(\n        context = this,\n        token = \"your_token\",\n        configurationJsonFile = \"your_config_file\"\n    )\n}\n</code></pre> <pre><code>AroundMeUI.getInstance().let { instance -&gt;\n    instance.init(\n        context = this,\n        token = \"your_token\",\n        configuration = AroundMeConfiguration(\n            coverage = \"your_coverage\",\n            timezone = \"Europe/Paris\",\n            env = AroundMeEnvironment.PROD,\n            colors = AroundMeColors(\n                primary = \"#88819f\"\n            ),\n            transportCategories = listOf&lt;AroundMeTransportCategory&gt;(),\n        )\n    )\n}\n</code></pre>"},{"location":"around_me/android/#navigation-listener","title":"Navigation listener","text":"<p>Since the module launches its own fragments, you may want your application to be aware of navigation events. For that, you have to set a navigation listener by calling this method before <code>init()</code>.</p> <pre><code>AroundMeUI.getInstance()\n    .setNavigationListener(aroundMeNavigationListenerImpl) // (1)\n</code></pre> <ol> <li><code>aroundMeNavigationListenerImpl</code> should be the class instance implementing <code>AroundMeNavigationListener</code> interface.</li> </ol> <p>This interface gives you the method <code>onBack()</code> for any back event between two fragments and the method <code>onNavigate</code> for the reverse. Each method has a <code>AroundMeNavigationListener.Event</code> parameter you can rely on.</p> <pre><code>// Navigation events\nMAP_TO_FAVORITES\nMAP_TO_JOURNEY\nMAP_TO_TRAFFIC\nMAP_TO_ROADMAP\nMAP_TO_FILTER\nMAP_TO_SEARCH\nMAP_BACK_TO_EXTERNAL\nSEARCH_BACK_TO_MAP\nFILTER_BACK_TO_MAP\n</code></pre>"},{"location":"around_me/android/#events-tracking","title":"Events tracking","text":"<p>In order to receive the list of generated events within Around Me module, you have to attach the tracker to the module instance. You can call this method before or after <code>init()</code>.</p> <pre><code>AroundMeUI.getInstance()\n    .attachTracker(aroundMeTrackerImpl) // (1)\n</code></pre> <ol> <li><code>aroundMeTrackerImpl</code> should be the class instance implementing <code>AroundMeTracker</code> interface.</li> </ol>"},{"location":"around_me/android/#launching","title":"Launching","text":"<p>Around Me has a single entry point <code>MapFragment</code>. Assuming you have an <code>Activity</code> with a fragment container, refer to the following example to launch the entry screen fragment:</p> <pre><code>supportFragmentManager.beginTransaction().run {\n    replace(R.id.container_id, MapFragment.newInstance(), \"TAG\")\n    addToBackStack(\"TAG\")\n    commit()\n}\n</code></pre>"},{"location":"around_me/android/#communicating-with-other-modules-or-the-app","title":"Communicating with other modules or the app","text":"<p>Around Me module can exchange data with or navigate to either other modules or the host application.</p>"},{"location":"around_me/android/#application","title":"Application","text":"<p>Some route or callbacks are delegated to the application. If you have to receive some module data, <code>Router</code> must register the app data receiver:</p> <pre><code>Router.getInstance()\n    .register(appData = appRouterDataImpl) // (1)\n</code></pre> <ol> <li><code>appRouterDataImpl</code> should be the class instance implementing <code>AppRouter.Data</code> interface. We recommand usign a <code>Application</code> subclass.</li> </ol> <p>If you have to handle navigation between modules, <code>Router</code> must also register the app UI receiver:</p> <pre><code>Router.getInstance()\n    .register(appUi = appRouterUiImpl) // (1)\n</code></pre> <ol> <li><code>appRouterUiImpl</code> should be the class instance implementing <code>AppRouter.UI</code> interface. We recommand usign a <code>Application</code> subclass.</li> </ol> <p>After registering, you have to call <code>init()</code>:</p> <pre><code>Router.getInstance().init()\n</code></pre>"},{"location":"around_me/android/#data-interface-methods","title":"Data interface methods","text":"<p>A customizable button appears in the free floating details screen and the clicking event should be intercepted by the application.</p> <pre><code>override fun onBookFreeFloating(id: String) {\n    // handle the free floating booking\n}\n</code></pre> Param Type Description <code>id</code> <code>String</code> Selected free floating id <p>A customizable button appears in the POI details screen and the clicking event should be intercepted by the application.</p> <pre><code>override fun onBookPoi(id: String) {\n    // handle the free POI booking\n}\n</code></pre> Param Type Description <code>id</code> <code>String</code> Selected POI id"},{"location":"around_me/android/#custom-account-ui","title":"Custom account UI","text":"<pre><code>override fun openAccountViaHost() {\n    // launch your custom screen\n}\n</code></pre>"},{"location":"around_me/android/#modules","title":"Modules","text":""},{"location":"around_me/android/#bookmark","title":"Bookmark","text":"<p> Enabling</p> <p>This module communicates with Bookmark module in order to display favorite stations, journeys and POIs. You should enable the <code>bookmark_mode</code> parameter in the features configuration.</p> <p> Methods</p> <p>The following methods from the <code>AppRouter.UI</code> interface should be implemented by the host application to enable navigation to the Bookmark module or any other custom screen. Note that the parameters of these methods can be omitted as needed.</p> <pre><code>override fun openFavoritesViaHost(linkedModule: LinkedModule, tab: FavoriteTab) {\n    // launch the bookmark module screen or your custom screen\n}\n</code></pre> Param Type Description Value <code>linkedModule</code> <code>BookmarkLinkedModule</code> Module triggering the method call <code>BookmarkLinkedModule.AROUND_ME</code> or <code>BookmarkLinkedModule.JOURNEY</code> <code>tab</code> <code>FavoriteTab</code> Tab to display in the Bookmark module screen <code>FavoriteTab.TRANSPORTS</code>, <code>FavoriteTab.JOURNEYS</code> or <code>FavoriteTab.ADDRESSES</code> <pre><code>override fun openFavoriteHomeAddViaHost(linkedModule: BookmarkLinkedModule) {\n    // launch the bookmark module screen or your custom screen\n}\n</code></pre> Param Type Description Value <code>linkedModule</code> <code>BookmarkLinkedModule</code> Module triggering the method call <code>BookmarkLinkedModule.AROUND_ME</code> or <code>BookmarkLinkedModule.JOURNEY</code> <pre><code>override fun openFavoriteWorkAddViaHost(linkedModule: LinkedModule) {\n    // launch the bookmark module screen or your custom screen\n}\n</code></pre> Param Type Description Value <code>linkedModule</code> <code>LinkedModule</code> Module triggering the method call <code>LinkedModule.AROUND_ME</code> or <code>LinkedModule.JOURNEY</code>"},{"location":"around_me/android/#journey","title":"Journey","text":"<p> Enabling</p> <p>This module communicates with Journey module in order to get directions for a chosen itinerary. You should enable the <code>journey_mode</code> and the <code>go_from_go_to</code> parameter in the features configuration. Another way to communicate with is through the Map screen and precisely the Where are we going? button, this feature should also be enabled by setting the <code>where_shall_we_go</code> in the features configuration to <code>true</code>.</p> <p> Methods</p> <p>The following method from the <code>AppRouter.UI</code> interface should be implemented by the host application to enable navigation to the Journey module or any other custom screens. Note that the parameters of these methods can be ignored as needed.</p> <pre><code>override fun openJourneysViaHost(\n    origin: SharedData.JourneyPoint?,\n    destination: SharedData.JourneyPoint?,\n    showDirectlyAutoCompletion: Boolean,\n    showDirectlyJourneysSearch: Boolean\n) {\n    // launch the journey module screen or your custom screen\n}\n</code></pre> Param Type Description <code>origin</code> <code>SharedData.JourneyPoint?</code> Desired starting point of the journey. Optional <code>destination</code> <code>SharedData.JourneyPoint?</code> Desired endpoint of the journey. Optional <code>showDirectlyAutoCompletion</code> <code>Boolean</code> Directly displays the search for the starting point and/or endpoint. If true, <code>showDirectlyJourneysSearch</code> can only be false <code>showDirectlyJourneysSearch</code> <code>Boolean</code> Directly displays the journey search. If true, <code>showDirectlyAutoCompletion</code> can only be false"},{"location":"around_me/android/#schedule","title":"Schedule","text":"<p> Enabling</p> <p>This module communicates with Schedule module in order to show line and station search. You should enable the <code>schedule_mode</code> parameter in the features configuration.</p> <p> Method</p> <p>The following method from the <code>AppRouter.UI</code> interface should be implemented by the host application to enable navigation to the Schedule module or any other custom screens.</p> <pre><code>override fun openScheduleSearchViaHost() {\n    // launch the schedule module screen or your custom screen\n}\n</code></pre>"},{"location":"around_me/android/#traffic","title":"Traffic","text":"<p> Enabling</p> <p>This module communicates with Traffic module in order to easily access traffic information. You should enable the <code>traffic_mode</code> parameter in the features configuration.</p> <p> Method</p> <p>The following method from the <code>AppRouter.UI</code> interface should be implemented by the host application to enable navigation to the Traffic module or any other custom screen.</p> <pre><code>override fun openTrafficViaHost() {\n    // launch the ticket module screen or your custom screen\n}\n</code></pre>"},{"location":"around_me/android/#theming","title":"Theming","text":"<p>The module uses graphical components from Material Design 3. To ensure that these components function correctly and get displayed properly on the screen, it is crucial to apply the appropriate parent theme:</p> <pre><code>&lt;style name=\"Theme.App\" parent=\"Theme.Material3.*\"&gt; &lt;!-- (1) --&gt;\n    ...\n&lt;/style&gt;\n</code></pre> <ol> <li>Replace by the specific theme. For example: <code>Theme.Material3.Light.NoActionBar</code></li> </ol>"},{"location":"around_me/android/changelogs/","title":"Around Me Android Changelogs","text":"<ul> <li>v2.17.0 (11 Sep 2025)</li> <li>v2.16.6 (11 Jun 2025)</li> <li>v2.16.5 (05 Jun 2025)</li> <li>v2.16.4 (15 May 2025)</li> <li>v2.16.2 (14 May 2025)</li> <li>v2.16.1 (14 May 2025)</li> <li>v2.16.0 (23 Apr 2025)</li> <li>v2.15.0 (24 Mar 2025)</li> <li>v2.14.0 (25 Feb 2025)</li> <li>v2.13.4 (03 Feb 2025)</li> <li>v2.13.3 (09 Jan 2025)</li> <li>v2.13.2 (26 Dec 2024)</li> <li>v2.13.1 (24 Dec 2024)</li> <li>v2.13.0 (02 Dec 2024)</li> <li>v2.12.1 (19 Nov 2024)</li> <li>v2.12.0 (31 Oct 2024)</li> <li>v2.11.0 (15 Oct 2024)</li> <li>v2.10.0 (09 Sep 2024)</li> <li>v2.9.1 (08 Aug 2024)</li> <li>v2.9.0 (26 Jul 2024)</li> <li>v2.8.2 (24 Jun 2024)</li> <li>v2.8.1 (07 Jun 2024)</li> <li>v2.8.0 (21 Mai 2024)</li> <li>v2.7.2 (28 Feb 2024)</li> <li>v2.7.0 (12 Feb 2024)</li> <li>v2.6.0 (11 Jan 2024)</li> <li>v2.5.0 (23 Aug 2023)</li> <li>v2.4.1 (03 Apr 2023)</li> <li>v2.4.0 (17 Mar 2023)</li> <li>v2.3.0 (15 Feb 2023)</li> <li>v2.2.1 (02 Feb 2023)</li> <li>v2.2.0 (27 Jan 2023)</li> <li>v2.1.0 (10 Jan 2023)</li> <li>v2.0.1 (19 Oct 2022)</li> <li>v2.0.0 (29 Sep 2022)</li> </ul>"},{"location":"around_me/android/releases/2.0.0/","title":"Around Me Android 2.0.0 Changelog","text":"\ud83d\uddd3 29 Sept 2022"},{"location":"around_me/android/releases/2.0.0/#features","title":"Features","text":"<ul> <li>Can consume a globalized configuration</li> <li>Redesign the whole module</li> </ul>"},{"location":"around_me/android/releases/2.0.0/#tasks","title":"Tasks","text":"<ul> <li>Use <code>LocalDateTime</code> instead of <code>DateTime</code></li> </ul>"},{"location":"around_me/android/releases/2.0.0/#fixes","title":"Fixes","text":"<ul> <li>Fix text color on computed line logos</li> </ul>"},{"location":"around_me/android/releases/2.0.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlinVersion</code> &gt; <code>1.6.21</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.2.2</code></li> <li><code>com.google.firebase:firebase-crashlytics-gradle</code> &gt; <code>2.9.2</code></li> <li><code>com.google.gms:google-services</code> &gt; <code>4.3.14</code></li> <li><code>org.jfrog.buildinfo:build-info-extractor-gradle</code> &gt; <code>4.28.2</code></li> <li><code>daggerVersion</code> &gt; <code>2.42</code></li> <li><code>fragmentVersion</code> &gt; <code>1.5.2</code></li> <li><code>kotlinCoroutinesVersion</code> &gt; <code>1.6.3</code> </li> <li><code>roomVersion</code> &gt; <code>2.4.3</code></li> <li><code>compileSdk</code> &gt; <code>33</code></li> <li><code>buildToolsVersion</code> &gt; <code>33.0.0</code></li> <li><code>targetSdk</code> &gt; <code>33</code></li> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.5.1</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.1.4</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.9.0</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.5.1</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.6.1</code></li> <li><code>com.google.android.gms:play-services-maps</code> &gt; <code>18.1.0</code></li> <li><code>com.google.code.gson:gson</code> &gt; <code>2.8.9</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.1</code></li> </ul>"},{"location":"around_me/android/releases/2.0.1/","title":"Around Me Android 2.0.1 Changelog","text":"\ud83d\uddd3 19 Oct 2022"},{"location":"around_me/android/releases/2.0.1/#fixes","title":"Fixes","text":"<ul> <li>Fix publishing of variant modules dependencies</li> </ul>"},{"location":"around_me/android/releases/2.1.0/","title":"Around Me Android 2.1.0 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"around_me/android/releases/2.1.0/#features","title":"Features","text":"<ul> <li>Can add a station or a POI as favorite</li> <li>Show my position button only in full map mode</li> <li>Can open directly bookmarks and Traffic</li> <li>Add progress indicators in bottom sheet at first data loading</li> </ul>"},{"location":"around_me/android/releases/2.1.0/#tasks","title":"Tasks","text":"<ul> <li>Replace <code>Gson</code> by <code>kotlinx.serialization</code></li> <li>Enhance map performance</li> <li>Prefix all layouts by <code>navitia_nearby_</code></li> <li>Token is passed via <code>init()</code> instead of configuration file or object</li> </ul>"},{"location":"around_me/android/releases/2.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix back button action</li> </ul>"},{"location":"around_me/android/releases/2.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle-wrapper</code> &gt; <code>7.4</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.3.1</code></li> <li><code>androidx.navigation:navigation-fragment-ktx</code> &gt; <code>2.5.3</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.2</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.4.1</code></li> </ul>"},{"location":"around_me/android/releases/2.10.0/","title":"Around Me Android 2.10.0 Changelog","text":"\ud83d\uddd3 09 Sept 2024"},{"location":"around_me/android/releases/2.10.0/#features","title":"Features","text":"<ul> <li>New contextual menu with the Go from / Go to feature and the See all schedule feature when clicking on a favorite station</li> <li>Add a <code>+1</code> label if a next departure is the next day</li> <li>Add an individual empty state if a destination has no next departures</li> </ul>"},{"location":"around_me/android/releases/2.10.0/#fixes","title":"Fixes","text":"<ul> <li>Fix the display of lines at a station on the map</li> <li>Fixed the unexpected updating of the favorite icon in station details</li> <li>The map re-centers on the selected POI position during autocomplete search, even if its category filter is not selected on the map</li> </ul>"},{"location":"around_me/android/releases/2.10.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.7.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.13.1</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.2</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.4</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.12.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.17.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>2.17.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.3</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.3</code></li> <li><code>androidx.test:core</code> &gt; <code>1.6.1</code></li> <li><code>androidx.test.ext:junit</code> &gt; <code>1.2.1</code></li> <li><code>androidx.test.espresso:espresso-core</code> &gt; <code>3.6.1</code></li> </ul>"},{"location":"around_me/android/releases/2.11.0/","title":"Around Me Android 2.11.0 Changelog","text":"\ud83d\uddd3 15 Oct 2024"},{"location":"around_me/android/releases/2.11.0/#features","title":"Features","text":"<ul> <li>Add poi to quick filters</li> </ul>"},{"location":"around_me/android/releases/2.11.0/#fixes","title":"Fixes","text":"<ul> <li>Fix parc availability colors</li> <li>Fix bookmark button misplaced</li> <li>Fix duplicated search bar when bookmark and journey mode enabled</li> </ul>"},{"location":"around_me/android/releases/2.11.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.4</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.6</code></li> </ul>"},{"location":"around_me/android/releases/2.11.0/#annotations","title":"Annotations","text":"<p>In case Bookmark is enabled for this module, this version requires <code>Bookmark v1.8.0</code></p>"},{"location":"around_me/android/releases/2.12.0/","title":"Around Me Android 2.12.0 Changelog","text":"\ud83d\uddd3 31 Oct 2024"},{"location":"around_me/android/releases/2.12.0/#features","title":"Features","text":"<ul> <li>Ability to add POIs to the quick filters</li> </ul>"},{"location":"around_me/android/releases/2.12.0/#tasks","title":"Tasks","text":"<ul> <li>Add park availability configuration</li> <li>Enhance bookmark mode configuration</li> </ul>"},{"location":"around_me/android/releases/2.12.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.18.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>2.18.0</code></li> </ul>"},{"location":"around_me/android/releases/2.12.1/","title":"Around Me Android 2.12.1 Changelog","text":"\ud83d\uddd3 19 Nov 2024"},{"location":"around_me/android/releases/2.12.1/#features","title":"Features","text":"<ul> <li>Show autocomplete results based on the user's location</li> </ul>"},{"location":"around_me/android/releases/2.13.0/","title":"Around Me Android 2.13.0 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"around_me/android/releases/2.13.0/#features","title":"Features","text":"<ul> <li>Add <code>stations</code> for <code>bookmark_mode.display</code> in the configuration</li> </ul>"},{"location":"around_me/android/releases/2.13.0/#tasks","title":"Tasks","text":"<ul> <li>Use a new icon for parking and BSS parking places</li> </ul>"},{"location":"around_me/android/releases/2.13.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.9.25</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.2</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.15.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.5</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.7</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.5.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.19.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.2</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.19.0</code></li> </ul>"},{"location":"around_me/android/releases/2.13.1/","title":"Around Me Android 2.13.1 Changelog","text":"\ud83d\uddd3 24 Dec 2024"},{"location":"around_me/android/releases/2.13.1/#fixes","title":"Fixes","text":"<ul> <li>Add a fallback for database migrations</li> </ul>"},{"location":"around_me/android/releases/2.13.2/","title":"Around Me Android 2.13.2 Changelog","text":"\ud83d\uddd3 26 Dec 2024"},{"location":"around_me/android/releases/2.13.2/#fixes","title":"Fixes","text":"<ul> <li>Fix journey shortcut showing when journey mode is disabled</li> </ul>"},{"location":"around_me/android/releases/2.13.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.3</code></li> </ul>"},{"location":"around_me/android/releases/2.13.3/","title":"Around Me Android 2.13.3 Changelog","text":"\ud83d\uddd3 09 Jan 2025"},{"location":"around_me/android/releases/2.13.3/#fixes","title":"Fixes","text":"<ul> <li>Prevented crashes caused by the generated id of the <code>RecyclerView</code> in the favorites <code>ViewPager</code></li> </ul>"},{"location":"around_me/android/releases/2.13.4/","title":"Around Me Android 2.13.4 Changelog","text":"\ud83d\uddd3 03 Feb 2025"},{"location":"around_me/android/releases/2.13.4/#fixes","title":"Fixes","text":"<ul> <li>Do not show walking sections under 3 minutes in favorites journeys.</li> <li>Details bottomsheet not showing when selecting a POI.</li> <li>Do not show schedule options if not enable in configuration.</li> </ul>"},{"location":"around_me/android/releases/2.13.4/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.3</code></li> </ul>"},{"location":"around_me/android/releases/2.14.0/","title":"Around Me Android 2.14.0 Changelog","text":"\ud83d\uddd3 25 Feb 2025"},{"location":"around_me/android/releases/2.14.0/#features","title":"Features","text":"<ul> <li>Display of reduce mobility parking places for a parking POI is now configurable</li> </ul>"},{"location":"around_me/android/releases/2.14.0/#fixes","title":"Fixes","text":"<ul> <li>No longer show POIs when selecting a transport category in the quick filters</li> </ul>"},{"location":"around_me/android/releases/2.14.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.10.2</code></li> <li><code>kotlinVersion</code> &gt; <code>2.1.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.8.0</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>buildToolsVersion</code> &gt; <code>35.0.0</code></li> <li><code>daggerVersion</code> &gt; <code>2.55</code></li> <li><code>fragmentVersion</code> &gt; <code>1.8.5</code></li> <li><code>lifecycleVersion</code> &gt; <code>2.8.7</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.15.0</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.4.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.20.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.4</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.20.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.6.3</code></li> </ul>"},{"location":"around_me/android/releases/2.15.0/","title":"Around Me Android 2.15.0 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"around_me/android/releases/2.15.0/#features","title":"Features","text":"<ul> <li>Tab titles for stations, routes, and self-service bike stations are configurable</li> </ul>"},{"location":"around_me/android/releases/2.15.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>fragmentVersion</code> &gt; <code>1.8.6</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.1</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.7.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.21.0</code></li> </ul>"},{"location":"around_me/android/releases/2.16.0/","title":"Around Me Android 2.16.0 Changelog","text":"\ud83d\uddd3 23 Apr 2025"},{"location":"around_me/android/releases/2.16.0/#features","title":"Features","text":"<ul> <li>Added an alert on the map when an item selected in autocompletion is not included in the filters.</li> </ul>"},{"location":"around_me/android/releases/2.16.0/#tasks","title":"Tasks","text":"<ul> <li>Optimized Map and BottomSheet behavior</li> </ul>"},{"location":"around_me/android/releases/2.16.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.11.1</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.9.1</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.7.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.22.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.5</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.21.0</code></li> <li><code>androidx.room:room-compiler</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-ktx</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-runtime</code> &gt; <code>2.7.0</code></li> <li><code>androidx.core:core-ktx</code>&gt; <code>1.16.0</code></li> </ul>"},{"location":"around_me/android/releases/2.16.1/","title":"Around Me Android 2.16.1 Changelog","text":"\ud83d\uddd3 14 May 2025"},{"location":"around_me/android/releases/2.16.1/#fixes","title":"Fixes","text":"<ul> <li>Do not filter buses when searching stop area from autocompletion</li> <li>Fixed previous state of the bottomsheet when clicking on multiple markers</li> </ul>"},{"location":"around_me/android/releases/2.16.2/","title":"Around Me Android 2.16.2 Changelog","text":"\ud83d\uddd3 14 May 2025"},{"location":"around_me/android/releases/2.16.2/#fixes","title":"Fixes","text":"<ul> <li>Fixed quick filters state when switching tab from the bottom bar</li> </ul>"},{"location":"around_me/android/releases/2.16.4/","title":"Around Me Android 2.16.4 Changelog","text":"\ud83d\uddd3 15 May 2025"},{"location":"around_me/android/releases/2.16.4/#fixes","title":"Fixes","text":"<ul> <li>Avoid poi markers clustering by adding a new zoom level for poi</li> <li>Fixed quick filter all not taking into account selected pois</li> </ul>"},{"location":"around_me/android/releases/2.16.5/","title":"Around Me Android 2.16.5 Changelog","text":"\ud83d\uddd3 05 Jun 2025"},{"location":"around_me/android/releases/2.16.5/#fixes","title":"Fixes","text":"<ul> <li>Fix a crash for already used view id for a recycler view</li> <li>Fix nullable binding when going back to a fragment</li> <li>Fix fetching data when the fragment is not ready</li> </ul>"},{"location":"around_me/android/releases/2.16.6/","title":"Around Me Android 2.16.6 Changelog","text":"\ud83d\uddd3 11 Jun 2025"},{"location":"around_me/android/releases/2.16.6/#fixes","title":"Fixes","text":"<ul> <li>Fix a crash for already used view id for a recycler view</li> </ul>"},{"location":"around_me/android/releases/2.17.0/","title":"Around Me Android 2.17.0 Changelog","text":"\ud83d\uddd3 11 Sep 2025"},{"location":"around_me/android/releases/2.17.0/#features","title":"Features","text":"<ul> <li>Default zoom level can now be configured</li> <li>Added new zoom level for stop points</li> <li>Empty states can now be configured</li> <li>Added delete action in auto complete history items.</li> </ul>"},{"location":"around_me/android/releases/2.17.0/#fixes","title":"Fixes","text":"<ul> <li>Show poi marker when coming from autocompletion regardless of the quickfilters</li> </ul>"},{"location":"around_me/android/releases/2.17.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.data:expert</code>&gt; <code>3.7.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code>&gt; <code>2.23.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code>&gt; <code>2.6.6</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code>&gt; <code>1.22.0</code></li> </ul>"},{"location":"around_me/android/releases/2.2.0/","title":"Around Me Android 2.2.0 Changelog","text":"\ud83d\uddd3 27 Jan 2023"},{"location":"around_me/android/releases/2.2.0/#features","title":"Features","text":"<ul> <li>Show disruption icon on favorite stations</li> </ul>"},{"location":"around_me/android/releases/2.2.0/#fixes","title":"Fixes","text":"<ul> <li>Fix map loading latency</li> <li>Poi categories are optional</li> </ul>"},{"location":"around_me/android/releases/2.2.1/","title":"Around Me Android 2.2.1 Changelog","text":"\ud83d\uddd3 02 Feb 2023"},{"location":"around_me/android/releases/2.2.1/#fixes","title":"Fixes","text":"<ul> <li>Fix initialization of colors when using a configuration object</li> </ul>"},{"location":"around_me/android/releases/2.3.0/","title":"Around Me Android 2.3.0 Changelog","text":"\ud83d\uddd3 15 Feb 2023"},{"location":"around_me/android/releases/2.3.0/#features","title":"Features","text":"<ul> <li>A customizable POI event button is added</li> </ul>"},{"location":"around_me/android/releases/2.3.0/#tasks","title":"Tasks","text":"<ul> <li>Rename <code>AroundMeConfiguration.featuresConfiguration</code> by <code>AroundMeConfiguration.features</code></li> </ul>"},{"location":"around_me/android/releases/2.3.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.6.1</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.8.0</code></li> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; <code>1.2.0</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.2</code></li> <li><code>androidx.test.ext:junit</code> &gt; <code>1.1.5</code></li> </ul>"},{"location":"around_me/android/releases/2.4.0/","title":"Around Me Android 2.4.0 Changelog","text":"\ud83d\uddd3 17 Mar 2023"},{"location":"around_me/android/releases/2.4.0/#features","title":"Features","text":"<ul> <li>New <code>home</code> and <code>work</code> buttons added next to <code>Where shall we go?</code> button</li> <li>Show favorites journeys</li> <li>Can open directly a favorite journey in Journey</li> <li>An address can be added as favorite</li> <li>Add events analytics</li> </ul>"},{"location":"around_me/android/releases/2.4.0/#tasks","title":"Tasks","text":"<ul> <li>Change configuration color variable names</li> </ul>"},{"location":"around_me/android/releases/2.4.0/#fixes","title":"Fixes","text":"<ul> <li>Fix display of free floatings</li> </ul>"},{"location":"around_me/android/releases/2.4.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.recyclerview:recyclerview</code> &gt;<code>1.3.0</code></li> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; <code>1.2.1</code></li> <li><code>androidx.test.espresso:espresso-core</code> &gt; <code>3.5.1</code></li> </ul>"},{"location":"around_me/android/releases/2.4.1/","title":"Around Me Android 2.4.1 Changelog","text":"\ud83d\uddd3 03 Apr 2023"},{"location":"around_me/android/releases/2.4.1/#fix","title":"Fix","text":"<ul> <li>Fix crash when favorites are loaded before the map</li> </ul>"},{"location":"around_me/android/releases/2.4.1/#task","title":"Task","text":"<ul> <li>Add shimmer effect when loading next departures</li> </ul>"},{"location":"around_me/android/releases/2.4.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; <code>1.2.2</code></li> </ul>"},{"location":"around_me/android/releases/2.5.0/","title":"Around Me Android 2.5.0 Changelog","text":"\ud83d\uddd3 23 Aug 2023"},{"location":"around_me/android/releases/2.5.0/#features","title":"Features","text":"<ul> <li>Add quick filters for public transports and free floatings</li> <li>Show line routes and vehicle positions on map when clicking on a bus station</li> <li>New POI filters button on map</li> <li>New configurable markers colors</li> </ul>"},{"location":"around_me/android/releases/2.5.0/#fixes","title":"Fixes","text":"<ul> <li>Fix absence of next departures on some occurrences</li> <li>Fix marker for an searched address</li> <li>Remove favorite title when there are no favorites</li> </ul>"},{"location":"around_me/android/releases/2.5.0/#tasks","title":"Tasks","text":"<ul> <li>Add custom analytics events</li> <li>Update <code>AroundMeEnvironment</code> which can have <code>SBX</code>, <code>CUS</code> and <code>PROD</code></li> <li>Delegate is no more accessible</li> <li>Add navigation listener and remove navigation callbacks from <code>AroundMeUI.init()</code></li> </ul>"},{"location":"around_me/android/releases/2.5.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.8.21</code></li> <li><code>gradle-wrapper</code> &gt; <code>8.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.0.2</code></li> <li><code>minSdk</code> &gt; <code>23</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.3.1</code></li> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; Removed</li> </ul>"},{"location":"around_me/android/releases/2.6.0/","title":"Around Me Android 2.6.0 Changelog","text":"\ud83d\uddd3 11 Jan 2024"},{"location":"around_me/android/releases/2.6.0/#features","title":"Features","text":"<ul> <li>Customizable disruption colors</li> <li>Add clusters on the map for bus station and POI markers</li> <li>Remove postal code from POI details</li> <li>Show an auto-completion POI result only if it's filtered</li> <li>Auto-completion results are ordered by distance if the user location is enabled</li> </ul>"},{"location":"around_me/android/releases/2.6.0/#fix","title":"Fix","text":"<ul> <li>Fix negative battery on scooter</li> <li>Fix auto-completion history order</li> <li>Fix auto-completion result height</li> </ul>"},{"location":"around_me/android/releases/2.6.0/#tasks","title":"Tasks","text":"<ul> <li>Add proguard rules for Crashlytics</li> <li>Add proguard rules for <code>java.io.Serializable</code></li> <li>Add frequency for next departures request in configuration</li> </ul>"},{"location":"around_me/android/releases/2.6.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.1.1</code></li> <li><code>compileSdk</code> &gt; <code>34</code></li> <li><code>buildToolsVersion</code> &gt; <code>34.0.0</code></li> <li><code>com.google.maps.android:android-maps-utils</code> &gt; <code>3.5.3</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.4.1</code></li> </ul>"},{"location":"around_me/android/releases/2.7.0/","title":"Around Me Android 2.7.0 Changelog","text":"\ud83d\uddd3 12 Feb 2024"},{"location":"around_me/android/releases/2.7.0/#features","title":"Features","text":"<ul> <li>Can add custom font</li> <li>Add timezone support for date format</li> </ul>"},{"location":"around_me/android/releases/2.7.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.9.22</code></li> <li><code>gradle-wrapper</code> &gt; <code>8.2</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.2.1</code></li> <li><code>com.google.firebase:firebase-crashlytics-gradle</code> &gt; <code>2.9.9</code></li> <li><code>com.google.gms:google-services</code> &gt; <code>4.4.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.12.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.6.2</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.6.2</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.3.2</code></li> <li><code>androidx.room:room-compiler</code> &gt; <code>2.6.1</code>. Use <code>ksp</code> instead of <code>kapt</code></li> <li><code>androidx.room:room-ktx</code> &gt; <code>2.6.1</code></li> <li><code>androidx.room:room-runtime</code> &gt; <code>2.6.1</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.11.0</code></li> <li><code>com.google.dagger:dagger</code> &gt; <code>2.50</code></li> <li><code>com.google.dagger:dagger-android-support</code> &gt; <code>2.50</code></li> <li><code>com.google.dagger:dagger-compiler</code> &gt; <code>2.50</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.13.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.3.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.13.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.5.1</code></li> </ul>"},{"location":"around_me/android/releases/2.7.2/","title":"Around Me Android 2.7.2 Changelog","text":"\ud83d\uddd3 28 Feb 2024"},{"location":"around_me/android/releases/2.7.2/#fix","title":"Fix","text":"<ul> <li>Fix database migration</li> </ul>"},{"location":"around_me/android/releases/2.8.0/","title":"Around Me Android 2.8.0 Changelog","text":"\ud83d\uddd3 21 Mai 2024"},{"location":"around_me/android/releases/2.8.0/#features","title":"Features","text":"<ul> <li>Enhance accessibility</li> <li>Redesign home bottomsheet with boomarked elements</li> <li>Add stop points name below map markers</li> </ul>"},{"location":"around_me/android/releases/2.8.0/#task","title":"Task","text":"<ul> <li>Enlarge horizontally main content</li> <li>Add account button</li> <li>Update next departure design</li> </ul>"},{"location":"around_me/android/releases/2.8.0/#fixes","title":"Fixes","text":"<ul> <li>Fix string resources persistance in database</li> <li>Fix initialization of <code>AroundMeDisruptionColors</code></li> <li>Add <code>showDirectlyAutoCompletion</code> option for Where are we going?</li> <li>Fix realtime calls lifecycle</li> <li>Remove old address marker after new search</li> <li>Fix autocompletion order</li> <li>Remove the ability to hide the bottom sheet</li> <li>Add context to favorite journey route</li> </ul>"},{"location":"around_me/android/releases/2.8.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.14.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.4.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.14.0</code></li> </ul>"},{"location":"around_me/android/releases/2.8.1/","title":"Around Me Android 2.8.1 Changelog","text":"\ud83d\uddd3 07 Jun 2024"},{"location":"around_me/android/releases/2.8.1/#fix","title":"Fix","text":"<ul> <li>Fix old database migration</li> </ul>"},{"location":"around_me/android/releases/2.8.2/","title":"Around Me Android 2.8.2 Changelog","text":"\ud83d\uddd3 24 Jun 2024"},{"location":"around_me/android/releases/2.8.2/#fix","title":"Fix","text":"<ul> <li>Don't show POIs other than bss stations from the corresponding tab</li> <li><code>All favorites</code> button opens the corresponding tab in the <code>Bookmark</code> module</li> </ul>"},{"location":"around_me/android/releases/2.8.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.5.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.15.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.4.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.15.0</code></li> </ul>"},{"location":"around_me/android/releases/2.9.0/","title":"Around Me Android 2.9.0 Changelog","text":"\ud83d\uddd3 26 Jul 2024"},{"location":"around_me/android/releases/2.9.0/#features","title":"Features","text":"<ul> <li>Bookmark shorcut buttons can open implemented custom screens</li> </ul>"},{"location":"around_me/android/releases/2.9.0/#fix","title":"Fix","text":"<ul> <li>Hide filter button when there is no POI categories configured</li> </ul>"},{"location":"around_me/android/releases/2.9.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.16.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.5.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.16.0</code></li> </ul>"},{"location":"around_me/android/releases/2.9.1/","title":"Around Me Android 2.9.1 Changelog","text":"\ud83d\uddd3 08 Aug 2024"},{"location":"around_me/android/releases/2.9.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.16.1</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.5.1</code></li> </ul>"},{"location":"around_me/ios/","title":"Around Me iOS","text":""},{"location":"around_me/ios/#setup","title":"Setup","text":"<p>In your project, add the following lines to your <code>Podfile</code>:</p> <pre><code>source 'https://github.com/CocoaPods/Specs.git' # Default Cocoapods URL\nsource 'https://github.com/hove-io/Podspecs.git' # Around Me podspec URL\n\ntarget 'YOUR_PROJECT_SCHEME' do\n  pod 'AroundMeSDK', '4.3.1' # Around Me Pod definition\nend\n\n# Required for XCFramework\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n    end\n  end\nend\n</code></pre> <p>Using your CLI, run <code>pod install</code> in your project directory.</p>"},{"location":"around_me/ios/#implementation","title":"Implementation","text":"<p>Warning</p> <p>Make sure to read the modules configuration section before proceeding</p> <p>This module is set up by calling <code>AroundMe.shared.initialize()</code> method which takes the following parameters:</p> Name Required Description Type Example <code>coverage</code> Navitia coverage <code>String</code> <code>fr-idf</code> <code>token</code> Navitia token <code>String</code> <code>ABCD-1234-...</code> <code>timeZone</code> Time zone <code>String</code> <code>Europe/Paris</code> <code>env</code> Navitia environment <code>String</code> <code>PROD</code> <code>colors</code> Define the custom colors <code>AroundMeColorsConfiguration</code> - <code>unifiedColors</code> Define the custom colors <code>UnifiedColorsConfiguration</code> - <code>fonts</code> Use custom fonts <code>AroundMeFontsConfiguration</code> - <code>lineResources</code> List of transport lines resource IDs <code>[LineResource]</code> - <code>modeResources</code> List of transport modes resource IDs <code>[ModeResource]</code> - <code>poiCategories</code> List of available POIs <code>[PoiCategory]</code> - <code>providerResources</code> Transport providers configuration <code>[ProviderResource]</code> - <code>titleResources</code> Screens titles customization <code>AroundMeTitlesResources</code> - <code>iconsResources</code> List of icon resource names <code>AroundMeIconsResources</code> - <code>transportCategories</code> List of supported transport modes <code>[TransportCategory]</code> - <code>features</code> Enable/disable some features <code>AroundMeFeaturesConfiguration</code> - <p>You can also call the <code>initialize()</code> method with the global JSON configuration file added to your application bundle:</p> Name Required Description Type Example <code>configurationJsonFile</code> Global configuration JSON file name <code>String</code> <code>configuration.json</code> Example Configuration with fileManual configuration <pre><code>do {\n    try AroundMe.shared.initialize(\n        token: \"your_token\", \n        configurationJsonFile: \"aroundme_configuration.json\"\n    )                                                               \n} catch {\n    Logger.error(\"%@\", String(\n        format: \"Around Me SDK cannot be initialized! %@\", \n        error.localizedDescription)\n    )\n}                                   \n</code></pre> <pre><code>do {\n    let transportCategories = [TransportCategory(\n        modules: [\"aroundme\"],\n        iconRes: \"ic_section_mode_metro\",\n        nameRes: \"metro\",\n        selected: true,\n        modes: [TransportCategoryMode(\n            physical: TransportPhysicalMode(\n                id: \"physical_mode:Metro\", \n                nameRes: \"metro\"\n            ),\n            commercial: TransportCommercialMode(\n                id: \"commercial_mode:Metro\", \n                name: \"Metro\"\n            )\n        )],\n        firstSectionModes: [\"walking\"],\n        lastSectionModes: [\"walking\"]\n    )]\n    let aroundmeColorsConfiguration = AroundMeColorsConfiguration(\n        primaryColor: \"#88819f\", \n        secondaryColor: \"#8faa96\"\n    )\n    let disruptionsColorsConfiguration = DisruptionsColorsConfiguration(\n        information: \"#22a824\",\n        nonBlocking: \"#faa12d\",\n        blocking: \"#e62c29\"\n    )\n    let unifiedColorsConfiguration = UnifiedColorsConfiguration(\n        disruptions: disruptionsColorsConfiguration\n    )\n\n    try AroundMe.shared.initialize(\n        coverage: \"fr-idf\",\n        token: \"your_token\",\n        timeZone: \"your_contry\",\n        env: \"PROD\",\n        colors: aroundmeColorsConfiguration,\n        unifiedColors: unifiedColorsConfiguration,\n        transportCategories: transportCategories,\n    )                                                         \n} catch {\n    Logger.error(\"%@\", String(\n        format: \"Around Me SDK cannot be initialized! %@\", \n        error.localizedDescription\n    ))\n}                                   \n</code></pre>"},{"location":"around_me/ios/#events-tracking","title":"Events tracking","text":"<p>In order to receive the list of generated events within Around Me module, you have to assign the instance of the tracker to the Around Me module instance as follows and implement the required methods:</p> <pre><code>AroundMe.shared.tracker = self\n</code></pre>"},{"location":"around_me/ios/#launching","title":"Launching","text":"<p>This module has a single entry point. The parameter <code>showBack</code> handles the back button visibility on the first screen.</p> <pre><code>guard let aroundMeViewController = AroundMe.shared.rootViewController else {\n    return nil\n}\naroundMeViewController.showBack = false // Hide back button embedded in the first screen\n</code></pre> <p>If you want to use the <code>rootViewController</code> as a <code>ChildViewController</code> of your <code>ViewController</code>, you should embed it in an <code>NavigationController</code>. </p> Using a <code>NavigationController</code>Using a <code>ChildViewController</code> <pre><code>navigationController?.pushViewController(\n    aroundMeViewController,\n    animated: false\n)\n</code></pre> <pre><code>yourViewController.addChild(UINavigationController(\n    rootViewController: aroundMeViewController\n))\n</code></pre>"},{"location":"around_me/ios/#filters","title":"Filters","text":"<p>This screen content is a visual version of the passed transport categories and POI categories configuration (check modules configuration section for more information). The selected elements will be used to filter the data received and drawn within the map. One filter should at least be selected or else the user can't apply the current filters configuration. If you want to reset the user filters configuration, you can simply call <code>AroundMeUI.getInstance().resetUserPreferences()</code> and the current configuration will be deleted and the screen will be updated according to the new passed configuration.</p>"},{"location":"around_me/ios/#communicating-with-other-modules-or-the-app","title":"Communicating with other modules or the app","text":"<p>Around Me module can exchange data with or navigate to either other modules or the host application. To do this, the host application must initialize <code>Router</code>. This singleton will ensure communication between the different modules or the app. Communication will not occur unless those are registered beforehand:</p> <pre><code>try Router.shared\n    .register(aroundMe: AroundMe.shared.aroundMeRouter)\n    ... // Register modules and/or app\n    .initialize()\n</code></pre>"},{"location":"around_me/ios/#modules","title":"Modules","text":""},{"location":"around_me/ios/#bookmark","title":"Bookmark","text":"<p> Enabling</p> <p>Around Me module communicates with Bookmark module in order to vizualize favorite stations, journeys and POIs. You should enable the <code>bookmark_mode</code> parameter in the features configuration.</p> <p>Bookmark module must be registered in the <code>Router</code> to build the connection between these modules:</p> <pre><code>Router.shared.register(bookmark: Bookmark.shared.bookmarkRouter)\n</code></pre> <p> Methods</p> <p>The following methods from the <code>CustomAroundMeBookmarkDelegate</code> interface should be implemented by the host application to enable navigation to the Bookmark module or any other custom screen. Note that the parameters of these methods can be omitted as needed. </p> <p>Warning</p> <p>If you don't implement this protocol, the Bookmark module will be shown.</p> <p>This method is called after click on the favorite home shortcut button, in case it is empty. <pre><code>func onHomeAddressCompletionRequested(module: Router.BookmarkLinkedModule) {\n    // launch the bookmark module screen or your custom screen\n}\n</code></pre></p> Param Type Description Value <code>module</code> <code>Router.BookmarkLinkedModule</code> Module triggering the method call <code>Router.BookmarkLinkedModule.aroundMe</code> or <code>Router.BookmarkLinkedModule.journey</code> <p>This method is called after click on the favorite work shortcut button, in case it is empty.</p> <pre><code>func onWorkAddressCompletionRequested(module: Router.BookmarkLinkedModule) {\n    // launch the bookmark module screen or your custom screen if the favorite work address is empty\n}\n</code></pre> Param Type Description Value <code>module</code> <code>Router.BookmarkLinkedModule</code> Module triggering the method call <code>Router.BookmarkLinkedModule.aroundMe</code> or <code>Router.BookmarkLinkedModule.journey</code> <pre><code>func onSeeAllFavoritesClicked() {\n    // launch the bookmark module screen or your custom screen\n  }\n</code></pre>"},{"location":"around_me/ios/#journey","title":"Journey","text":"<p> Enabling</p> <p>Around Me module communicates with Journey module in order to get directions for a chosen itinerary. You should enable the <code>journey_mode</code> and the <code>go_from_go_to</code> parameter in the features configuration. Another way to communicate with is through the Map screen and precisely the Where are we going? button, this feature should also be enabled by setting the <code>where_shall_we_go</code> in the features configuration to <code>true</code>.</p> <p>Journey module must also be registered in the <code>Router</code> to build the connection between these modules: <pre><code>Router.shared.register(journey: JourneySdk.shared.journeyRouter)\n</code></pre></p>"},{"location":"around_me/ios/#traffic","title":"Traffic","text":"<p> Enabling</p> <p>Around Me module communicates with Traffic module in order to easily access traffic information. You should enable the <code>traffic_mode</code> parameter in the features configuration.</p> <p>Traffic module must also be registered in the <code>Router</code> to build the connection between these modules:</p> <pre><code>Router.shared.register(traffic: Traffic.shared.trafficRouter)\n</code></pre>"},{"location":"around_me/ios/changelogs/","title":"Around Me iOS Changelogs","text":"<ul> <li>v4.3.1 (15 Oct 2025)</li> <li>v4.3.0 (11 Sep 2025)</li> <li>v4.2.3 (12 Aug 2025)</li> <li>v4.2.2 (18 Jun 2025)</li> <li>v4.2.1 (07 May 2025)</li> <li>v4.2.0 (22 Apr 2025)</li> <li>v4.1.0 (24 Mar 2025)</li> <li>v4.0.0 (24 Feb 2025)</li> <li>v3.10.2 (12 Feb 2025)</li> <li>v3.10.1 (04 Feb 2025)</li> <li>v3.10.0 (02 Dec 2024)</li> <li>v3.9.2 (19 Nov 2024)</li> <li>v3.9.1 (07 Nov 2024)</li> <li>v3.9.0 (30 Oct 2024)</li> <li>v3.8.0 (24 Sep 2024)</li> <li>v3.7.0 (24 July 2024)</li> <li>v3.6.2 (24 Jun 2024)</li> <li>v3.6.1 (13 Jun 2024)</li> <li>v3.6.0 (21 Mai 2024)</li> <li>v3.5.0 (27 Mar 2024)</li> <li>v3.4.0 (28 Aug 2023)</li> <li>v3.3.1 (03 Apr 2023)</li> <li>v3.3.0 (17 Mar 2023)</li> <li>v3.2.0 (15 Feb 2023)</li> <li>v3.1.0 (10 Jan 2023)</li> <li>v3.0.2 (20 Oct 2022)</li> </ul>"},{"location":"around_me/ios/releases/3.0.2/","title":"AroundMe iOS 3.0.2 Changelog","text":"\ud83d\uddd3 20 Oct 2022"},{"location":"around_me/ios/releases/3.0.2/#features","title":"Features","text":"<ul> <li>Redesign the whole module</li> </ul>"},{"location":"around_me/ios/releases/3.0.2/#fixes","title":"Fixes","text":"<ul> <li>Remove incompatible dependencies</li> </ul>"},{"location":"around_me/ios/releases/3.0.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> &gt; <code>2.3.2</code></li> <li><code>RealmSwift</code> &gt; <code>10.17.0</code></li> <li><code>FlexLayout</code> &gt; <code>1.3.23</code></li> <li><code>PinLayout</code> &gt; <code>1.10.2</code></li> <li><code>MaterialComponents/ProgressView</code> &gt; <code>124.2.0</code></li> <li><code>MaterialComponents/BottomSheet</code> &gt; <code>124.2.0</code></li> </ul>"},{"location":"around_me/ios/releases/3.1.0/","title":"AroundMe iOS 3.1.0 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"around_me/ios/releases/3.1.0/#features","title":"Features","text":"<ul> <li>Add Bookmark feature</li> <li>Add a redirect to Traffic</li> </ul>"},{"location":"around_me/ios/releases/3.1.0/#tasks","title":"Tasks","text":"<ul> <li>Add network to poi model</li> <li>Update the user location button behavior</li> </ul>"},{"location":"around_me/ios/releases/3.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix poi details </li> <li>Fix annotations by filter</li> </ul>"},{"location":"around_me/ios/releases/3.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> <li><code>RealmSwift</code> &gt; <code>10.17.0</code></li> <li><code>FlexLayout</code> &gt; <code>1.3.23</code></li> <li><code>PinLayout</code> &gt; <code>1.10.2</code></li> <li><code>MaterialComponents/ProgressView</code> &gt; <code>124.2.0</code></li> <li><code>MaterialComponents/BottomSheet</code> &gt; <code>124.2.0</code></li> </ul>"},{"location":"around_me/ios/releases/3.10.0/","title":"AroundMe iOS 3.10.0 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"around_me/ios/releases/3.10.0/#features","title":"Features","text":"<ul> <li>Add <code>stations</code> for <code>bookmark_mode.display</code> in the configuration</li> </ul>"},{"location":"around_me/ios/releases/3.10.0/#fix","title":"Fix","text":"<ul> <li>Fix map annotation filtering </li> <li>Fix station details list constraints</li> </ul>"},{"location":"around_me/ios/releases/3.10.0/#tasks","title":"Tasks","text":"<ul> <li>Use a new icon for parking and BSS parking places</li> <li>Use single color background for bottomsheet</li> </ul>"},{"location":"around_me/ios/releases/3.10.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>2.18.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.5.3</code></li> </ul>"},{"location":"around_me/ios/releases/3.10.1/","title":"AroundMe iOS 3.10.1 Changelog","text":"\ud83d\uddd3 04 Feb 2025"},{"location":"around_me/ios/releases/3.10.1/#fixes","title":"Fixes","text":"<ul> <li>Fix home and work shortcuts not sending navitia id to journey</li> </ul>"},{"location":"around_me/ios/releases/3.10.1/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"around_me/ios/releases/3.10.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>2.18.1</code></li> <li><code>RouterEngine</code> -&gt; <code>1.5.4</code></li> </ul>"},{"location":"around_me/ios/releases/3.10.2/","title":"AroundMe iOS 3.10.2 Changelog","text":"\ud83d\uddd3 12 Feb 2025"},{"location":"around_me/ios/releases/3.10.2/#tasks","title":"Tasks","text":"<ul> <li>Upgrade RealmSwift and FlexLayout dependencies</li> </ul>"},{"location":"around_me/ios/releases/3.10.2/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"around_me/ios/releases/3.10.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>RealmSwift</code> -&gt; <code>20.0.1</code></li> <li><code>FlexLayout</code> -&gt; <code>2.1.0</code> </li> </ul>"},{"location":"around_me/ios/releases/3.2.0/","title":"AroundMe iOS 3.2.0 Changelog","text":"\ud83d\uddd3 15 Feb 2023"},{"location":"around_me/ios/releases/3.2.0/#features","title":"Features","text":"<ul> <li>A customizable POI event button is added</li> <li>Show disruption icon on favorite stations</li> </ul>"},{"location":"around_me/ios/releases/3.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> <li><code>RealmSwift</code> &gt; <code>10.17.0</code></li> <li><code>FlexLayout</code> &gt; <code>1.3.23</code></li> <li><code>PinLayout</code> &gt; <code>1.10.2</code></li> <li><code>MaterialComponents/ProgressView</code> &gt; <code>124.2.0</code></li> <li><code>MaterialComponents/BottomSheet</code> &gt; <code>124.2.0</code></li> </ul>"},{"location":"around_me/ios/releases/3.3.0/","title":"AroundMe iOS 3.3.0 Changelog","text":"\ud83d\uddd3 17 Mar 2023"},{"location":"around_me/ios/releases/3.3.0/#features","title":"Features","text":"<ul> <li>New <code>home</code> and <code>work</code> buttons added next to <code>Where shall we go?</code> button</li> <li>Show favorites journeys</li> <li>Add events analytics</li> </ul>"},{"location":"around_me/ios/releases/3.3.0/#fixes","title":"Fixes","text":"<ul> <li>Fix crash when more stations tap is triggered</li> <li>Fix icons not showing for transport modes</li> </ul>"},{"location":"around_me/ios/releases/3.3.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> <li><code>RealmSwift</code> &gt; <code>10.17.0</code></li> <li><code>FlexLayout</code> &gt; <code>1.3.23</code></li> <li><code>PinLayout</code> &gt; <code>1.10.2</code></li> <li><code>MaterialComponents/ProgressView</code> &gt; <code>124.2.0</code></li> <li><code>MaterialComponents/BottomSheet</code> &gt; <code>124.2.0</code></li> </ul>"},{"location":"around_me/ios/releases/3.3.1/","title":"AroundMe iOS 3.3.1 Changelog","text":"\ud83d\uddd3 03 Apr 2023"},{"location":"around_me/ios/releases/3.3.1/#fixes","title":"Fixes","text":"<ul> <li>Fix Realm configuration objects</li> </ul>"},{"location":"around_me/ios/releases/3.4.0/","title":"AroundMe iOS 3.4.0 Changelog","text":"\ud83d\uddd3 28 Aug 2023"},{"location":"around_me/ios/releases/3.4.0/#features","title":"Features","text":"<ul> <li>Add <code>ShowBack</code> param</li> <li>Add quick filters for public transports and free floatings</li> <li>Show line routes and vehicle positions on map when clicking on a bus station</li> <li>New POI filters button on map</li> </ul>"},{"location":"around_me/ios/releases/3.4.0/#tasks","title":"Tasks","text":"<ul> <li>Add custom analytic events</li> <li>Remove BookmarkSDK dependency</li> </ul>"},{"location":"around_me/ios/releases/3.4.0/#fixes","title":"Fixes","text":"<ul> <li>Do not display <code>Favorite stations</code> if no station is added to favorites</li> <li>Fix stations sort in the bottom sheet</li> <li>Fix bike parking displayed as P+R</li> <li>Fix sections order in autocompletion</li> <li>Fix home and work bookmark buttons not clickable</li> <li>Fix Line icon position in the bottom sheet </li> <li>Fix extra margin at the top of the main bottom sheet</li> <li>Fix <code>See around me</code> button layout</li> <li>Fix localized texts</li> </ul>"},{"location":"around_me/ios/releases/3.4.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>2.7.0</code></li> <li><code>RealmSwift</code> -&gt; <code>10.42.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.0.0</code></li> </ul>"},{"location":"around_me/ios/releases/3.4.0/#deployment-target","title":"Deployment target","text":"<ul> <li><code>iOS 14</code> minimun</li> </ul>"},{"location":"around_me/ios/releases/3.5.0/","title":"AroundMe iOS 3.5.0 Changelog","text":"\ud83d\uddd3 27 Mar 2024"},{"location":"around_me/ios/releases/3.5.0/#features","title":"Features","text":"<ul> <li>Add time zone parameter</li> <li>Add next departure frequency</li> <li>Optimize map markers loading</li> </ul>"},{"location":"around_me/ios/releases/3.5.0/#tasks","title":"Tasks","text":"<ul> <li>Add analytics</li> <li>Add accessibility</li> </ul>"},{"location":"around_me/ios/releases/3.5.0/#fixes","title":"Fixes","text":"<ul> <li>Fix filters not being reset</li> </ul>"},{"location":"around_me/ios/releases/3.5.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code>: <code>2.12.0</code></li> <li><code>RouterEngine</code>: <code>1.1.3</code></li> <li><code>NavitiaSDK</code>: <code>2.7.1</code></li> </ul>"},{"location":"around_me/ios/releases/3.5.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"around_me/ios/releases/3.6.0/","title":"AroundMe iOS 3.6.0 Changelog","text":"\ud83d\uddd3 21 Mai 2024"},{"location":"around_me/ios/releases/3.6.0/#features","title":"Features","text":"<ul> <li>New favorite based design on home page</li> <li>Add account shortcut</li> <li>Add favorite bss stations display support</li> </ul>"},{"location":"around_me/ios/releases/3.6.0/#tasks","title":"Tasks","text":"<ul> <li>Update stop point marker view</li> </ul>"},{"location":"around_me/ios/releases/3.6.0/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.2.0</code></li> <li>DesignEngine <code>v2.13.0</code></li> </ul>"},{"location":"around_me/ios/releases/3.6.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"around_me/ios/releases/3.6.1/","title":"AroundMe iOS 3.6.1 Changelog","text":"\ud83d\uddd3 13 Jun 2024"},{"location":"around_me/ios/releases/3.6.1/#tasks","title":"Tasks","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"around_me/ios/releases/3.6.1/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"around_me/ios/releases/3.6.2/","title":"AroundMe iOS 3.6.2 Changelog","text":"\ud83d\uddd3 24 Jun 2024"},{"location":"around_me/ios/releases/3.6.2/#fixes","title":"Fixes","text":"<ul> <li>Fix translation on location dialogs</li> </ul>"},{"location":"around_me/ios/releases/3.6.2/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"around_me/ios/releases/3.7.0/","title":"AroundMe iOS 3.7.0 Changelog","text":"\ud83d\uddd3 24 July 2024"},{"location":"around_me/ios/releases/3.7.0/#tasks","title":"Tasks","text":"<ul> <li>Enable intercepting bookmark navigation events</li> </ul>"},{"location":"around_me/ios/releases/3.7.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"around_me/ios/releases/3.8.0/","title":"AroundMe iOS 3.8.0 Changelog","text":"\ud83d\uddd3 24 Sep 2024"},{"location":"around_me/ios/releases/3.8.0/#features","title":"Features","text":"<ul> <li>Add actions menu on favorite stations (go from, go to, show schedules, delete)</li> </ul>"},{"location":"around_me/ios/releases/3.8.0/#tasks","title":"Tasks","text":"<ul> <li>Use TerminusSchedule API to show next departures</li> <li>Display +1 on day +1 next departure</li> </ul>"},{"location":"around_me/ios/releases/3.8.0/#compiler","title":"Compiler","text":"<ul> <li><code>Swift</code> -&gt; <code>6.0</code></li> </ul>"},{"location":"around_me/ios/releases/3.9.0/","title":"AroundMe iOS 3.9.0 Changelog","text":"\ud83d\uddd3 30 Oct 2024"},{"location":"around_me/ios/releases/3.9.0/#features","title":"Features","text":"<ul> <li>Ability to add POIs to the quick filters</li> </ul>"},{"location":"around_me/ios/releases/3.9.0/#task","title":"Task","text":"<ul> <li>Enhance the bookmark feature with more possibilities of displaying </li> </ul>"},{"location":"around_me/ios/releases/3.9.0/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.5.2</code></li> <li>DesignEngine <code>v2.17.0</code></li> </ul>"},{"location":"around_me/ios/releases/3.9.0/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0</code></li> </ul>"},{"location":"around_me/ios/releases/3.9.1/","title":"AroundMe iOS 3.9.1 Changelog","text":"\ud83d\uddd3 07 Nov 2024"},{"location":"around_me/ios/releases/3.9.1/#fix","title":"Fix","text":"<ul> <li>Fix the activation and deactivation of the bookmark feature</li> </ul>"},{"location":"around_me/ios/releases/3.9.2/","title":"AroundMe iOS 3.9.2 Changelog","text":"\ud83d\uddd3 19 Nov 2024"},{"location":"around_me/ios/releases/3.9.2/#features","title":"Features","text":"<ul> <li>Show autocomplete results based on the user's location</li> </ul>"},{"location":"around_me/ios/releases/4.0.0/","title":"AroundMe iOS 4.0.0 Changelog","text":"\ud83d\uddd3 24 Feb 2025"},{"location":"around_me/ios/releases/4.0.0/#feature","title":"Feature","text":"<ul> <li>Show/hide PRM availability based on configuration</li> </ul>"},{"location":"around_me/ios/releases/4.0.0/#tasks","title":"Tasks","text":"<ul> <li>Extract module configuration from unified configuration</li> <li>Add unified colors configuration</li> <li>Update minimum iOS deployment to 16</li> <li>Show places list in fullscreen </li> </ul>"},{"location":"around_me/ios/releases/4.0.0/#fixes","title":"Fixes","text":"<ul> <li>Remove navigation bar in home screen</li> <li>Fix map filtering </li> <li>Add missing poi categories in init</li> </ul>"},{"location":"around_me/ios/releases/4.0.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.8.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.6.0</code></li> <li><code>DesignEngine</code> -&gt; <code>3.0.0</code></li> </ul>"},{"location":"around_me/ios/releases/4.1.0/","title":"AroundMe iOS 4.1.0 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"around_me/ios/releases/4.1.0/#tasks","title":"Tasks","text":"<ul> <li>Hide parking section that was displayed inside favorite journey freeze</li> <li>Show searched places addresses</li> <li>Make searched poi icons customizable</li> <li>Add config params to override favorite tabs title</li> <li>Display POI icons if available</li> <li>Display line details for every zoom level</li> </ul>"},{"location":"around_me/ios/releases/4.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix transport line text color icon in map annotation</li> <li>Fix back button not returning the view back to its previous state</li> <li>Fix line path not properly displayed on the map</li> </ul>"},{"location":"around_me/ios/releases/4.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.9.0</code></li> <li><code>DesignEngine</code> -&gt; <code>3.1.0</code></li> </ul>"},{"location":"around_me/ios/releases/4.2.0/","title":"AroundMe iOS 4.2.0 Changelog","text":"\ud83d\uddd3 22 Apr 2025"},{"location":"around_me/ios/releases/4.2.0/#features","title":"Features","text":"<ul> <li>Added an alert on the map when an item selected in autocompletion is not included in the filters.</li> </ul>"},{"location":"around_me/ios/releases/4.2.0/#tasks","title":"Tasks","text":"<ul> <li>Improved transitions between different states of the map and the bottom sheet.</li> <li>Added <code>WrappedContentTableView</code> view to UIKit for improved dynamic content handling</li> </ul>"},{"location":"around_me/ios/releases/4.2.0/#fixes","title":"Fixes","text":"<ul> <li>Fix address marker not showing everytime.</li> </ul>"},{"location":"around_me/ios/releases/4.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>3.2.0</code></li> </ul>"},{"location":"around_me/ios/releases/4.2.1/","title":"AroundMe iOS 4.2.1 Changelog","text":"\ud83d\uddd3 07 May 2025"},{"location":"around_me/ios/releases/4.2.1/#tasks","title":"Tasks","text":"<ul> <li>Added dSYM generation for symbolication of crash reports</li> </ul>"},{"location":"around_me/ios/releases/4.2.1/#fixes","title":"Fixes","text":"<ul> <li>Fixed initial bottom sheet height on map screen</li> <li>Added proper local date handling for improved consistency across time zones</li> </ul>"},{"location":"around_me/ios/releases/4.2.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>3.2.1</code></li> </ul>"},{"location":"around_me/ios/releases/4.2.2/","title":"AroundMe iOS 4.2.2 Changelog","text":"\ud83d\uddd3 12 Aug 2025"},{"location":"around_me/ios/releases/4.2.2/#fixes","title":"Fixes","text":"<ul> <li>Fix favorite list empty state not showing certain transport icons</li> </ul>"},{"location":"around_me/ios/releases/4.2.2/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.1.2</code></li> </ul>"},{"location":"around_me/ios/releases/4.2.3/","title":"AroundMe iOS 4.2.3 Changelog","text":"\ud83d\uddd3 12 Aug 2025"},{"location":"around_me/ios/releases/4.2.3/#fixes","title":"Fixes","text":"<ul> <li>Remove annotation if it's not compatible with quick filter</li> </ul>"},{"location":"around_me/ios/releases/4.2.3/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.1.2</code></li> </ul>"},{"location":"around_me/ios/releases/4.3.0/","title":"AroundMe iOS 4.3.0 Changelog","text":"\ud83d\uddd3 11 Sep 2025"},{"location":"around_me/ios/releases/4.3.0/#features","title":"Features","text":"<ul> <li>Route favorite transport to see all schedules screen</li> <li>Make favorite empty state texte configurable</li> <li>Add delete feature to search history</li> <li>Make default zoom level configurable</li> </ul>"},{"location":"around_me/ios/releases/4.3.0/#tasks","title":"Tasks","text":"<ul> <li>Optimize bottom sheet behavior</li> <li>Icon resources can now be optionally excluded from the configuration</li> </ul>"},{"location":"around_me/ios/releases/4.3.0/#fixes","title":"Fixes","text":"<ul> <li>Improved map behavior when reselecting and deselecting an annotation</li> </ul>"},{"location":"around_me/ios/releases/4.3.0/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.1.2</code></li> </ul>"},{"location":"around_me/ios/releases/4.3.1/","title":"AroundMe iOS 4.3.1 Changelog","text":"\ud83d\uddd3 15 Oct 2025"},{"location":"around_me/ios/releases/4.3.1/#fixes","title":"Fixes","text":"<ul> <li>Fix tabbar colors on favorite bottom sheet</li> <li>Fix quick filter behavior</li> </ul>"},{"location":"around_me/ios/releases/4.3.1/#compiler","title":"Compiler","text":"<ul> <li>Swift  `6.2.0``</li> </ul>"},{"location":"around_me/screens/","title":"Around Me Screens","text":""},{"location":"around_me/screens/#screen-flow","title":"Screen flow","text":"<p>Refer to the following schema to learn more about different interactions and how to navigate between module screens:</p> <pre><code>graph TB\n    Map(Map) --&gt; Details(Details)\n    Map(Map) --&gt; MapDragged(Map dragged)\n    MapDragged(Map dragged) --&gt; Search(Search)\n    MapDragged(Map dragged) --&gt; Filters(Filters)\n    Map(Map) --&gt; Search(Search)</code></pre>"},{"location":"around_me/screens/#map","title":"Map","text":"<p>The map screen represents the main screen of this module. It shows the places nearby the center of the visible region, draws them on the map and adds them to the bottom sliding panel. The shown data depend on the selected elements in the filters screen.</p> <p>In the bottom sheet of the main screen, the last added favorite stations are shown with the next departures for each direction, as well as an All Favorites button that redirects the user to the bookmark module. In the same section, if the user has added his journeys to favorites in journey module, a favorite journeys section appears showing the list of bookmarked journeys.</p> AndroidiOS <p></p> <p></p> <p>In the details bottom sheet of a station or a POI, there is a star button in order to save or delete it from the bookmarks.</p> AndroidiOS <p></p> <p></p>"},{"location":"around_me/screens/#map-dragged","title":"Map dragged","text":"<p>404</p> <p>This section is not written yet</p>"},{"location":"around_me/screens/#search","title":"Search","text":"<p>The search screen allows the user to seek for a place using a built-in autocompletion. The result is a selection of addresses, stations and points of interest based on the user search input text. If an element is selected, this screen will disappear and the map will be centered over the selected item location. Please note that a history feature is added to this screen, allowing the user to choose from the previous selected items. The <code>maxHistory</code> parameter defines the maximum number of items to show in the history list.</p> AndroidiOS <p></p> <p></p>"},{"location":"around_me/screens/#filters","title":"Filters","text":"<p>This screen content is a visual version of the passed transport categories and POI categories configuration (check modules configuration section for more information). The selected elements will be used to filter the data received and drawn within the map. One filter should at least be selected or else the user can't apply the current filters configuration.</p> AndroidiOS <p></p> <p>If you want to reset the user filters configuration, you can simply call <code>AroundMeUI.getInstance().resetUserPreferences()</code> and the current configuration will be deleted and the screen will be updated according to the new passed configuration.</p> <p></p>"},{"location":"bookmark/android/","title":"Bookmark Android","text":""},{"location":"bookmark/android/#setup","title":"Setup","text":"<p>Add the following dependencies in the <code>build.gradle</code> file of your application:</p> <pre><code>dependencies {\n    implementation(\"com.kisio.navitia.sdk.ui:bookmark:1.12.0\")\n}\n</code></pre> <p>The activity launching Bookmark must handle the following configuration changes: <code>orientation|screenSize</code> declared into your <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;activity\n    android:configChanges=\"orientation|screenSize\"/&gt;\n</code></pre>"},{"location":"bookmark/android/#implementation","title":"Implementation","text":"<p>Warning</p> <p>Make sure to read the modules configuration section before proceeding</p> <p>This module is set up by calling <code>BookmarkUI.getInstance()</code>. The singleton behaves like a builder in which each method allows you to configure the module. Then, you need to call the <code>init()</code> method at the end. You should call this method in an <code>Application</code> subclass. This method takes the following parameters:</p> Name Required Description Type Default <code>context</code> Context in which the module is launched <code>Context</code> <code>token</code> Get your token <code>String</code> <code>configuration</code> Module configuration object <code>AroundMeConfiguration</code> <code>null</code> <code>configurationJsonFile</code> Module configuration JSON file name <code>String</code> <code>null</code> Example Configuration with fileManual configuration <pre><code>BookmarkUI.getInstance().let { instance -&gt;\n    instance.init(\n        context = this,\n        token = \"your_token\",\n        configurationJsonFile = \"config.json\"\n    )\n}\n</code></pre> <pre><code>BookmarkUI.getInstance().let { instance -&gt;\n    instance.init(\n        context = this,\n        token = \"your_token\",\n        configuration = BookmarkConfiguration(\n            coverage = \"your_coverage\",\n            timezone = \"Europe/Paris\",\n            env = BookmarkEnvironment.PROD,\n            colors = BookmarkColors(\n                primary = \"#88819f\"\n            )\n        )\n    )\n}\n</code></pre>"},{"location":"bookmark/android/#navigation-listener","title":"Navigation listener","text":"<p>Since the module launches its own fragments, you may want your application to be aware of navigation events. For that, you have to set a navigation listener by calling this method before <code>init()</code>.</p> <pre><code>BookmarkUI.getInstance()\n    .setNavigationListener(bookmarkNavigationListenerImpl) // (1)\n</code></pre> <ol> <li><code>bookmarkNavigationListenerImpl</code> should be the class instance implementing <code>BookmarkNavigationListener</code> interface.</li> </ol> <p>This interface gives you the method <code>onBack()</code> for any back event between two fragments and the method <code>onNavigate</code> for the reverse. Each method has a <code>BookmarkNavigationListener.Event</code> parameter you can rely on.</p> <pre><code>// Navigation events\nADD_ADDRESS_BACK_TO_FAVORITES\nEXTERNAL_TO_ADD_ADDRESSES\nEXTERNAL_TO_FAVORITES\nFAVORITES_BACK_TO_EXTERNAL\nFAVORITES_TO_JOURNEY\nFAVORITES_TO_ADD_ADDRESS\nFAVORITES_TO_ROADMAP\n</code></pre>"},{"location":"bookmark/android/#events-tracking","title":"Events tracking","text":"<p>In order to receive the list of generated events within Bookmark module, you have to attach the tracker to the module instance. You can call this method before or after <code>init()</code>.</p> <pre><code>BookmarkUI.getInstance()\n    .attachTracker(bookmarkTrackerImpl) // (1)\n</code></pre> <ol> <li><code>bookmarkTrackerImpl</code> should be the class instance implementing <code>BookmarkTracker</code> interface.</li> </ol>"},{"location":"bookmark/android/#launching","title":"Launching","text":"<p>Bookmark has a single entry point <code>FavoriteFragment</code>. Assuming you have an <code>Activity</code> with a fragment container, refer to the following example to launch the entry screen fragment:</p> <pre><code>supportFragmentManager.beginTransaction().run {\n    replace(R.id.container_id, FavoriteFragment.newInstance(), \"TAG\")\n    addToBackStack(\"TAG\")\n    commit()\n}\n</code></pre>"},{"location":"bookmark/android/#manipulating-data","title":"Manipulating data","text":"<p>The module provides the ability to directly manipulate data for use in custom screens.</p>"},{"location":"bookmark/android/#methods","title":"Methods","text":"<p>The various CRUD methods are accessed through <code>BookmarkUI.getInstance().data</code>.</p> Create <p> Create a new favorite address</p> <pre><code>fun saveAddress(address: SharedData.AddressBookmark)\n</code></pre> Param Type Description <code>address</code> <code>SharedData.AddressBookmark</code> Favorite address to create <p> Create a new favorite journey</p> <pre><code>fun saveJourney(journey: SharedData.JourneyBookmark)\n</code></pre> Param Type Description <code>journey</code> <code>SharedData.JourneyBookmark</code> Favorite journey to create <p> Create a new favorite POI</p> <pre><code>fun savePoi(poi: SharedData.PoiBookmark)\n</code></pre> Param Type Description <code>poi</code> <code>SharedData.PoiBookmark</code> Favorite POI to create <p> Create a new favorite station</p> <pre><code>fun saveStation(station: SharedData.StationBookmark)\n</code></pre> Param Type Description <code>station</code> <code>SharedData.StationBookmark</code> Favorite station to create Read <p> Fetch a favorite address data. Returns <code>SharedData.AddressBookmark</code> or <code>null</code> if not found.</p> <pre><code>fun fetchAddress(id: String): SharedData.AddressBookmark?\n</code></pre> Param Type Description <code>id</code> <code>String</code> Id of the favorite address to fetch <p> Fetch all favorite addresses. Returns a list of <code>SharedData.AddressBookmark</code> or an empty list if there is no data.</p> <pre><code>fun fetchAddresses(): List&lt;SharedData.AddressBookmark&gt;\n</code></pre> <p> Fetch a favorite journey data. Returns <code>SharedData.JourneyBookmark</code> or <code>null</code> if not found.</p> <pre><code>fun fetchJourney(travelId: String): SharedData.JourneyBookmark?\n</code></pre> Param Type Description <code>travelId</code> <code>String</code> Travel id of the favorite journey to fetch <p> Fetch all favorite journeys. Returns a list of <code>SharedData.JourneyBookmark</code> or an empty list if there is no data.</p> <pre><code>fun fetchJourneys(): List&lt;SharedData.JourneyBookmark&gt;\n</code></pre> <p> Fetch a favorite POI data. Returns <code>SharedData.PoiBookmark</code> or <code>null</code> if not found.</p> <pre><code>fun fetchPoi(id: String): SharedData.PoiBookmark?\n</code></pre> Param Type Description <code>id</code> <code>String</code> Id of the favorite POI to fetch <p> Fetch all favorite POIs. Returns a list of <code>SharedData.PoiBookmark</code> or an empty list if there is no data.</p> <pre><code>fun fetchPois(): List&lt;SharedData.PoiBookmark&gt;\n</code></pre> <p> Fetch a favorite station data. Returns <code>SharedData.StationBookmark</code> or <code>null</code> if not found.</p> <pre><code>fun fetchStation(stopAreaId: String, lineId: String): SharedData.StationBookmark?\n</code></pre> Param Type Description <code>stopAreaId</code> <code>String</code> Navitia stop area id of the favorite station to fetch <code>lineId</code> <code>String</code> Navitia line id of the favorite station to fetch <p> Fetch all favorite stations. Returns a list of <code>SharedData.StationBookmark</code> or an empty list if there is no data.</p> <pre><code>fun fetchStations(): List&lt;SharedData.StationBookmark&gt;\n</code></pre> Update <p> Update an existing favorite address</p> <pre><code>fun updateAddress(address: SharedData.AddressBookmark)\n</code></pre> Param Type Description <code>address</code> <code>SharedData.AddressBookmark</code> Favorite address to update <p> Update an existing favorite journey</p> <pre><code>fun updateJourney(journey: SharedData.JourneyBookmark)\n</code></pre> Param Type Description <code>journey</code> <code>SharedData.JourneyBookmark</code> Favorite journey to update <p> Update an existing favorite POI</p> <pre><code>fun updatePoi(poi: SharedData.PoiBookmark)\n</code></pre> Param Type Description <code>poi</code> <code>SharedData.PoiBookmark</code> Favorite poi to update <p> Update an existing favorite station</p> <pre><code>fun updateStation(station: SharedData.StationBookmark)\n</code></pre> Param Type Description <code>station</code> <code>SharedData.StationBookmark</code> Favorite station to update Delete <p> Delete an existing favorite address</p> <pre><code>fun deleteAddress(id: String)\n</code></pre> Param Type Description <code>id</code> <code>String</code> Id of the favorite address to delete <p> Delete an existing favorite journey</p> <pre><code>fun deleteJourney(travelId: String)\n</code></pre> Param Type Description <code>travelId</code> <code>String</code> Travel id of the favorite journey to delete <p> Delete an existing favorite POI</p> <pre><code>fun deletePoi(id: String)\n</code></pre> Param Type Description <code>id</code> <code>String</code> Id of the favorite POI to delete <p> Delete an existing favorite station</p> <pre><code>fun deleteStation(stopAreaId: String, lineId: String)\n</code></pre> Param Type Description <code>stopAreaId</code> <code>String</code> Navitia stop area id of the favorite station to delete <code>lineId</code> <code>String</code> Navitia line id of the favorite station to delete"},{"location":"bookmark/android/#data","title":"Data","text":""},{"location":"bookmark/android/#addressbookmark","title":"<code>AddressBookmark</code>","text":"Name Required Description Type <code>databaseId</code> Unique database id <code>Long?</code> <code>id</code> Unique address id <code>String</code> <code>name</code> Address name <code>String</code> <code>houseNumber</code> House number <code>Int</code> <code>roadName</code> Address label <code>String</code> <code>postalCode</code> Address postal code <code>String</code> <code>city</code> Address city <code>String</code> <code>type</code> Address type <code>home</code>, <code>work</code> or <code>custom</code> <code>String</code> <code>additionalInformation</code> Free field to save extra data <code>String</code>"},{"location":"bookmark/android/#journeybookmark","title":"<code>JourneyBookmark</code>","text":"Name Required Description Type <code>databaseId</code> Unique database id <code>Long?</code> <code>travelId</code> Unique journey id <code>String</code> <code>from</code> Departure name <code>String</code> <code>fromId</code> Departure Navitia id <code>String</code> <code>to</code> Arrival name <code>String</code> <code>toId</code> Arrival Navitia id <code>String</code> <code>sections</code> Array of included journey sections <code>List&lt;SharedData.SectionBookmark&gt;</code> <code>isBikeSpecific</code> Array of connection modes. For example: <code>[\"bike\", \"walking\"]</code> <code>Boolean</code> <code>additionalInformation</code> Free field to save extra data <code>String</code>"},{"location":"bookmark/android/#linebookmark","title":"<code>LineBookmark</code>","text":"Name Required Description Type <code>id</code> Navitia line id <code>String</code> <code>code</code> Navitia line code <code>String</code> <code>textColor</code> Navitia line text color in hex format <code>String</code> <code>color</code> Navitia line color in hex format <code>String</code> <code>commercialModeId</code> Navitia public transport commercial mode. Example: <code>commercial_mode:Bus</code> <code>String</code> <code>commercialModeName</code> Navitia public transport commercial name. Example: <code>Bus</code> <code>String</code> <code>physicalMode</code> Navitia public transport physical mode id. Example: <code>physical_mode:Bus</code> <code>String</code> <code>networkId</code> Navitia public transport network id. Example: <code>network:xxx:Operator_21</code> <code>String</code> <code>networkName</code> Navitia public transport network name. Example: <code>Operator 21</code> <code>String</code>"},{"location":"bookmark/android/#sectionbookmark","title":"<code>SectionBookmark</code>","text":"Name Required Description Type <code>type</code> Section type. Example: <code>public_transport</code> <code>String</code> <code>mode</code> Section mode. Example: <code>walking</code> <code>String</code> <code>lineId</code> Navitia line id <code>String</code> <code>lineCode</code> Navitia line code <code>String</code> <code>lineTextColor</code> Navitia line text color in HEX format <code>String</code> <code>lineColor</code> Navitia line color in HEX format <code>String</code> <code>commercialMode</code> Navitia public transport commercial mode. Example: <code>commercial_mode:Bus</code> <code>String</code> <code>physicalMode</code> Navitia public transport physical mode. Example: <code>physical_mode:Bus</code> <code>String</code> <code>duration</code> Section duration in seconds <code>Int</code>"},{"location":"bookmark/android/#poibookmark","title":"<code>PoiBookmark</code>","text":"Name Required Description Type <code>databaseId</code> Unique database id <code>Long?</code> <code>id</code> Unique POI id <code>String</code> <code>coords</code> POI coordinates <code>LatLng</code> <code>name</code> POI name <code>String</code> <code>address</code> POI address <code>AddressBookmark</code> <code>type</code> POI type <code>String</code> <code>typeId</code> Navitia POI type id. Example: <code>poi_type:amenity:hospital</code> <code>String</code> <code>providerId</code> Navitia POI provider id <code>String</code> <code>additionalInformation</code> Free field to save extra data <code>String</code>"},{"location":"bookmark/android/#stationbookmark","title":"<code>StationBookmark</code>","text":"Name Required Description Type <code>databaseId</code> Unique database id <code>Long?</code> <code>stopAreaId</code> Navitia stop area id <code>String</code> <code>coords</code> Station coordinates <code>LatLng</code> <code>name</code> Station name <code>String</code> <code>lines</code> Station lines <code>List&lt;SharedData.LineBookmark&gt;</code> <code>additionalInformation</code> Free field to save extra data <code>String</code>"},{"location":"bookmark/android/#communicating-with-other-modules-or-the-app","title":"Communicating with other modules or the app","text":"<p>Bookmark module can exchange data with or navigate to either other modules or the host application. To do this, the host application must initialize <code>Router</code>. This singleton will ensure communication between the different modules or the app. Communication will not occur unless those are registered beforehand:</p> <pre><code>Router.getInstance()\n    ... // Register modules and/or app\n    .init()\n</code></pre>"},{"location":"bookmark/android/#application","title":"Application","text":"<p>Some route or callbacks are delegated to the application. If you have to receive some module data, the <code>Router</code> module must register a receiver with the right parameter:</p> <pre><code>Router.getInstance()\n    .register(appData = appRouterDataImpl) // (1)\n</code></pre> <ol> <li><code>appRouterDataImpl</code> should be the class instance implementing <code>AppRouter.Data</code> interface. We recommend using an <code>Application</code> subclass.</li> </ol> <p>If you have to handle navigation between modules, the <code>Router</code> module must also register a receiver:</p> <pre><code>Router.getInstance()\n    .register(appUi = appRouterUiImpl) // (1)\n</code></pre> <ol> <li><code>appRouterUiImpl</code> should be the class instance implementing <code>AppRouter.UI</code> interface. We recommend using a <code>Application</code> subclass.</li> </ol>"},{"location":"bookmark/android/#data-interface-methods","title":"Data interface methods","text":"<pre><code>override fun onUpdateFavoriteStations(id: String) {\n    // handle the favorite station update booking\n}\n</code></pre> Param Type Description <code>id</code> <code>String</code> Updated favorite station id"},{"location":"bookmark/android/#modules","title":"Modules","text":""},{"location":"bookmark/android/#journey","title":"Journey","text":"<p> Enabling</p> <p>This module communicates with Journey module in order to get directions for a chosen itinerary. You should enable the <code>go_from_go_to</code> parameter in the features configuration.</p> <p> Method</p> <p>The following method from the <code>AppRouter.UI</code> interface should be implemented by the host application to enable navigation to the Journey module or any other custom screens. Note that the parameters of these methods can be ignored as needed.</p> <pre><code>override fun openJourneysViaHost(\n    origin: SharedData.JourneyPoint?,\n    destination: SharedData.JourneyPoint?,\n    showDirectlyAutoCompletion: Boolean,\n    showDirectlyJourneysSearch: Boolean\n) {\n    // launch the journey module screen or your custom screen\n}\n</code></pre> Param Type Description <code>origin</code> <code>SharedData.JourneyPoint?</code> Desired starting point of the journey. Optional <code>destination</code> <code>SharedData.JourneyPoint?</code> Desired endpoint of the journey. Optional <code>showDirectlyAutoCompletion</code> <code>Boolean</code> Directly displays the search for the starting point and/or endpoint. If true, <code>showDirectlyJourneysSearch</code> can only be false <code>showDirectlyJourneysSearch</code> <code>Boolean</code> Directly displays the journey search. If true, <code>showDirectlyAutoCompletion</code> can only be false"},{"location":"bookmark/android/#theming","title":"Theming","text":"<p>The module uses graphical components from Material Design 3. To ensure these components function correctly and get displayed properly on the screen, it is crucial to apply the appropriate parent theme:</p> <pre><code>&lt;style name=\"Theme.App\" parent=\"Theme.Material3.*\"&gt; &lt;!-- (1) --&gt;\n    ...\n&lt;/style&gt;\n</code></pre> <ol> <li>Replace by the specific theme. For example: <code>Theme.Material3.Light.NoActionBar</code></li> </ol>"},{"location":"bookmark/android/changelogs/","title":"Bookmark Android Changelogs","text":"<ul> <li>v1.12.0 (11 Sep 2025)</li> <li>v1.11.3 (11 Jun 2025)</li> <li>v1.11.2 (05 Jun 2025)</li> <li>v1.11.1 (23 Apr 2025)</li> <li>v1.11.0 (24 Mar 2025)</li> <li>v1.10.0 (13 Feb 2025)</li> <li>v1.9.4 (03 Feb 2025)</li> <li>v1.9.3 (08 Jan 2025)</li> <li>v1.9.2 (24 Dec 2024)</li> <li>v1.9.1 (02 Dec 2024)</li> <li>v1.9.0 (31 Oct 2024)</li> <li>v1.8.0 (15 Oct 2024)</li> <li>v1.7.0 (09 Sep 2024)</li> <li>v1.6.1 (08 Aug 2024)</li> <li>v1.6.0 (26 Jul 2024)</li> <li>v1.5.1 (24 Jun 2024)</li> <li>v1.5.0 (21 Mai 2024)</li> <li>v1.4.3 (05 Mar 2024)</li> <li>v1.4.2 (28 Feb 2024)</li> <li>v1.4.1 (16 Feb 2024)</li> <li>v1.4.0 (09 Feb 2024)</li> <li>v1.3.1 (11 Jan 2024)</li> <li>v1.3.0 (23 Aug 2023)</li> <li>v1.2.2 (03 Apr 2023)</li> <li>v1.2.1 (17 Mar 2023)</li> <li>v1.2.0 (15 Feb 2023)</li> <li>v1.1.2 (07 Feb 2023)</li> <li>v1.1.1 (27 Jan 2023)</li> <li>v1.1.0 (10 Jan 2023)</li> </ul>"},{"location":"bookmark/android/releases/1.1.0/","title":"Bookmark Android 1.1.0 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"bookmark/android/releases/1.1.0/#features","title":"Features","text":"<ul> <li>Show bookmarks</li> </ul>"},{"location":"bookmark/android/releases/1.1.0/#tasks","title":"Tasks","text":"<ul> <li>Replace <code>Gson</code> by <code>kotlinx.serialization</code></li> <li>Prefix all layouts by <code>navitia_bookmark_</code></li> <li>Token is passed via <code>init()</code> instead of configuration file or object</li> </ul>"},{"location":"bookmark/android/releases/1.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix back button action</li> </ul>"},{"location":"bookmark/android/releases/1.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle-wrapper</code> &gt; <code>7.4</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.3.1</code></li> <li><code>androidx.navigation:navigation-fragment-ktx</code> &gt; <code>2.5.3</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.2</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.4.1</code></li> </ul>"},{"location":"bookmark/android/releases/1.1.1/","title":"Bookmark Android 1.1.1 Changelog","text":"\ud83d\uddd3 27 Jan 2023"},{"location":"bookmark/android/releases/1.1.1/#fixes","title":"Fixes","text":"<ul> <li>Make POI categories optional</li> </ul>"},{"location":"bookmark/android/releases/1.1.2/","title":"Bookmark Android 1.1.2 Changelog","text":"\ud83d\uddd3 07 Feb 2023"},{"location":"bookmark/android/releases/1.1.2/#fixes","title":"Fixes","text":"<ul> <li>Fix showing of back button when bookmark is opened with another module</li> </ul>"},{"location":"bookmark/android/releases/1.10.0/","title":"Bookmark Android 1.10.0 Changelog","text":"\ud83d\uddd3 13 Feb 2025"},{"location":"bookmark/android/releases/1.10.0/#features","title":"Features","text":"<ul> <li>Display of reduce mobility parking places for a parking POI is now configurable</li> </ul>"},{"location":"bookmark/android/releases/1.10.0/#tasks","title":"Tasks","text":"<ul> <li>Rename <code>see_all_schedules</code> to <code>schedule_mode</code> in the configuration</li> <li>Replace the icon for self-service bike parking places</li> </ul>"},{"location":"bookmark/android/releases/1.10.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.10.2</code></li> <li><code>kotlinVersion</code> &gt; <code>2.1.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.8.0</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>buildToolsVersion</code> &gt; <code>35.0.0</code></li> <li><code>daggerVersion</code> &gt; <code>2.55</code></li> <li><code>fragmentVersion</code> &gt; <code>1.8.5</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.15.0</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.4.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.20.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.4</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.20.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.6.3</code></li> </ul>"},{"location":"bookmark/android/releases/1.11.0/","title":"Bookmark Android 1.11.0 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"bookmark/android/releases/1.11.0/#features","title":"Features","text":"<ul> <li>Section titles for stations, self-service bike stations, and parking in the transport tab are configurable</li> </ul>"},{"location":"bookmark/android/releases/1.11.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>fragmentVersion</code> &gt; <code>1.8.6</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.1</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.7.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.21.0</code></li> </ul>"},{"location":"bookmark/android/releases/1.11.1/","title":"Bookmark Android 1.11.1 Changelog","text":"\ud83d\uddd3 23 Apr 2025"},{"location":"bookmark/android/releases/1.11.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.11.1</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.9.1</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.7.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.22.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.5</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.21.0</code></li> <li><code>androidx.room:room-compiler</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-ktx</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-runtime</code> &gt; <code>2.7.0</code></li> <li><code>androidx.core:core-ktx</code>&gt; <code>1.16.0</code></li> </ul>"},{"location":"bookmark/android/releases/1.11.2/","title":"Bookmark Android 1.11.2 Changelog","text":"\ud83d\uddd3 05 Jun 2025"},{"location":"bookmark/android/releases/1.11.2/#fixes","title":"Fixes","text":"<ul> <li>Remove enum parcelable deprecation method</li> <li>Fix nullable binding instance</li> </ul>"},{"location":"bookmark/android/releases/1.11.3/","title":"Bookmark Android 1.11.3 Changelog","text":"\ud83d\uddd3 11 Jun 2025"},{"location":"bookmark/android/releases/1.11.3/#fixes","title":"Fixes","text":"<ul> <li>Fix current selected tab not saved</li> <li>Fix enum serialization</li> </ul>"},{"location":"bookmark/android/releases/1.12.0/","title":"Bookmark Android 1.12.0 Changelog","text":"\ud83d\uddd3 11 Sep 2025"},{"location":"bookmark/android/releases/1.12.0/#tasks","title":"Tasks","text":"<ul> <li>Removed condition on minimal walking duration display</li> </ul>"},{"location":"bookmark/android/releases/1.12.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.data:expert</code>&gt; <code>3.7.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code>&gt; <code>2.23.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code>&gt; <code>2.6.6</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code>&gt; <code>1.22.0</code></li> </ul>"},{"location":"bookmark/android/releases/1.2.0/","title":"Bookmark Android 1.2.0 Changelog","text":"\ud83d\uddd3 15 Feb 2023"},{"location":"bookmark/android/releases/1.2.0/#features","title":"Features","text":"<ul> <li>Categorize bookmarks by transports, journeys and addresses</li> </ul>"},{"location":"bookmark/android/releases/1.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.6.1</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.8.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.6.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>1.7.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.7.0</code></li> </ul>"},{"location":"bookmark/android/releases/1.2.1/","title":"Bookmark Android 1.2.1 Changelog","text":"\ud83d\uddd3 17 Mar 2023"},{"location":"bookmark/android/releases/1.2.1/#tasks","title":"Tasks","text":"<ul> <li>Change configuration color variable names</li> </ul>"},{"location":"bookmark/android/releases/1.2.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.recyclerview:recyclerview</code> &gt;<code>1.3.0</code></li> </ul>"},{"location":"bookmark/android/releases/1.2.2/","title":"Bookmark Android 1.2.2 Changelog","text":"\ud83d\uddd3 03 Apr 2023"},{"location":"bookmark/android/releases/1.2.2/#fixes","title":"Fixes","text":"<ul> <li>Fix crash when application period of a disruption is invalid</li> <li>Don't show valid button when a favorite address name is typed</li> </ul>"},{"location":"bookmark/android/releases/1.3.0/","title":"Bookmark Android 1.3.0 Changelog","text":"\ud83d\uddd3 23 Aug 2023"},{"location":"bookmark/android/releases/1.3.0/#feature","title":"Feature","text":"<ul> <li>Tabs are now configurable</li> </ul>"},{"location":"bookmark/android/releases/1.3.0/#fix","title":"Fix","text":"<ul> <li>Fix deletion of a line from a favorite station</li> <li>Fetch location if the user use Go to there function</li> </ul>"},{"location":"bookmark/android/releases/1.3.0/#tasks","title":"Tasks","text":"<ul> <li>Add custom analytics events</li> <li>Update <code>BookmarkEnvironment</code> which can have <code>SBX</code>, <code>CUS</code> and <code>PROD</code></li> <li>Delegate is no more accessible</li> <li>Add navigation listener and remove navigation callbacks from <code>BookmarkUI.init()</code></li> <li>Rename <code>BookmarkConfiguration.featuresConfiguration</code> by <code>BookmarkConfiguration.features</code></li> </ul>"},{"location":"bookmark/android/releases/1.3.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.8.21</code></li> <li><code>gradle-wrapper</code> &gt; <code>8.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.0.2</code></li> <li><code>minSdk</code> &gt; <code>23</code></li> <li><code>daggerVersion</code> &gt; <code>2.44</code></li> <li><code>fragmentVersion</code> &gt; <code>1.6.1</code></li> <li><code>kotlinCoroutinesVersion</code> &gt; <code>1.6.4</code></li> <li><code>navigationVersion</code> &gt; <code>2.7.0</code></li> <li><code>roomVersion</code> &gt; <code>2.5.2</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.3.1</code></li> </ul>"},{"location":"bookmark/android/releases/1.3.1/","title":"Bookmark Android 1.3.1 Changelog","text":"\ud83d\uddd3 11 Jan 2024"},{"location":"bookmark/android/releases/1.3.1/#tasks","title":"Tasks","text":"<ul> <li>Add proguard rules for Crashlytics</li> <li>Add proguard rules for <code>java.io.Serializable</code></li> <li>Add frequency for next departures request in configuration</li> </ul>"},{"location":"bookmark/android/releases/1.3.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.1.1</code></li> <li><code>compileSdk</code> &gt; <code>34</code></li> <li><code>buildToolsVersion</code> &gt; <code>34.0.0</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.4.1</code></li> </ul>"},{"location":"bookmark/android/releases/1.4.0/","title":"Bookmark Android 1.4.0 Changelog","text":"\ud83d\uddd3 09 Feb 2024"},{"location":"bookmark/android/releases/1.4.0/#features","title":"Features","text":"<ul> <li>Can add custom font</li> <li>Add timezone support for date format</li> <li>Enhance accessibility</li> </ul>"},{"location":"bookmark/android/releases/1.4.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.9.22</code></li> <li><code>gradle-wrapper</code> &gt; <code>8.2</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.2.1</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.12.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.6.2</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.3.2</code></li> <li><code>androidx.room:room-compiler</code> &gt; <code>2.6.1</code>. Use <code>ksp</code> instead of <code>kapt</code></li> <li><code>androidx.room:room-ktx</code> &gt; <code>2.6.1</code></li> <li><code>androidx.room:room-runtime</code> &gt; <code>2.6.1</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.11.0</code></li> <li><code>com.google.dagger:dagger</code> &gt; <code>2.50</code></li> <li><code>com.google.dagger:dagger-android-support</code> &gt; <code>2.50</code></li> <li><code>com.google.dagger:dagger-compiler</code> &gt; <code>2.50</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.13.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.3.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.13.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.5.1</code></li> </ul>"},{"location":"bookmark/android/releases/1.4.1/","title":"Bookmark Android 1.4.1 Changelog","text":"\ud83d\uddd3 16 Feb 2024"},{"location":"bookmark/android/releases/1.4.1/#fix","title":"Fix","text":"<ul> <li>Fix database migration</li> </ul>"},{"location":"bookmark/android/releases/1.4.2/","title":"Bookmark Android 1.4.2 Changelog","text":"\ud83d\uddd3 28 Feb 2024"},{"location":"bookmark/android/releases/1.4.2/#fixes","title":"Fixes","text":"<ul> <li>Fix accessibility string</li> <li>Fix next departures accessibility for a station</li> </ul>"},{"location":"bookmark/android/releases/1.4.3/","title":"Bookmark Android 1.4.3 Changelog","text":"\ud83d\uddd3 05 Mar 2024"},{"location":"bookmark/android/releases/1.4.3/#fix","title":"Fix","text":"<ul> <li>Fix database migration</li> </ul>"},{"location":"bookmark/android/releases/1.5.0/","title":"Bookmark Android 1.5.0 Changelog","text":"\ud83d\uddd3 21 Mai 2024"},{"location":"bookmark/android/releases/1.5.0/#features","title":"Features","text":"<ul> <li>Add <code>fetchBssStations()</code></li> <li>Add direct entry to autocompletion fragment</li> <li>Add <code>tabId</code> to deduce correctly the tab position since tabs are configurable</li> <li>Rename <code>AutocompletionFragment</code> to <code>FavoriteAutocompletionFragment</code></li> </ul>"},{"location":"bookmark/android/releases/1.5.0/#task","title":"Task","text":"<ul> <li>Enlarge horizontally main content</li> <li>Add minutes in accessibility to walking section in journey</li> <li>Update next departure design</li> </ul>"},{"location":"bookmark/android/releases/1.5.0/#fixes","title":"Fixes","text":"<ul> <li>Fix next departures accessibility</li> <li>Fix duplication of next departures and availability calls</li> <li>Fix adress name when it is blank</li> </ul>"},{"location":"bookmark/android/releases/1.5.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.14.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.4.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.14.0</code></li> </ul>"},{"location":"bookmark/android/releases/1.5.1/","title":"Bookmark Android 1.5.1 Changelog","text":"\ud83d\uddd3 24 Jun 2024"},{"location":"bookmark/android/releases/1.5.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.5.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.15.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.4.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.15.0</code></li> </ul>"},{"location":"bookmark/android/releases/1.6.0/","title":"Bookmark Android 1.6.0 Changelog","text":"\ud83d\uddd3 26 Jul 2024"},{"location":"bookmark/android/releases/1.6.0/#features","title":"Features","text":"<ul> <li>Exposed functions for interacting with favorite data</li> <li>Add an optional <code>additional_information</code> string in any address, POI, journey and station saved object</li> </ul>"},{"location":"bookmark/android/releases/1.6.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.16.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.5.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.16.0</code></li> </ul>"},{"location":"bookmark/android/releases/1.6.1/","title":"Bookmark Android 1.6.1 Changelog","text":"\ud83d\uddd3 08 Aug 2024"},{"location":"bookmark/android/releases/1.6.1/#fixes","title":"Fixes","text":"<ul> <li>Use whole object as parameters of functions for interacting with favorite data</li> <li>Add update favorite data methods</li> </ul>"},{"location":"bookmark/android/releases/1.6.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.16.1</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.5.1</code></li> </ul>"},{"location":"bookmark/android/releases/1.7.0/","title":"Bookmark Android 1.7.0 Changelog","text":"\ud83d\uddd3 09 Sep 2024"},{"location":"bookmark/android/releases/1.7.0/#features","title":"Features","text":"<ul> <li>Add See all schedules in the contextual menu with the <code>scheduleMode</code> feature enabled when clicking on a favorite station</li> <li>Add a <code>+1</code> label if a next departure is the next day</li> <li>Add an individual empty state if a destination has no next departures</li> <li>Use new favorite icons </li> </ul>"},{"location":"bookmark/android/releases/1.7.0/#fixes","title":"Fixes","text":"<ul> <li>Show an empty state if there is no results in the auto completion search</li> <li>Fix the inability to rename a favorite address</li> </ul>"},{"location":"bookmark/android/releases/1.7.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.7.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.13.1</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.2</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.12.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.17.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>2.17.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.3</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.3</code></li> <li><code>androidx.test:core</code> &gt; <code>1.6.1</code></li> <li><code>androidx.test:runner</code> &gt; <code>1.6.1</code></li> </ul>"},{"location":"bookmark/android/releases/1.8.0/","title":"Bookmark Android 1.8.0 Changelog","text":"\ud83d\uddd3 15 Oct 2024"},{"location":"bookmark/android/releases/1.8.0/#features","title":"Features","text":"<ul> <li>Add see all schedules on favorite stations</li> </ul>"},{"location":"bookmark/android/releases/1.8.0/#tasks","title":"Tasks","text":"<ul> <li>Update poi configuration</li> </ul>"},{"location":"bookmark/android/releases/1.8.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.4</code></li> <li><code>androidx.test:runner</code> &gt; <code>1.6.2</code></li> </ul>"},{"location":"bookmark/android/releases/1.9.0/","title":"Bookmark Android 1.9.0 Changelog","text":"\ud83d\uddd3 31 Oct 2024"},{"location":"bookmark/android/releases/1.9.0/#tasks","title":"Tasks","text":"<ul> <li>Add park availability configuration</li> </ul>"},{"location":"bookmark/android/releases/1.9.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.18.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>2.18.0</code></li> </ul>"},{"location":"bookmark/android/releases/1.9.1/","title":"Bookmark Android 1.9.1 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"bookmark/android/releases/1.9.1/#tasks","title":"Tasks","text":"<ul> <li>Rename <code>see_all_schedules</code>  to <code>schedule_mode</code> in configuration</li> <li>Use a new icon for parking and BSS parking places</li> </ul>"},{"location":"bookmark/android/releases/1.9.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.9.25</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.2</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.15.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.5</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.5.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.19.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.2</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.19.0</code></li> </ul>"},{"location":"bookmark/android/releases/1.9.2/","title":"Bookmark Android 1.9.2 Changelog","text":"\ud83d\uddd3 24 Dec 2024"},{"location":"bookmark/android/releases/1.9.2/#fixes","title":"Fixes","text":"<ul> <li>Add a fallback for database migrations</li> </ul>"},{"location":"bookmark/android/releases/1.9.3/","title":"Bookmark Android 1.9.3 Changelog","text":"\ud83d\uddd3 08 Jan 2025"},{"location":"bookmark/android/releases/1.9.3/#fixes","title":"Fixes","text":"<ul> <li>Fixed the deletion of a station</li> </ul>"},{"location":"bookmark/android/releases/1.9.4/","title":"Bookmark Android 1.9.4 Changelog","text":"\ud83d\uddd3 03 Feb 2025"},{"location":"bookmark/android/releases/1.9.4/#fixes","title":"Fixes","text":"<ul> <li>Fix database id issue when updating favorites</li> </ul>"},{"location":"bookmark/android/releases/1.9.4/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.3</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.3</code></li> </ul>"},{"location":"bookmark/ios/","title":"Bookmark iOS","text":""},{"location":"bookmark/ios/#setup","title":"Setup","text":"<p>In your project, add the following lines to your <code>Podfile</code>:</p> <pre><code>source 'https://github.com/CocoaPods/Specs.git' # Default Cocoapods URL\nsource 'https://github.com/hove-io/Podspecs.git' # Bookmark podspec URL\n\ntarget 'YOUR_PROJECT_SCHEME' do\n  pod 'BookmarkSDK', '2.3.0' # Bookmark Pod definition\nend\n\n# Required for XCFramework\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n    end\n  end\nend\n</code></pre> <p>Using your CLI, run <code>pod install</code> in your project directory.</p>"},{"location":"bookmark/ios/#implementation","title":"Implementation","text":"<p>Warning</p> <p>Make sure to read the modules configuration section before proceeding</p> <p>This module is set up by calling <code>Bookmark.shared.initialize()</code> method which takes the following parameters:</p> Name Required Description Type Example <code>coverage</code> Navitia coverage <code>String</code> <code>fr-idf</code> <code>token</code> Get your token <code>String</code> <code>timeZone</code> Time zone <code>String</code> <code>Europe/Paris</code> <code>env</code> Navitia environment <code>String</code> <code>PROD</code> <code>colors</code> Define the custom colors <code>BookmarkColorsConfiguration</code> - <code>unifiedColors</code> Define the custom colors <code>UnifiedColorsConfiguration</code> - <code>fonts</code> Use custom fonts <code>BookmarkFontsConfiguration</code> - <code>lineResources</code> List of transport lines resource IDs <code>[LineResource]</code> - <code>modeResources</code> List of transport modes resource IDs <code>[ModeResource]</code> - <code>poiCategories</code> List of available POIs <code>[PoiCategory]</code> - <code>features</code> Enable/disable some features <code>BookmarkFeaturesConfiguration</code> - <p>You can also call the <code>initialize()</code> method with the global JSON configuration file added to your application bundle:</p> Name Required Description Type Example <code>token</code> Get your token <code>String</code> <code>configurationJsonFile</code> Global configuration JSON file name <code>String</code> <code>configuration.json</code> Example Configuration with fileManual configuration <pre><code>do {\n    try Bookmark.shared.initialize(\n        token: \"your_token\", \n        configurationJsonFile: \"bookmark_configuration.json\"\n    )                                                               \n} catch {\n    Logger.error(\"%@\", String(\n        format: \"Bookmark SDK cannot be initialized! %@\", \n        error.localizedDescription\n    ))\n}                                   \n</code></pre> <pre><code>do {\n    let bookmarkColorsConfiguration = AroundMeColorsConfiguration(\n        primaryColor: \"#88819f\", \n        secondaryColor: \"#8faa96\"\n    )\n    let disruptionsColorsConfiguration = DisruptionsColorsConfiguration(\n        information: \"#22a824\",\n        nonBlocking: \"#faa12d\",\n        blocking: \"#e62c29\"\n    )\n    let unifiedColorsConfiguration = UnifiedColorsConfiguration(\n        disruptions: disruptionsColorsConfiguration\n    )\n\n    try Bookmark.shared.initialize(\n        coverage: \"fr-idf\",\n        token: \"your_token\",\n        timeZone: \"your_country\",\n        env: \"PROD\",\n        colors: bookmarkColorsConfiguration,\n        unifiedColors: unifiedColorsConfiguration\n    )                                                                  \n} catch {\n    Logger.error(\"%@\", String(\n        format: \"Bookmark SDK cannot be initialized! %@\", \n        error.localizedDescription\n    ))\n}                                   \n</code></pre>"},{"location":"bookmark/ios/#events-tracking","title":"Events tracking","text":"<p>In order to receive the list of generated events within Bookmark module, you have to assign the instance of the tracker to the Bookmark module instance as follows and implement the required methods:</p> <pre><code>Bookmark.shared.tracker = self\n</code></pre>"},{"location":"bookmark/ios/#launching","title":"Launching","text":"<p>This module has a single entry point. The parameter <code>showBack</code> handles the back button visibility on the first screen.</p> <pre><code>guard let bookmarkViewController = Bookmark.shared.rootViewController else {\n    return nil\n}\nbookmarkViewController.showBack = false // Hide back button embedded in the first screen\n</code></pre> <p>If you want to use the <code>rootViewController</code> as a <code>ChildViewController</code> of your <code>ViewController</code>, you should embed it in an <code>NavigationController</code>. </p> Using a <code>NavigationController</code>Using a <code>ChildViewController</code> <pre><code>navigationController?.pushViewController(\n    bookmarkViewController, \n    animated: false\n)\n</code></pre> <pre><code>yourViewController.addChild(UINavigationController(\n    rootViewController: bookmarkViewController\n))\n</code></pre>"},{"location":"bookmark/ios/#manipulating-data","title":"Manipulating data","text":"<p>The module provides the ability to directly manipulate data for use in custom screens.</p>"},{"location":"bookmark/ios/#methods","title":"Methods","text":"<p>The various CRD methods are accessed through <code>BookmarkUI.shared</code>.</p> Create <p> Create a new favorite address. Returns a boolean if the creation has succeeded or not.</p> <pre><code>func addFavoriteAddress(_ address: SharedData.FavoriteAddress) -&gt; Bool\n</code></pre> Param Type Description <code>address</code> <code>SharedData.FavoriteAddress</code> Favorite address to create <p> Create a new favorite journey. Returns a boolean if the creation has succeeded or not.</p> <pre><code>func addFavoriteJourney(_ journey: SharedData.FavoriteJourney) -&gt; Bool\n</code></pre> Param Type Description <code>journey</code> <code>SharedData.FavoriteJourney</code> Favorite journey to create <p> Create a new favorite POI. Returns a boolean if the creation has succeeded or not.</p> <pre><code>func addFavoritePoi(_ poi: SharedData.FavoritePoi) -&gt; Bool\n</code></pre> Param Type Description <code>poi</code> <code>SharedData.FavoritePoi</code> Favorite POI to create <p> Create a new favorite station. Returns a boolean if the creation has succeeded or not.</p> <pre><code>func addFavoriteStation(_ station: SharedData.FavoriteStation) -&gt; Bool\n</code></pre> Param Type Description <code>station</code> <code>SharedData.FavoriteStation</code> Favorite station to create Read <p> Fetch a favorite address data. Returns <code>SharedData.FavoriteAddress</code> or <code>nil</code> if not found.</p> <pre><code>func fetchFavoriteAddress(id: String) -&gt; SharedData.FavoriteAddress?\n</code></pre> Param Type Description <code>id</code> <code>String</code> Id of the favorite address to fetch <p> Fetch all favorite addresses. Returns a list of <code>SharedData.FavoriteAddress</code> or an empty list if there is no data.</p> <pre><code>func fetchFavoriteAddresses(max: Int) -&gt; [SharedData.FavoriteAddress]\n</code></pre> Param Type Description <code>max</code> <code>Int</code> Limit the result count. <code>0</code> for all data <p> Fetch all favorite journeys. Returns a list of <code>SharedData.FavoriteJourney</code> or an empty list if there is no data.</p> <pre><code>func fetchFavoriteJourneys(max: Int) -&gt; [SharedData.FavoriteJourney]\n</code></pre> Param Type Description <code>max</code> <code>Int</code> Limit the result count. <code>0</code> for all data <p> Get if a journey is added to favorites. Returns a boolean if the creation has succeeded or not.</p> <pre><code>func isJourneyInBookmark(journeyId: String) -&gt; Bool\n</code></pre> Param Type Description <code>journeyId</code> <code>String</code> Id of the favorite journey to check <p> Fetch a favorite POI data. Returns <code>SharedData.FavoritePoi</code> or <code>nil</code> if not found.</p> <pre><code>func fetchFavoritePoi(id: String) -&gt; SharedData.FavoritePoi?\n</code></pre> Param Type Description <code>id</code> <code>String</code> Id of the favorite POI to fetch <p> Fetch all favorite POIs. Returns a list of <code>SharedData.FavoritePoi</code> or an empty list if there is no data.</p> <pre><code>func fetchFavoritePois(max: Int) -&gt; [SharedData.FavoritePoi]\n</code></pre> Param Type Description <code>max</code> <code>Int</code> Limit the result count. <code>0</code> for all data <p> Fetch a favorite station data. Returns <code>SharedData.FavoriteStation</code> or <code>nil</code> if not found.</p> <pre><code>func fetchFavoriteStation(stopAreaId: String, lineId: String) -&gt; SharedData.FavoriteStation?\n</code></pre> Param Type Description <code>stopAreaId</code> <code>String</code> Navitia stop area id of the favorite station to fetch <code>lineId</code> <code>String</code> Navitia line id of the favorite station to fetch <p> Fetch all favorite stations. Returns a list of <code>SharedData.FavoriteStation</code> or an empty list if there is no data.</p> <pre><code>func fetchFavoriteStations(max: Int) -&gt; [SharedData.FavoriteStation]\n</code></pre> Param Type Description <code>max</code> <code>Int</code> Limit the result count. <code>0</code> for all data Update <p>v Update an existing favorite address. Returns a boolean if the update has succeeded or not.</p> <pre><code>func updateFavoriteAddress(updatedAddress: SharedData.FavoriteAddress) -&gt; Bool\n</code></pre> <p>v Update an existing favorite POI. Returns a boolean if the creation has succeeded or not.</p> <pre><code>func updateFavoritePoi(updatedPoi: SharedData.FavoritePoi) -&gt; Bool\n</code></pre> <p>v Update an existing favorite station. Returns a boolean if the update has succeeded or not.</p> <pre><code>func updateFavoriteStation(updatedStation: SharedData.FavoriteStation) -&gt; Bool\n</code></pre> <p>v Update an existing favorite journey. Returns a boolean if the update has succeeded or not.</p> <pre><code>func updateFavoriteJourney(updatedJourney: SharedData.FavoriteJourney) -&gt; Bool\n</code></pre> Delete <p>v Delete an existing favorite address. Returns a boolean if the creation has succeeded or not.</p> <pre><code>func deleteFavoriteAddress(id: String) -&gt; Bool\n</code></pre> Param Type Description <code>id</code> <code>String</code> Id of the favorite address to delete <p> Delete an existing favorite journey. Returns a boolean if the creation has succeeded or not.</p> <pre><code>func deleteFavoriteJourney(id: String) -&gt; Bool\n</code></pre> Param Type Description <code>id</code> <code>String</code> Id of the favorite journey to delete <p> Delete an existing favorite POI. Returns a boolean if the creation has succeeded or not.</p> <pre><code>func deleteFavoritePoi(id: String) -&gt; Bool\n</code></pre> Param Type Description <code>id</code> <code>String</code> Id of the favorite POI to delete <p> Delete an existing favorite station. Returns a boolean if the creation has succeeded or not.</p> <pre><code>func deleteFavoriteStation(id: String) -&gt; Bool\n</code></pre> Param Type Description <code>id</code> <code>String</code> Id of the favorite station to delete"},{"location":"bookmark/ios/#data","title":"Data","text":""},{"location":"bookmark/ios/#favoriteaddress","title":"<code>FavoriteAddress</code>","text":"Name Required Description Type <code>uuid</code> Unique database address id <code>String</code> <code>navitiaId</code> Unique navitia id <code>String</code> <code>name</code> Address name <code>String</code> <code>houseNumber</code> House number <code>Int</code> <code>address</code> Address label <code>String</code> <code>city</code> Address city <code>String</code> <code>zipCode</code> Address postal code <code>String</code> <code>addressTypeId</code> Address type <code>home</code>, <code>work</code> or <code>custom</code> <code>String</code> <code>additionalInformation</code> Free field to save extra data <code>String</code>"},{"location":"bookmark/ios/#favoritejourney","title":"<code>FavoriteJourney</code>","text":"Name Required Description Type <code>uuid</code> Unique database journey id <code>String</code> <code>journeyId</code> Unique journey id <code>String</code> <code>fromName</code> Departure name <code>String</code> <code>fromId</code> Departure Navitia id <code>String</code> <code>toName</code> Arrival name <code>String</code> <code>toId</code> Arrival Navitia id <code>String</code> <code>connectionModes</code> Array of connection modes. For example: <code>[\"bike\", \"walking\"]</code> <code>[String]</code> <code>sections</code> Array of included journey sections <code>[SharedData.FavoriteJourneySection]</code> <code>additionalInformation</code> Free field to save extra data <code>String</code>"},{"location":"bookmark/ios/#favoritejourneysection","title":"<code>FavoriteJourneySection</code>","text":"Name Required Description Type <code>type</code> Section type. Example: <code>public_transport</code> <code>String</code> <code>mode</code> Section mode. Example: <code>walking</code> <code>String</code> <code>lineId</code> Navitia line id <code>String</code> <code>lineCode</code> Navitia line code <code>String</code> <code>lineTextColor</code> Navitia line text color in HEX format <code>String</code> <code>lineColor</code> Navitia line color in HEX format <code>String</code> <code>commercialMode</code> Navitia public transport commercial mode. Example: <code>commercial_mode:Bus</code> <code>String</code> <code>physicalMode</code> Navitia public transport physical mode. Example: <code>physical_mode:Bus</code> <code>String</code> <code>duration</code> Section duration in seconds <code>Int</code>"},{"location":"bookmark/ios/#favoritepoi","title":"<code>FavoritePoi</code>","text":"Name Required Description Type <code>uuid</code> Unique database POI id <code>String</code> <code>navitiaId</code> Unique POI id <code>String</code> <code>coords</code> POI coordinates <code>CLLocationCoordinate2D</code> <code>name</code> POI name <code>String</code> <code>address</code> POI address <code>String</code> <code>type</code> POI type <code>String</code> <code>typeId</code> Navitia POI type ID. Example: <code>poi_type:amenity:hospital</code> <code>String</code> <code>network</code> Navitia POI network <code>String</code> <code>additionalInformation</code> Free field to save extra data <code>String</code>"},{"location":"bookmark/ios/#favoritestation","title":"<code>FavoriteStation</code>","text":"Name Required Description Type <code>uuid</code> Unique database station id <code>String</code> <code>stopAreaId</code> Navitia stop area id <code>String</code> <code>coords</code> Station coordinates <code>CLLocationCoordinate2D</code> <code>name</code> Station name <code>String</code> <code>lineId</code> Navitia line id <code>String</code> <code>lineCode</code> Line code <code>String</code> <code>lineColor</code> Line color in HEX format <code>String</code> <code>lineTextColor</code> Line text color in HEX format <code>String</code> <code>commercialMode</code> Navitia public transport commercial mode. Example: <code>commercial_mode:Bus</code> <code>String</code> <code>physicalMode</code> Navitia public transport physical mode. Example: <code>physical_mode:Bus</code> <code>String</code> <code>additionalInformation</code> Free field to save extra data <code>String</code>"},{"location":"bookmark/ios/#communicating-with-other-modules","title":"Communicating with other modules","text":"<p>Bookmark module can exchange data with or navigate to either other modules. To do this, the host application must initialize <code>Router</code>. This singleton will ensure communication between the different modules. Communication will not occur unless those are registered beforehand:</p> <pre><code>try Router.shared\n    .register(aroundMe: Bookmark.shared.bookmarkRouter)\n    ... // Register modules and/or app\n    .initialize()\n</code></pre>"},{"location":"bookmark/ios/#modules","title":"Modules","text":""},{"location":"bookmark/ios/#journey","title":"Journey","text":"<p> Enabling</p> <p>Bookmark module communicates with Journey module in order to get directions for a chosen favorites element. You should enable the <code>go_from_go_to</code> parameter in the features configuration.</p> <p>Journey module must also be registered in the <code>Router</code> to build the connection between these modules: <pre><code>Router.shared.register(journey: JourneySdk.shared.journeyRouter)\n</code></pre></p>"},{"location":"bookmark/ios/changelogs/","title":"Bookmark iOS Changelogs","text":"<ul> <li>v2.3.0 (11 Sep 2025)</li> <li>v2.2.1 (09 May 2025)</li> <li>v2.2.0 (22 Apr 2025)</li> <li>v2.1.0 (24 Mar 2025)</li> <li>v2.0.0 (24 Feb 2025)</li> <li>v1.9.3 (12 Feb 2025)</li> <li>v1.9.2 (04 Feb 2025)</li> <li>v1.9.1 (09 Dec 2024)</li> <li>v1.9.0 (02 Dec 2024)</li> <li>v1.8.0 (30 Oct 2024)</li> <li>v1.7.0 (24 Sep 2024)</li> <li>v1.6.0 (24 Jul 2024)</li> <li>v1.5.2 (24 Jun 2024)</li> <li>v1.5.1 (13 Jun 2024)</li> <li>v1.5.0 (21 Mai 2024)</li> <li>v1.4.0 (27 Mar 2024)</li> <li>v1.3.0 (25 Aug 2023)</li> <li>v1.2.1 (03 Apr 2023)</li> <li>v1.2.0 (17 Mar 2023)</li> <li>v1.1.0 (15 Feb 2023)</li> <li>v1.0.4 (10 Jan 2023)</li> </ul>"},{"location":"bookmark/ios/releases/1.0.4/","title":"Bookmark iOS 1.0.4 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"bookmark/ios/releases/1.0.4/#tasks","title":"Tasks","text":"<ul> <li>Add unified configuration support </li> </ul>"},{"location":"bookmark/ios/releases/1.0.4/#fixes","title":"Fixes","text":"<ul> <li>Fix animations</li> <li>Fix default states</li> <li>Fix back button in navigation bar</li> <li>Fix go from / go to</li> <li>Fix car park view</li> </ul>"},{"location":"bookmark/ios/releases/1.0.4/#dependencies","title":"Dependencies","text":"<ul> <li><code>RouterEngine</code> &gt; <code>0.5.0</code></li> <li><code>ToolboxEngine</code> &gt; <code>1.6.6</code></li> </ul>"},{"location":"bookmark/ios/releases/1.1.0/","title":"Bookmark iOS 1.1.0 Changelog","text":"\ud83d\uddd3 15 Feb 2023"},{"location":"bookmark/ios/releases/1.1.0/#features","title":"Features","text":"<ul> <li>Categorize bookmarks by transports, journeys and addresses</li> </ul>"},{"location":"bookmark/ios/releases/1.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> </ul>"},{"location":"bookmark/ios/releases/1.2.0/","title":"Bookmark iOS 1.2.0 Changelog","text":"\ud83d\uddd3 17 Mar 2023"},{"location":"bookmark/ios/releases/1.2.0/#tasks","title":"Tasks","text":"<ul> <li>Add <code>lineResources</code>, <code>modeResources</code>, <code>poiCategories</code> and <code>features</code> configuration objects to <code>initialize</code> method</li> <li>Add <code>max</code> parameter to <code>fetchJourneys()</code> method</li> </ul>"},{"location":"bookmark/ios/releases/1.2.0/#fixes","title":"Fixes","text":"<ul> <li>Fix address name wrong format</li> </ul>"},{"location":"bookmark/ios/releases/1.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> </ul>"},{"location":"bookmark/ios/releases/1.2.1/","title":"Bookmark iOS 1.2.1 Changelog","text":"\ud83d\uddd3 03 Apr 2023"},{"location":"bookmark/ios/releases/1.2.1/#fixes","title":"Fixes","text":"<ul> <li>Fix Realm configuration objects</li> <li>Fix Go from/go to not redirecting to Journey module</li> </ul>"},{"location":"bookmark/ios/releases/1.2.2/","title":"Bookmark iOS 1.2.2 Changelog","text":"\ud83d\uddd3 18 Jul 2023"},{"location":"bookmark/ios/releases/1.2.2/#tasks","title":"Tasks","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"bookmark/ios/releases/1.3.0/","title":"Bookmark iOS 1.3.0 Changelog","text":"\ud83d\uddd3 28 Aug 2023"},{"location":"bookmark/ios/releases/1.3.0/#features","title":"Features","text":"<ul> <li>Add <code>ShowBack</code> param</li> <li>Tabs in <code>My favorites</code> screen can now be configured</li> </ul>"},{"location":"bookmark/ios/releases/1.3.0/#tasks","title":"Tasks","text":"<ul> <li>Add custom analytic events</li> </ul>"},{"location":"bookmark/ios/releases/1.3.0/#fixes","title":"Fixes","text":"<ul> <li>Fix House number disappear when editing address</li> </ul>"},{"location":"bookmark/ios/releases/1.3.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>FlexLayout</code> -&gt; <code>1.3.31</code></li> <li><code>RealmSwift</code> -&gt; <code>10.42.0</code></li> <li><code>DesignEngine</code> -&gt; <code>2.7.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.0.0</code></li> </ul>"},{"location":"bookmark/ios/releases/1.3.0/#deployment-target","title":"Deployment target","text":"<ul> <li><code>iOS 14</code> minimun</li> </ul>"},{"location":"bookmark/ios/releases/1.4.0/","title":"Bookmark iOS 1.4.0 Changelog","text":"\ud83d\uddd3 27 Mar 2024"},{"location":"bookmark/ios/releases/1.4.0/#features","title":"Features","text":"<ul> <li>Add time zone parameter</li> <li>Add next departures frequency</li> </ul>"},{"location":"bookmark/ios/releases/1.4.0/#tasks","title":"Tasks","text":"<ul> <li>Expand horizontally the list container view</li> <li>Add accessibility</li> </ul>"},{"location":"bookmark/ios/releases/1.4.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code>: <code>2.12.0</code></li> <li><code>RouterEngine</code>: <code>1.1.3</code></li> <li><code>NavitiaSDK</code>: <code>2.7.1</code></li> </ul>"},{"location":"bookmark/ios/releases/1.4.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"bookmark/ios/releases/1.5.0/","title":"Bookmark iOS 1.5.0 Changelog","text":"\ud83d\uddd3 21 Mai 2024"},{"location":"bookmark/ios/releases/1.5.0/#tasks","title":"Tasks","text":"<ul> <li>Open autocompletion with target address type</li> <li>Update next departures design</li> </ul>"},{"location":"bookmark/ios/releases/1.5.0/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.2.0</code></li> <li>DesignEngine <code>v2.13.0</code></li> </ul>"},{"location":"bookmark/ios/releases/1.5.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"bookmark/ios/releases/1.5.1/","title":"Bookmark iOS 1.5.1 Changelog","text":"\ud83d\uddd3 13 Jun 2024"},{"location":"bookmark/ios/releases/1.5.1/#tasks","title":"Tasks","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"bookmark/ios/releases/1.5.1/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"bookmark/ios/releases/1.5.2/","title":"Bookmark iOS 1.5.2 Changelog","text":"\ud83d\uddd3 24 Jun 2024"},{"location":"bookmark/ios/releases/1.5.2/#tasks","title":"Tasks","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"bookmark/ios/releases/1.5.2/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"bookmark/ios/releases/1.6.0/","title":"Bookmark iOS 1.6.0 Changelog","text":"\ud83d\uddd3 24 July 2024"},{"location":"bookmark/ios/releases/1.6.0/#tasks","title":"Tasks","text":"<ul> <li>Expose data handler methods</li> <li>Add an optional <code>additional_information</code> string support in all favorite models</li> </ul>"},{"location":"bookmark/ios/releases/1.6.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"bookmark/ios/releases/1.7.0/","title":"Bookmark iOS 1.7.0 Changelog","text":"\ud83d\uddd3 24 Sep 2024"},{"location":"bookmark/ios/releases/1.7.0/#features","title":"Features","text":"<ul> <li>Display tomorrow indicator in next departures</li> </ul>"},{"location":"bookmark/ios/releases/1.7.0/#tasks","title":"Tasks","text":"<ul> <li>Use TerminusSchedule API to show next departures</li> <li>Reset <code>func fetchFavoriteStations(encodedData: Data)</code></li> </ul>"},{"location":"bookmark/ios/releases/1.7.0/#fixes","title":"Fixes","text":"<ul> <li>Fix margins for favorite transport next departures card</li> <li>Fix favorite place cell label font</li> <li>Fix editing and saving addresses</li> <li>Fix blinking animation</li> </ul>"},{"location":"bookmark/ios/releases/1.7.0/#compiler","title":"Compiler","text":"<ul> <li><code>Swift</code> -&gt; <code>6.0</code></li> </ul>"},{"location":"bookmark/ios/releases/1.8.0/","title":"Bookmark iOS 1.8.0 Changelog","text":"\ud83d\uddd3 30 Oct 2024"},{"location":"bookmark/ios/releases/1.8.0/#tasks","title":"Tasks","text":"<ul> <li>Add park availability configuration</li> <li>Enhance next departures timers</li> </ul>"},{"location":"bookmark/ios/releases/1.8.0/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.5.2</code></li> <li>DesignEngine <code>v2.17.0</code></li> </ul>"},{"location":"bookmark/ios/releases/1.8.0/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0</code></li> </ul>"},{"location":"bookmark/ios/releases/1.9.0/","title":"Bookmark iOS 1.9.0 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"bookmark/ios/releases/1.9.0/#tasks","title":"Tasks","text":"<ul> <li>Use a new icon for parking and BSS parking places</li> </ul>"},{"location":"bookmark/ios/releases/1.9.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>2.18.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.5.3</code></li> </ul>"},{"location":"bookmark/ios/releases/1.9.1/","title":"Bookmark iOS 1.9.1 Changelog","text":"\ud83d\uddd3 09 Dec 2024"},{"location":"bookmark/ios/releases/1.9.1/#fixes","title":"Fixes","text":"<ul> <li>Fix update method not updating additional information property</li> </ul>"},{"location":"bookmark/ios/releases/1.9.1/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.2</code></li> </ul>"},{"location":"bookmark/ios/releases/1.9.2/","title":"Bookmark iOS 1.9.2 Changelog","text":"\ud83d\uddd3 04 Feb 2025"},{"location":"bookmark/ios/releases/1.9.2/#tasks","title":"Tasks","text":"<ul> <li>Add uuid to all bookmark models</li> <li>Rename id to navitia id for concerned models</li> <li>Handle update using uuid</li> </ul>"},{"location":"bookmark/ios/releases/1.9.2/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"bookmark/ios/releases/1.9.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>2.18.1</code></li> <li><code>RouterEngine</code> -&gt; <code>1.5.4</code></li> </ul>"},{"location":"bookmark/ios/releases/1.9.3/","title":"Bookmark iOS 1.9.3 Changelog","text":"\ud83d\uddd3 12 Feb 2025"},{"location":"bookmark/ios/releases/1.9.3/#tasks","title":"Tasks","text":"<ul> <li>Upgrade RealmSwift and FlexLayout dependencies</li> </ul>"},{"location":"bookmark/ios/releases/1.9.3/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"bookmark/ios/releases/1.9.3/#dependencies","title":"Dependencies","text":"<ul> <li><code>RealmSwift</code> -&gt; <code>20.0.1</code></li> <li><code>FlexLayout</code> -&gt; <code>2.1.0</code></li> </ul>"},{"location":"bookmark/ios/releases/2.0.0/","title":"Bookmark iOS 2.0.0 Changelog","text":"\ud83d\uddd3 24 Feb 2025"},{"location":"bookmark/ios/releases/2.0.0/#features","title":"Features","text":"<ul> <li>Show/hide PRM availability based on configuration</li> </ul>"},{"location":"bookmark/ios/releases/2.0.0/#tasks","title":"Tasks","text":"<ul> <li>Extract module configuration from unified configuration</li> <li>Add unified colors configuration</li> <li>Update minimum iOS deployment to 16</li> </ul>"},{"location":"bookmark/ios/releases/2.0.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.8.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.6.0</code></li> <li><code>DesignEngine</code> -&gt; <code>3.0.0</code></li> </ul>"},{"location":"bookmark/ios/releases/2.1.0/","title":"Bookmark iOS 2.1.0 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"bookmark/ios/releases/2.1.0/#features","title":"Features","text":"<ul> <li>Add config params to override section's title in tabs</li> </ul>"},{"location":"bookmark/ios/releases/2.1.0/#tasks","title":"Tasks","text":"<ul> <li>Hide parking section that was displayed inside favorite journey freeze</li> <li>Display POI icon if available</li> </ul>"},{"location":"bookmark/ios/releases/2.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.9.0</code></li> <li><code>DesignEngine</code> -&gt; <code>3.1.0</code></li> </ul>"},{"location":"bookmark/ios/releases/2.2.0/","title":"Bookmark iOS 2.2.0 Changelog","text":"\ud83d\uddd3 22 Apr 2025"},{"location":"bookmark/ios/releases/2.2.0/#fixes","title":"Fixes","text":"<ul> <li>Rename configuration param seeAllSchedules to scheduleMode</li> </ul>"},{"location":"bookmark/ios/releases/2.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>3.2.0</code></li> </ul>"},{"location":"bookmark/ios/releases/2.2.1/","title":"Bookmark iOS 2.2.1 Changelog","text":"\ud83d\uddd3 09 May 2025"},{"location":"bookmark/ios/releases/2.2.1/#tasks","title":"Tasks","text":"<ul> <li>Enabled dSYM generation to support crash report symbolication</li> </ul>"},{"location":"bookmark/ios/releases/2.2.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code>, <code>3.2.1</code></li> <li><code>RouterEngine</code>, <code>1.6.1</code></li> <li><code>NavitiaSDK</code>, <code>2.9.1</code></li> </ul>"},{"location":"bookmark/ios/releases/2.3.0/","title":"Bookmark iOS 2.3.0 Changelog","text":"\ud83d\uddd3 11 Sep 2025"},{"location":"bookmark/ios/releases/2.3.0/#features","title":"Features","text":"<ul> <li>Route favorite transport to all schedules screen</li> </ul>"},{"location":"bookmark/ios/releases/2.3.0/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.1.2</code></li> </ul>"},{"location":"bookmark/screens/","title":"Bookmark Screens","text":""},{"location":"bookmark/screens/#screen-flow","title":"Screen flow","text":"<p>Refer to the following schema to learn more about different interactions and how to navigate between module screens:</p> <pre><code>graph TB\n    Favorites(Favorites) --&gt; Autocomplete(Autocomplete)</code></pre>"},{"location":"bookmark/screens/#favorites","title":"Favorites","text":"<p>This screen lists all the favorite stations, Bike sharing service stations, car parkings and addresses added by the user through other UI modules (Around Me, Schedule...) or from within a 3rd party application.</p> AndroidiOS <p></p> <p></p>"},{"location":"bookmark/screens/#autocomplete","title":"Autocomplete","text":"<p>404</p> <p>This section is not written yet</p>"},{"location":"expert/android/","title":"Expert Android","text":""},{"location":"expert/android/#setup","title":"\ud83d\udcbb Setup","text":"<p>Add the following dependency in the <code>build.gradle</code> file of your application:</p> <pre><code>dependencies {\n    implementation(\"com.kisio.navitia.sdk.data:expert:3.7.1\")\n}\n</code></pre>"},{"location":"expert/android/#implementation","title":"\ud83d\udc68\u200d\ud83d\udcbb Implementation","text":"<p>This module is set up by calling <code>ExpertSdk.getInstance()</code>. The singleton behaves like a builder in which each method allows you to configure the module. Then, you need to call the <code>init()</code> method at the end. You should call this method in an <code>Application</code> subclass. This method takes the following parameters:</p> Name Required Description Type Default <code>token</code> Get your token <code>String</code> <code>env</code> Environment in which the module is launched <code>NavitiaEnvironment</code> Example <pre><code>val expertSdk = ExpertSdk.getInstance().apply {\n    init(\n        token = \"your_token\",\n        env = NavitiaEnvironment.PROD\n    )\n}\n</code></pre>"},{"location":"expert/android/#launching","title":"\ud83d\ude80 Launching","text":"<p>You can now call any endpoint from <code>expertSdk</code> and its variety of builders that will help you request Navitia. As an example:</p> <pre><code>try {\n    val request = expertSdk.physicalModesApi.getCoverageRegionPhysicalModes(\n        region = \"your_coverage\"\n    )\n    if (request.isSuccessful) {\n        val result = request.body() as PhysicalModes\n        // Handle result\n    } else {\n        // Handle failure\n    }\n} catch (ex: Exception) {\n    // Handle failure exception\n}   \n</code></pre>"},{"location":"expert/android/apis/","title":"Available APIs","text":"API AccessPointsApi AddressesApi CalendarsApi CommercialModesApi CompaniesApi ContributorsApi CoordApi CoordsApi CoverageApi DatasetsApi DisruptionsApi EquipmentReportsApi FreeFloatingsNearbyApi GeoStatusApi GraphicalIsochroneApi HeatMapApi JourneyPatternPointsApi JourneyPatternsApi JourneysApi LineGroupsApi LineReportsApi LinesApi NetworksApi NextArrivalsApi NextDeparturesApi ObstaclesNearbyApi PhysicalModesApi PlaceUriApi PlacesApi PlacesNearbyApi PoiTypesApi PoisApi PtobjectsApi RouteSchedulesApi RoutesApi StopAreasApi StopPointsApi StopSchedulesApi TerminusSchedulesApi TrafficReportApi TripsApi VehicleJourneysApi VehiclePositionsApi"},{"location":"expert/android/changelogs/","title":"Expert Android Changelogs","text":"<ul> <li>v3.7.1 (23 Apr 2024)</li> <li>v3.7.0 (24 Mar 2024)</li> <li>v3.6.0 (13 Feb 2024)</li> <li>v3.5.2 (02 Dec 2024)</li> <li>v3.5.1 (24 Jun 2024)</li> <li>v3.5.0 (30 Jan 2024)</li> <li>v3.4.1 (11 Jan 2024)</li> <li>v3.4.0 (14 Nov 2023)</li> <li>v3.3.0 (23 Aug 2023)</li> <li>v3.2.2 (10 Jan 2023)</li> <li>v3.2.1 (28 Sep 2022)</li> <li>v3.2.0 (03 Aug 2022)</li> </ul>"},{"location":"expert/android/models/","title":"Available Models","text":"Model AccessPoint AccessPoints Address Admin AirPollutants Amount ApplicationPattern Arrivals BetaEndpoints BookingRule CO2 CO2EmissionRate Calendar CalendarException CalendarPeriod Calendars CarPark Cause CellLatSchema CellLonSchema Channel Code Comment CommercialMode CommercialModes Companie Companies Context Contributor Contributors Coord Cost Coverage CoverageError Coverages CurrentAvailability Dataset Datasets DateTimeType Departures DictAddresses Disruption DisruptionProperty Disruptions Distances Durations DynamicSpeed Effect Elevation EquipmentDetails EquipmentReport EquipmentReports Error Exception Fare FareZone FeedPublisher FreeFloatings FreeFloatingsCoord FreeFloatingsFreeFloatings GeoStatus GeoStatus1 GraphicalIsrochone GraphicalIsrochone1 GraphicalIsrochoneGeojson Header HeatMap HeatMap1 HeatMatrixSchema Impacted ImpactedSection ImpactedStop IndividualInformation IndividualRating Journey JourneyDebug JourneyPattern JourneyPatternPoint JourneyPatternPoints JourneyPatterns Journeys Line LineGroup LineGroups LineHeadersSchema LineReport LineReports Lines LinesSchema LinkSchema LowEmissionZone Message MultiLineStringSchema Network Networks Note Obstacles ObstaclesObstacles Pagination Passage PassageDisplayInformation Path PathWay Period PeriodDate PeriodTime PhysicalMode PhysicalModes Place PlaceNearby Places PlacesNearby Poi PoiType PoiTypes Pois PollutantValue Property PtObject PtObjects RidesharingInformation Route RouteDisplayInformation RouteSchedule RouteSchedules Routes Row SeatsDescription Section SectionGeoJsonSchema SectionGeoJsonSchemaProperties Severity Stands StopArea StopAreaEquipments StopAreas StopDateTime StopPoint StopPoints StopSchedule StopSchedules StopTime StreetInformation Table TerminusSchedule TerminusSchedules Ticket TrafficReport TrafficReports Trip Trips VJDisplayInformation ValidityPattern VehicleJourney VehicleJourneyPositions VehicleJourneys VehiclePositions VehiclePositions1 WeekPattern"},{"location":"expert/android/api/AccessPointsApi/","title":"AccessPointsApi","text":"Method HTTP request getCoordLonLatAccessPoints GET coord/{lon};{lat}/access_points getCoordsLonLatAccessPoints GET coords/{lon};{lat}/access_points getCoverageLonLatAccessPoints GET coverage/{lon};{lat}/access_points getCoverageLonLatUriAccessPoints GET coverage/{lon};{lat}/{uri}/access_points getCoverageRegionAccessPoints GET coverage/{region}/access_points getCoverageRegionUriAccessPoints GET coverage/{region}/{uri}/access_points"},{"location":"expert/android/api/AccessPointsApi/#getcoordlonlataccesspoints","title":"getCoordLonLatAccessPoints","text":""},{"location":"expert/android/api/AccessPointsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/AccessPointsApi/#return","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>ExpertSdk.getInstance().accessPointsApi.getCoordLonLatAccessPoints(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AccessPointsApi/#getcoordslonlataccesspoints","title":"getCoordsLonLatAccessPoints","text":""},{"location":"expert/android/api/AccessPointsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/AccessPointsApi/#return_1","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>ExpertSdk.getInstance().accessPointsApi.getCoordsLonLatAccessPoints(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AccessPointsApi/#getcoveragelonlataccesspoints","title":"getCoverageLonLatAccessPoints","text":""},{"location":"expert/android/api/AccessPointsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/AccessPointsApi/#return_2","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>ExpertSdk.getInstance().accessPointsApi.getCoverageLonLatAccessPoints(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AccessPointsApi/#getcoveragelonlaturiaccesspoints","title":"getCoverageLonLatUriAccessPoints","text":""},{"location":"expert/android/api/AccessPointsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/AccessPointsApi/#return_3","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>ExpertSdk.getInstance().accessPointsApi.getCoverageLonLatUriAccessPoints(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AccessPointsApi/#getcoverageregionaccesspoints","title":"getCoverageRegionAccessPoints","text":""},{"location":"expert/android/api/AccessPointsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/AccessPointsApi/#return_4","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>ExpertSdk.getInstance().accessPointsApi.getCoverageRegionAccessPoints(\n    region = \"region_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AccessPointsApi/#getcoverageregionuriaccesspoints","title":"getCoverageRegionUriAccessPoints","text":""},{"location":"expert/android/api/AccessPointsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/AccessPointsApi/#return_5","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>ExpertSdk.getInstance().accessPointsApi.getCoverageRegionUriAccessPoints(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AddressesApi/","title":"AddressesApi","text":"Method HTTP request getCoverageLonLatAddresses GET coverage/{lon};{lat}/addresses getCoverageLonLatAddressesId GET coverage/{lon};{lat}/addresses/{id} getCoverageLonLatUriAddresses GET coverage/{lon};{lat}/{uri}/addresses getCoverageLonLatUriAddressesId GET coverage/{lon};{lat}/{uri}/addresses/{id} getCoverageRegionAddresses GET coverage/{region}/addresses getCoverageRegionAddressesId GET coverage/{region}/addresses/{id} getCoverageRegionUriAddresses GET coverage/{region}/{uri}/addresses getCoverageRegionUriAddressesId GET coverage/{region}/{uri}/addresses/{id}"},{"location":"expert/android/api/AddressesApi/#getcoveragelonlataddresses","title":"getCoverageLonLatAddresses","text":""},{"location":"expert/android/api/AddressesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query"},{"location":"expert/android/api/AddressesApi/#return","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().addressesApi.getCoverageLonLatAddresses(\n    lon = 0.0,\n    lat = 0.0\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AddressesApi/#getcoveragelonlataddressesid","title":"getCoverageLonLatAddressesId","text":""},{"location":"expert/android/api/AddressesApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query"},{"location":"expert/android/api/AddressesApi/#return_1","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().addressesApi.getCoverageLonLatAddressesId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AddressesApi/#getcoveragelonlaturiaddresses","title":"getCoverageLonLatUriAddresses","text":""},{"location":"expert/android/api/AddressesApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri"},{"location":"expert/android/api/AddressesApi/#return_2","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().addressesApi.getCoverageLonLatUriAddresses(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AddressesApi/#getcoveragelonlaturiaddressesid","title":"getCoverageLonLatUriAddressesId","text":""},{"location":"expert/android/api/AddressesApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/android/api/AddressesApi/#return_3","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().addressesApi.getCoverageLonLatUriAddressesId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AddressesApi/#getcoverageregionaddresses","title":"getCoverageRegionAddresses","text":""},{"location":"expert/android/api/AddressesApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query"},{"location":"expert/android/api/AddressesApi/#return_4","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().addressesApi.getCoverageRegionAddresses(\n    region = \"region_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AddressesApi/#getcoverageregionaddressesid","title":"getCoverageRegionAddressesId","text":""},{"location":"expert/android/api/AddressesApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query"},{"location":"expert/android/api/AddressesApi/#return_5","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().addressesApi.getCoverageRegionAddressesId(\n    region = \"region_example\",\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AddressesApi/#getcoverageregionuriaddresses","title":"getCoverageRegionUriAddresses","text":""},{"location":"expert/android/api/AddressesApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri"},{"location":"expert/android/api/AddressesApi/#return_6","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().addressesApi.getCoverageRegionUriAddresses(\n    region = \"region_example\",\n    uri = \"uri_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/AddressesApi/#getcoverageregionuriaddressesid","title":"getCoverageRegionUriAddressesId","text":""},{"location":"expert/android/api/AddressesApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/android/api/AddressesApi/#return_7","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().addressesApi.getCoverageRegionUriAddressesId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CalendarsApi/","title":"CalendarsApi","text":"Method HTTP request getCoverageLonLatCalendars GET coverage/{lon};{lat}/calendars getCoverageLonLatCalendarsId GET coverage/{lon};{lat}/calendars/{id} getCoverageLonLatUriCalendars GET coverage/{lon};{lat}/{uri}/calendars getCoverageRegionCalendars GET coverage/{region}/calendars getCoverageRegionCalendarsId GET coverage/{region}/calendars/{id} getCoverageRegionUriCalendars GET coverage/{region}/{uri}/calendars"},{"location":"expert/android/api/CalendarsApi/#getcoveragelonlatcalendars","title":"getCoverageLonLatCalendars","text":""},{"location":"expert/android/api/CalendarsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/android/api/CalendarsApi/#return","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>ExpertSdk.getInstance().calendarsApi.getCoverageLonLatCalendars(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    startDate = \"startDate_example\",\n    endDate = \"endDate_example\",\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    distance = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CalendarsApi/#getcoveragelonlatcalendarsid","title":"getCoverageLonLatCalendarsId","text":""},{"location":"expert/android/api/CalendarsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/android/api/CalendarsApi/#return_1","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>ExpertSdk.getInstance().calendarsApi.getCoverageLonLatCalendarsId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    startDate = \"startDate_example\",\n    endDate = \"endDate_example\",\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    distance = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CalendarsApi/#getcoveragelonlaturicalendars","title":"getCoverageLonLatUriCalendars","text":""},{"location":"expert/android/api/CalendarsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/android/api/CalendarsApi/#return_2","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>ExpertSdk.getInstance().calendarsApi.getCoverageLonLatUriCalendars(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    startDate = \"startDate_example\",\n    endDate = \"endDate_example\",\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    distance = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CalendarsApi/#getcoverageregioncalendars","title":"getCoverageRegionCalendars","text":""},{"location":"expert/android/api/CalendarsApi/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/android/api/CalendarsApi/#return_3","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>ExpertSdk.getInstance().calendarsApi.getCoverageRegionCalendars(\n    region = \"region_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    startDate = \"startDate_example\",\n    endDate = \"endDate_example\",\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    distance = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CalendarsApi/#getcoverageregioncalendarsid","title":"getCoverageRegionCalendarsId","text":""},{"location":"expert/android/api/CalendarsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/android/api/CalendarsApi/#return_4","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>ExpertSdk.getInstance().calendarsApi.getCoverageRegionCalendarsId(\n    region = \"region_example\",\n    id = \"id_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    startDate = \"startDate_example\",\n    endDate = \"endDate_example\",\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    distance = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CalendarsApi/#getcoverageregionuricalendars","title":"getCoverageRegionUriCalendars","text":""},{"location":"expert/android/api/CalendarsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/android/api/CalendarsApi/#return_5","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>ExpertSdk.getInstance().calendarsApi.getCoverageRegionUriCalendars(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    startDate = \"startDate_example\",\n    endDate = \"endDate_example\",\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    distance = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CommercialModesApi/","title":"CommercialModesApi","text":"Method HTTP request getCoverageLonLatCommercialModes GET coverage/{lon};{lat}/commercial_modes getCoverageLonLatCommercialModesId GET coverage/{lon};{lat}/commercial_modes/{id} getCoverageLonLatUriCommercialModes GET coverage/{lon};{lat}/{uri}/commercial_modes getCoverageLonLatUriCommercialModesId GET coverage/{lon};{lat}/{uri}/commercial_modes/{id} getCoverageRegionCommercialModes GET coverage/{region}/commercial_modes getCoverageRegionCommercialModesId GET coverage/{region}/commercial_modes/{id} getCoverageRegionUriCommercialModes GET coverage/{region}/{uri}/commercial_modes getCoverageRegionUriCommercialModesId GET coverage/{region}/{uri}/commercial_modes/{id}"},{"location":"expert/android/api/CommercialModesApi/#getcoveragelonlatcommercialmodes","title":"getCoverageLonLatCommercialModes","text":""},{"location":"expert/android/api/CommercialModesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CommercialModesApi/#return","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>ExpertSdk.getInstance().commercialModesApi.getCoverageLonLatCommercialModes(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CommercialModesApi/#getcoveragelonlatcommercialmodesid","title":"getCoverageLonLatCommercialModesId","text":""},{"location":"expert/android/api/CommercialModesApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CommercialModesApi/#return_1","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>ExpertSdk.getInstance().commercialModesApi.getCoverageLonLatCommercialModesId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CommercialModesApi/#getcoveragelonlaturicommercialmodes","title":"getCoverageLonLatUriCommercialModes","text":""},{"location":"expert/android/api/CommercialModesApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CommercialModesApi/#return_2","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>ExpertSdk.getInstance().commercialModesApi.getCoverageLonLatUriCommercialModes(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CommercialModesApi/#getcoveragelonlaturicommercialmodesid","title":"getCoverageLonLatUriCommercialModesId","text":""},{"location":"expert/android/api/CommercialModesApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CommercialModesApi/#return_3","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>ExpertSdk.getInstance().commercialModesApi.getCoverageLonLatUriCommercialModesId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CommercialModesApi/#getcoverageregioncommercialmodes","title":"getCoverageRegionCommercialModes","text":""},{"location":"expert/android/api/CommercialModesApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CommercialModesApi/#return_4","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>ExpertSdk.getInstance().commercialModesApi.getCoverageRegionCommercialModes(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CommercialModesApi/#getcoverageregioncommercialmodesid","title":"getCoverageRegionCommercialModesId","text":""},{"location":"expert/android/api/CommercialModesApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CommercialModesApi/#return_5","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>ExpertSdk.getInstance().commercialModesApi.getCoverageRegionCommercialModesId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CommercialModesApi/#getcoverageregionuricommercialmodes","title":"getCoverageRegionUriCommercialModes","text":""},{"location":"expert/android/api/CommercialModesApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CommercialModesApi/#return_6","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>ExpertSdk.getInstance().commercialModesApi.getCoverageRegionUriCommercialModes(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CommercialModesApi/#getcoverageregionuricommercialmodesid","title":"getCoverageRegionUriCommercialModesId","text":""},{"location":"expert/android/api/CommercialModesApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CommercialModesApi/#return_7","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>ExpertSdk.getInstance().commercialModesApi.getCoverageRegionUriCommercialModesId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CompaniesApi/","title":"CompaniesApi","text":"Method HTTP request getCoverageLonLatCompanies GET coverage/{lon};{lat}/companies getCoverageLonLatCompaniesId GET coverage/{lon};{lat}/companies/{id} getCoverageLonLatUriCompanies GET coverage/{lon};{lat}/{uri}/companies getCoverageLonLatUriCompaniesId GET coverage/{lon};{lat}/{uri}/companies/{id} getCoverageRegionCompanies GET coverage/{region}/companies getCoverageRegionCompaniesId GET coverage/{region}/companies/{id} getCoverageRegionUriCompanies GET coverage/{region}/{uri}/companies getCoverageRegionUriCompaniesId GET coverage/{region}/{uri}/companies/{id}"},{"location":"expert/android/api/CompaniesApi/#getcoveragelonlatcompanies","title":"getCoverageLonLatCompanies","text":""},{"location":"expert/android/api/CompaniesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CompaniesApi/#return","title":"ReturnExample","text":"<p>Companies</p> <pre><code>ExpertSdk.getInstance().companiesApi.getCoverageLonLatCompanies(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CompaniesApi/#getcoveragelonlatcompaniesid","title":"getCoverageLonLatCompaniesId","text":""},{"location":"expert/android/api/CompaniesApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CompaniesApi/#return_1","title":"ReturnExample","text":"<p>Companies</p> <pre><code>ExpertSdk.getInstance().companiesApi.getCoverageLonLatCompaniesId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CompaniesApi/#getcoveragelonlaturicompanies","title":"getCoverageLonLatUriCompanies","text":""},{"location":"expert/android/api/CompaniesApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CompaniesApi/#return_2","title":"ReturnExample","text":"<p>Companies</p> <pre><code>ExpertSdk.getInstance().companiesApi.getCoverageLonLatUriCompanies(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CompaniesApi/#getcoveragelonlaturicompaniesid","title":"getCoverageLonLatUriCompaniesId","text":""},{"location":"expert/android/api/CompaniesApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CompaniesApi/#return_3","title":"ReturnExample","text":"<p>Companies</p> <pre><code>ExpertSdk.getInstance().companiesApi.getCoverageLonLatUriCompaniesId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CompaniesApi/#getcoverageregioncompanies","title":"getCoverageRegionCompanies","text":""},{"location":"expert/android/api/CompaniesApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CompaniesApi/#return_4","title":"ReturnExample","text":"<p>Companies</p> <pre><code>ExpertSdk.getInstance().companiesApi.getCoverageRegionCompanies(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CompaniesApi/#getcoverageregioncompaniesid","title":"getCoverageRegionCompaniesId","text":""},{"location":"expert/android/api/CompaniesApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CompaniesApi/#return_5","title":"ReturnExample","text":"<p>Companies</p> <pre><code>ExpertSdk.getInstance().companiesApi.getCoverageRegionCompaniesId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CompaniesApi/#getcoverageregionuricompanies","title":"getCoverageRegionUriCompanies","text":""},{"location":"expert/android/api/CompaniesApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CompaniesApi/#return_6","title":"ReturnExample","text":"<p>Companies</p> <pre><code>ExpertSdk.getInstance().companiesApi.getCoverageRegionUriCompanies(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CompaniesApi/#getcoverageregionuricompaniesid","title":"getCoverageRegionUriCompaniesId","text":""},{"location":"expert/android/api/CompaniesApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/CompaniesApi/#return_7","title":"ReturnExample","text":"<p>Companies</p> <pre><code>ExpertSdk.getInstance().companiesApi.getCoverageRegionUriCompaniesId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ContributorsApi/","title":"ContributorsApi","text":"Method HTTP request getCoverageLonLatContributors GET coverage/{lon};{lat}/contributors getCoverageLonLatContributorsId GET coverage/{lon};{lat}/contributors/{id} getCoverageLonLatUriContributors GET coverage/{lon};{lat}/{uri}/contributors getCoverageLonLatUriContributorsId GET coverage/{lon};{lat}/{uri}/contributors/{id} getCoverageRegionContributors GET coverage/{region}/contributors getCoverageRegionContributorsId GET coverage/{region}/contributors/{id} getCoverageRegionUriContributors GET coverage/{region}/{uri}/contributors getCoverageRegionUriContributorsId GET coverage/{region}/{uri}/contributors/{id}"},{"location":"expert/android/api/ContributorsApi/#getcoveragelonlatcontributors","title":"getCoverageLonLatContributors","text":""},{"location":"expert/android/api/ContributorsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/ContributorsApi/#return","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>ExpertSdk.getInstance().contributorsApi.getCoverageLonLatContributors(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ContributorsApi/#getcoveragelonlatcontributorsid","title":"getCoverageLonLatContributorsId","text":""},{"location":"expert/android/api/ContributorsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/ContributorsApi/#return_1","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>ExpertSdk.getInstance().contributorsApi.getCoverageLonLatContributorsId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ContributorsApi/#getcoveragelonlaturicontributors","title":"getCoverageLonLatUriContributors","text":""},{"location":"expert/android/api/ContributorsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/ContributorsApi/#return_2","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>ExpertSdk.getInstance().contributorsApi.getCoverageLonLatUriContributors(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ContributorsApi/#getcoveragelonlaturicontributorsid","title":"getCoverageLonLatUriContributorsId","text":""},{"location":"expert/android/api/ContributorsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/ContributorsApi/#return_3","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>ExpertSdk.getInstance().contributorsApi.getCoverageLonLatUriContributorsId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ContributorsApi/#getcoverageregioncontributors","title":"getCoverageRegionContributors","text":""},{"location":"expert/android/api/ContributorsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/ContributorsApi/#return_4","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>ExpertSdk.getInstance().contributorsApi.getCoverageRegionContributors(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ContributorsApi/#getcoverageregioncontributorsid","title":"getCoverageRegionContributorsId","text":""},{"location":"expert/android/api/ContributorsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/ContributorsApi/#return_5","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>ExpertSdk.getInstance().contributorsApi.getCoverageRegionContributorsId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ContributorsApi/#getcoverageregionuricontributors","title":"getCoverageRegionUriContributors","text":""},{"location":"expert/android/api/ContributorsApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/ContributorsApi/#return_6","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>ExpertSdk.getInstance().contributorsApi.getCoverageRegionUriContributors(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ContributorsApi/#getcoverageregionuricontributorsid","title":"getCoverageRegionUriContributorsId","text":""},{"location":"expert/android/api/ContributorsApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/ContributorsApi/#return_7","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>ExpertSdk.getInstance().contributorsApi.getCoverageRegionUriContributorsId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordApi/","title":"CoordApi","text":"Method HTTP request getCoordLonLat GET coord/{lon};{lat}/ getCoordsLonLat GET coords/{lon};{lat}/ getCoverageRegionCoordLonLatAddresses GET coverage/{region}/coord/{lon};{lat}/addresses getCoverageRegionCoordsLonLatAddresses GET coverage/{region}/coords/{lon};{lat}/addresses"},{"location":"expert/android/api/CoordApi/#getcoordlonlat","title":"getCoordLonLat","text":""},{"location":"expert/android/api/CoordApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query"},{"location":"expert/android/api/CoordApi/#return","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordApi.getCoordLonLat(\n    lon = 0.0,\n    lat = 0.0\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordApi/#getcoordslonlat","title":"getCoordsLonLat","text":""},{"location":"expert/android/api/CoordApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query"},{"location":"expert/android/api/CoordApi/#return_1","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordApi.getCoordsLonLat(\n    lon = 0.0,\n    lat = 0.0\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordApi/#getcoverageregioncoordlonlataddresses","title":"getCoverageRegionCoordLonLatAddresses","text":""},{"location":"expert/android/api/CoordApi/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query"},{"location":"expert/android/api/CoordApi/#return_2","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordApi.getCoverageRegionCoordLonLatAddresses(\n    region = \"region_example\",\n    lon = 0.0,\n    lat = 0.0\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordApi/#getcoverageregioncoordslonlataddresses","title":"getCoverageRegionCoordsLonLatAddresses","text":""},{"location":"expert/android/api/CoordApi/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query"},{"location":"expert/android/api/CoordApi/#return_3","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordApi.getCoverageRegionCoordsLonLatAddresses(\n    region = \"region_example\",\n    lon = 0.0,\n    lat = 0.0\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/","title":"CoordsApi","text":"Method HTTP request getCoverageLonLatCoord GET coverage/{lon};{lat}/coord getCoverageLonLatCoordId GET coverage/{lon};{lat}/coord/{id} getCoverageLonLatCoords GET coverage/{lon};{lat}/coords getCoverageLonLatCoordsId GET coverage/{lon};{lat}/coords/{id} getCoverageLonLatUriCoord GET coverage/{lon};{lat}/{uri}/coord getCoverageLonLatUriCoordId GET coverage/{lon};{lat}/{uri}/coord/{id} getCoverageLonLatUriCoords GET coverage/{lon};{lat}/{uri}/coords getCoverageLonLatUriCoordsId GET coverage/{lon};{lat}/{uri}/coords/{id} getCoverageRegionCoord GET coverage/{region}/coord getCoverageRegionCoordId GET coverage/{region}/coord/{id} getCoverageRegionCoords GET coverage/{region}/coords getCoverageRegionCoordsId GET coverage/{region}/coords/{id} getCoverageRegionUriCoord GET coverage/{region}/{uri}/coord getCoverageRegionUriCoordId GET coverage/{region}/{uri}/coord/{id} getCoverageRegionUriCoords GET coverage/{region}/{uri}/coords getCoverageRegionUriCoordsId GET coverage/{region}/{uri}/coords/{id}"},{"location":"expert/android/api/CoordsApi/#getcoveragelonlatcoord","title":"getCoverageLonLatCoord","text":""},{"location":"expert/android/api/CoordsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query"},{"location":"expert/android/api/CoordsApi/#return","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageLonLatCoord(\n    lon = 0.0,\n    lat = 0.0\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoveragelonlatcoordid","title":"getCoverageLonLatCoordId","text":""},{"location":"expert/android/api/CoordsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query"},{"location":"expert/android/api/CoordsApi/#return_1","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageLonLatCoordId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoveragelonlatcoords","title":"getCoverageLonLatCoords","text":""},{"location":"expert/android/api/CoordsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query"},{"location":"expert/android/api/CoordsApi/#return_2","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageLonLatCoords(\n    lon = 0.0,\n    lat = 0.0\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoveragelonlatcoordsid","title":"getCoverageLonLatCoordsId","text":""},{"location":"expert/android/api/CoordsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query"},{"location":"expert/android/api/CoordsApi/#return_3","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageLonLatCoordsId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoveragelonlaturicoord","title":"getCoverageLonLatUriCoord","text":""},{"location":"expert/android/api/CoordsApi/#parameters_4","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri"},{"location":"expert/android/api/CoordsApi/#return_4","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageLonLatUriCoord(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoveragelonlaturicoordid","title":"getCoverageLonLatUriCoordId","text":""},{"location":"expert/android/api/CoordsApi/#parameters_5","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/android/api/CoordsApi/#return_5","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageLonLatUriCoordId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoveragelonlaturicoords","title":"getCoverageLonLatUriCoords","text":""},{"location":"expert/android/api/CoordsApi/#parameters_6","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri"},{"location":"expert/android/api/CoordsApi/#return_6","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageLonLatUriCoords(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoveragelonlaturicoordsid","title":"getCoverageLonLatUriCoordsId","text":""},{"location":"expert/android/api/CoordsApi/#parameters_7","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/android/api/CoordsApi/#return_7","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageLonLatUriCoordsId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoverageregioncoord","title":"getCoverageRegionCoord","text":""},{"location":"expert/android/api/CoordsApi/#parameters_8","title":"Parameters","text":"Name Type Note region String The region you want to query"},{"location":"expert/android/api/CoordsApi/#return_8","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageRegionCoord(\n    region = \"region_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoverageregioncoordid","title":"getCoverageRegionCoordId","text":""},{"location":"expert/android/api/CoordsApi/#parameters_9","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query"},{"location":"expert/android/api/CoordsApi/#return_9","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageRegionCoordId(\n    region = \"region_example\",\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoverageregioncoords","title":"getCoverageRegionCoords","text":""},{"location":"expert/android/api/CoordsApi/#parameters_10","title":"Parameters","text":"Name Type Note region String The region you want to query"},{"location":"expert/android/api/CoordsApi/#return_10","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageRegionCoords(\n    region = \"region_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoverageregioncoordsid","title":"getCoverageRegionCoordsId","text":""},{"location":"expert/android/api/CoordsApi/#parameters_11","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query"},{"location":"expert/android/api/CoordsApi/#return_11","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageRegionCoordsId(\n    region = \"region_example\",\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoverageregionuricoord","title":"getCoverageRegionUriCoord","text":""},{"location":"expert/android/api/CoordsApi/#parameters_12","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri"},{"location":"expert/android/api/CoordsApi/#return_12","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageRegionUriCoord(\n    region = \"region_example\",\n    uri = \"uri_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoverageregionuricoordid","title":"getCoverageRegionUriCoordId","text":""},{"location":"expert/android/api/CoordsApi/#parameters_13","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/android/api/CoordsApi/#return_13","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageRegionUriCoordId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoverageregionuricoords","title":"getCoverageRegionUriCoords","text":""},{"location":"expert/android/api/CoordsApi/#parameters_14","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri"},{"location":"expert/android/api/CoordsApi/#return_14","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageRegionUriCoords(\n    region = \"region_example\",\n    uri = \"uri_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoordsApi/#getcoverageregionuricoordsid","title":"getCoverageRegionUriCoordsId","text":""},{"location":"expert/android/api/CoordsApi/#parameters_15","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/android/api/CoordsApi/#return_15","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>ExpertSdk.getInstance().coordsApi.getCoverageRegionUriCoordsId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoverageApi/","title":"CoverageApi","text":"Method HTTP request getCoverage GET coverage/ getCoverageLonLat GET coverage/{lon};{lat}/ getCoverageRegion GET coverage/{region}/"},{"location":"expert/android/api/CoverageApi/#getcoverage","title":"getCoverage","text":""},{"location":"expert/android/api/CoverageApi/#parameters","title":"Parameters","text":"Name Type Note disableGeojson Boolean hide the coverage geojson to reduce response size [optional]"},{"location":"expert/android/api/CoverageApi/#return","title":"ReturnExample","text":"<p>Coverages</p> <pre><code>ExpertSdk.getInstance().coverageApi.getCoverage(\n    disableGeojson = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoverageApi/#getcoveragelonlat","title":"getCoverageLonLat","text":""},{"location":"expert/android/api/CoverageApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query disableGeojson Boolean hide the coverage geojson to reduce response size [optional]"},{"location":"expert/android/api/CoverageApi/#return_1","title":"ReturnExample","text":"<p>Coverages</p> <pre><code>ExpertSdk.getInstance().coverageApi.getCoverageLonLat(\n    lon = 0.0,\n    lat = 0.0,\n    disableGeojson = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/CoverageApi/#getcoverageregion","title":"getCoverageRegion","text":""},{"location":"expert/android/api/CoverageApi/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query disableGeojson Boolean hide the coverage geojson to reduce response size [optional]"},{"location":"expert/android/api/CoverageApi/#return_2","title":"ReturnExample","text":"<p>Coverages</p> <pre><code>ExpertSdk.getInstance().coverageApi.getCoverageRegion(\n    region = \"region_example\",\n    disableGeojson = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DatasetsApi/","title":"DatasetsApi","text":"Method HTTP request getCoverageLonLatDatasets GET coverage/{lon};{lat}/datasets getCoverageLonLatDatasetsId GET coverage/{lon};{lat}/datasets/{id} getCoverageLonLatUriDatasets GET coverage/{lon};{lat}/{uri}/datasets getCoverageLonLatUriDatasetsId GET coverage/{lon};{lat}/{uri}/datasets/{id} getCoverageRegionDatasets GET coverage/{region}/datasets getCoverageRegionDatasetsId GET coverage/{region}/datasets/{id} getCoverageRegionUriDatasets GET coverage/{region}/{uri}/datasets getCoverageRegionUriDatasetsId GET coverage/{region}/{uri}/datasets/{id}"},{"location":"expert/android/api/DatasetsApi/#getcoveragelonlatdatasets","title":"getCoverageLonLatDatasets","text":""},{"location":"expert/android/api/DatasetsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/DatasetsApi/#return","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>ExpertSdk.getInstance().datasetsApi.getCoverageLonLatDatasets(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DatasetsApi/#getcoveragelonlatdatasetsid","title":"getCoverageLonLatDatasetsId","text":""},{"location":"expert/android/api/DatasetsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/DatasetsApi/#return_1","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>ExpertSdk.getInstance().datasetsApi.getCoverageLonLatDatasetsId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DatasetsApi/#getcoveragelonlaturidatasets","title":"getCoverageLonLatUriDatasets","text":""},{"location":"expert/android/api/DatasetsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/DatasetsApi/#return_2","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>ExpertSdk.getInstance().datasetsApi.getCoverageLonLatUriDatasets(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DatasetsApi/#getcoveragelonlaturidatasetsid","title":"getCoverageLonLatUriDatasetsId","text":""},{"location":"expert/android/api/DatasetsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/DatasetsApi/#return_3","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>ExpertSdk.getInstance().datasetsApi.getCoverageLonLatUriDatasetsId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DatasetsApi/#getcoverageregiondatasets","title":"getCoverageRegionDatasets","text":""},{"location":"expert/android/api/DatasetsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/DatasetsApi/#return_4","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>ExpertSdk.getInstance().datasetsApi.getCoverageRegionDatasets(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DatasetsApi/#getcoverageregiondatasetsid","title":"getCoverageRegionDatasetsId","text":""},{"location":"expert/android/api/DatasetsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/DatasetsApi/#return_5","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>ExpertSdk.getInstance().datasetsApi.getCoverageRegionDatasetsId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DatasetsApi/#getcoverageregionuridatasets","title":"getCoverageRegionUriDatasets","text":""},{"location":"expert/android/api/DatasetsApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/DatasetsApi/#return_6","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>ExpertSdk.getInstance().datasetsApi.getCoverageRegionUriDatasets(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DatasetsApi/#getcoverageregionuridatasetsid","title":"getCoverageRegionUriDatasetsId","text":""},{"location":"expert/android/api/DatasetsApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/DatasetsApi/#return_7","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>ExpertSdk.getInstance().datasetsApi.getCoverageRegionUriDatasetsId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DisruptionsApi/","title":"DisruptionsApi","text":"Method HTTP request getCoverageLonLatDisruptions GET coverage/{lon};{lat}/disruptions getCoverageLonLatDisruptionsId GET coverage/{lon};{lat}/disruptions/{id} getCoverageLonLatUriDisruptions GET coverage/{lon};{lat}/{uri}/disruptions getCoverageLonLatUriDisruptionsId GET coverage/{lon};{lat}/{uri}/disruptions/{id} getCoverageRegionDisruptions GET coverage/{region}/disruptions getCoverageRegionDisruptionsId GET coverage/{region}/disruptions/{id} getCoverageRegionUriDisruptions GET coverage/{region}/{uri}/disruptions getCoverageRegionUriDisruptionsId GET coverage/{region}/{uri}/disruptions/{id}"},{"location":"expert/android/api/DisruptionsApi/#getcoveragelonlatdisruptions","title":"getCoverageLonLatDisruptions","text":""},{"location":"expert/android/api/DisruptionsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/DisruptionsApi/#return","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>ExpertSdk.getInstance().disruptionsApi.getCoverageLonLatDisruptions(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DisruptionsApi/#getcoveragelonlatdisruptionsid","title":"getCoverageLonLatDisruptionsId","text":""},{"location":"expert/android/api/DisruptionsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/DisruptionsApi/#return_1","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>ExpertSdk.getInstance().disruptionsApi.getCoverageLonLatDisruptionsId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DisruptionsApi/#getcoveragelonlaturidisruptions","title":"getCoverageLonLatUriDisruptions","text":""},{"location":"expert/android/api/DisruptionsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/DisruptionsApi/#return_2","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>ExpertSdk.getInstance().disruptionsApi.getCoverageLonLatUriDisruptions(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DisruptionsApi/#getcoveragelonlaturidisruptionsid","title":"getCoverageLonLatUriDisruptionsId","text":""},{"location":"expert/android/api/DisruptionsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/DisruptionsApi/#return_3","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>ExpertSdk.getInstance().disruptionsApi.getCoverageLonLatUriDisruptionsId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DisruptionsApi/#getcoverageregiondisruptions","title":"getCoverageRegionDisruptions","text":""},{"location":"expert/android/api/DisruptionsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/DisruptionsApi/#return_4","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>ExpertSdk.getInstance().disruptionsApi.getCoverageRegionDisruptions(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DisruptionsApi/#getcoverageregiondisruptionsid","title":"getCoverageRegionDisruptionsId","text":""},{"location":"expert/android/api/DisruptionsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/DisruptionsApi/#return_5","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>ExpertSdk.getInstance().disruptionsApi.getCoverageRegionDisruptionsId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DisruptionsApi/#getcoverageregionuridisruptions","title":"getCoverageRegionUriDisruptions","text":""},{"location":"expert/android/api/DisruptionsApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/DisruptionsApi/#return_6","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>ExpertSdk.getInstance().disruptionsApi.getCoverageRegionUriDisruptions(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/DisruptionsApi/#getcoverageregionuridisruptionsid","title":"getCoverageRegionUriDisruptionsId","text":""},{"location":"expert/android/api/DisruptionsApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/DisruptionsApi/#return_7","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>ExpertSdk.getInstance().disruptionsApi.getCoverageRegionUriDisruptionsId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/EquipmentReportsApi/","title":"EquipmentReportsApi","text":"Method HTTP request getCoordLonLatEquipmentReports GET coord/{lon};{lat}/equipment_reports getCoordsLonLatEquipmentReports GET coords/{lon};{lat}/equipment_reports getCoverageLonLatEquipmentReports GET coverage/{lon};{lat}/equipment_reports getCoverageLonLatUriEquipmentReports GET coverage/{lon};{lat}/{uri}/equipment_reports getCoverageRegionEquipmentReports GET coverage/{region}/equipment_reports getCoverageRegionUriEquipmentReports GET coverage/{region}/{uri}/equipment_reports"},{"location":"expert/android/api/EquipmentReportsApi/#getcoordlonlatequipmentreports","title":"getCoordLonLatEquipmentReports","text":""},{"location":"expert/android/api/EquipmentReportsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/EquipmentReportsApi/#return","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>ExpertSdk.getInstance().equipmentReportsApi.getCoordLonLatEquipmentReports(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/EquipmentReportsApi/#getcoordslonlatequipmentreports","title":"getCoordsLonLatEquipmentReports","text":""},{"location":"expert/android/api/EquipmentReportsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/EquipmentReportsApi/#return_1","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>ExpertSdk.getInstance().equipmentReportsApi.getCoordsLonLatEquipmentReports(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/EquipmentReportsApi/#getcoveragelonlatequipmentreports","title":"getCoverageLonLatEquipmentReports","text":""},{"location":"expert/android/api/EquipmentReportsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/EquipmentReportsApi/#return_2","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>ExpertSdk.getInstance().equipmentReportsApi.getCoverageLonLatEquipmentReports(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/EquipmentReportsApi/#getcoveragelonlaturiequipmentreports","title":"getCoverageLonLatUriEquipmentReports","text":""},{"location":"expert/android/api/EquipmentReportsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/EquipmentReportsApi/#return_3","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>ExpertSdk.getInstance().equipmentReportsApi.getCoverageLonLatUriEquipmentReports(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/EquipmentReportsApi/#getcoverageregionequipmentreports","title":"getCoverageRegionEquipmentReports","text":""},{"location":"expert/android/api/EquipmentReportsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/EquipmentReportsApi/#return_4","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>ExpertSdk.getInstance().equipmentReportsApi.getCoverageRegionEquipmentReports(\n    region = \"region_example\",\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/EquipmentReportsApi/#getcoverageregionuriequipmentreports","title":"getCoverageRegionUriEquipmentReports","text":""},{"location":"expert/android/api/EquipmentReportsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/EquipmentReportsApi/#return_5","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>ExpertSdk.getInstance().equipmentReportsApi.getCoverageRegionUriEquipmentReports(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/FreeFloatingsNearbyApi/","title":"FreeFloatingsNearbyApi","text":"Method HTTP request getCoordLonLatFreefloatingsNearby GET coord/{lon};{lat}/freefloatings_nearby getCoordsLonLatFreefloatingsNearby GET coords/{lon};{lat}/freefloatings_nearby getCoverageLonLatFreefloatingsNearby GET coverage/{lon};{lat}/freefloatings_nearby getCoverageLonLatUriFreefloatingsNearby GET coverage/{lon};{lat}/{uri}/freefloatings_nearby getCoverageRegionFreefloatingsNearby GET coverage/{region}/freefloatings_nearby getCoverageRegionUriFreefloatingsNearby GET coverage/{region}/{uri}/freefloatings_nearby"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#getcoordlonlatfreefloatingsnearby","title":"getCoordLonLatFreefloatingsNearby","text":""},{"location":"expert/android/api/FreeFloatingsNearbyApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query type List Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#return","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>ExpertSdk.getInstance().freeFloatingsNearbyApi.getCoordLonLatFreefloatingsNearby(\n    lon = 0.0,\n    lat = 0.0,\n    type = listOf(),\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#getcoordslonlatfreefloatingsnearby","title":"getCoordsLonLatFreefloatingsNearby","text":""},{"location":"expert/android/api/FreeFloatingsNearbyApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query type List Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#return_1","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>ExpertSdk.getInstance().freeFloatingsNearbyApi.getCoordsLonLatFreefloatingsNearby(\n    lon = 0.0,\n    lat = 0.0,\n    type = listOf(),\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#getcoveragelonlatfreefloatingsnearby","title":"getCoverageLonLatFreefloatingsNearby","text":""},{"location":"expert/android/api/FreeFloatingsNearbyApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query type List Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#return_2","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>ExpertSdk.getInstance().freeFloatingsNearbyApi.getCoverageLonLatFreefloatingsNearby(\n    lon = 0.0,\n    lat = 0.0,\n    type = listOf(),\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#getcoveragelonlaturifreefloatingsnearby","title":"getCoverageLonLatUriFreefloatingsNearby","text":""},{"location":"expert/android/api/FreeFloatingsNearbyApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri type List Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#return_3","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>ExpertSdk.getInstance().freeFloatingsNearbyApi.getCoverageLonLatUriFreefloatingsNearby(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    type = listOf(),\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#getcoverageregionfreefloatingsnearby","title":"getCoverageRegionFreefloatingsNearby","text":""},{"location":"expert/android/api/FreeFloatingsNearbyApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query type List Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#return_4","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>ExpertSdk.getInstance().freeFloatingsNearbyApi.getCoverageRegionFreefloatingsNearby(\n    region = \"region_example\",\n    type = listOf(),\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#getcoverageregionurifreefloatingsnearby","title":"getCoverageRegionUriFreefloatingsNearby","text":""},{"location":"expert/android/api/FreeFloatingsNearbyApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri type List Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/FreeFloatingsNearbyApi/#return_5","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>ExpertSdk.getInstance().freeFloatingsNearbyApi.getCoverageRegionUriFreefloatingsNearby(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    type = listOf(),\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/GeoStatusApi/","title":"GeoStatusApi","text":"Method HTTP request getCoverageLonLatGeoStatus GET coverage/{lon};{lat}/_geo_status getCoverageRegionGeoStatus GET coverage/{region}/_geo_status"},{"location":"expert/android/api/GeoStatusApi/#getcoveragelonlatgeostatus","title":"getCoverageLonLatGeoStatus","text":""},{"location":"expert/android/api/GeoStatusApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query"},{"location":"expert/android/api/GeoStatusApi/#return","title":"ReturnExample","text":"<p>GeoStatus1</p> <pre><code>ExpertSdk.getInstance().geoStatusApi.getCoverageLonLatGeoStatus(\n    lon = 0.0,\n    lat = 0.0\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/GeoStatusApi/#getcoverageregiongeostatus","title":"getCoverageRegionGeoStatus","text":""},{"location":"expert/android/api/GeoStatusApi/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query"},{"location":"expert/android/api/GeoStatusApi/#return_1","title":"ReturnExample","text":"<p>GeoStatus1</p> <pre><code>ExpertSdk.getInstance().geoStatusApi.getCoverageRegionGeoStatus(\n    region = \"region_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/GraphicalIsochroneApi/","title":"GraphicalIsochroneApi","text":"Method HTTP request getCoverageLonLatIsochrones GET coverage/{lon};{lat}/isochrones getCoverageRegionIsochrones GET coverage/{region}/isochrones"},{"location":"expert/android/api/GraphicalIsochroneApi/#getcoveragelonlatisochrones","title":"getCoverageLonLatIsochrones","text":""},{"location":"expert/android/api/GraphicalIsochroneApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime LocalDateTime Date and time to go/arrive (see <code>datetime_represents</code>). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode List Force the first section mode if the first section is not a public transport one. <code>bss</code> stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing <code>bss</code> implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: <code>first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike</code> [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] lastSectionMode List Same as first_section_mode but for the last section. [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris List If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId List If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for <code>allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus</code>, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Boolean DEPRECATED, replaced by <code>data_freshness</code>. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: <code>disruption_active=true</code> &lt;=&gt; <code>data_freshness=realtime</code> [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter <code>&amp;data_freshness=base_schedule</code> you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a <code>realtime</code> request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'realtime' - Use all realtime information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer <code>realtime</code> for traveler information as it will also contain adapted information schedule. [optional] [enum: base_schedule, realtime, adapted_schedule] maxDuration Int Maximum duration of journeys in seconds (from <code>datetime</code> parameter). More usefull when computing an isochrone (only <code>from</code> or <code>to</code> is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Boolean If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set <code>forbidden_uris[]</code>! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (<code>first_section_mode[]</code> and <code>last_section_mode[]</code>) and set them yourself. [optional] [enum: standard, slow_walker, fast_walker, luggage, wheelchair, cyclist, motorist] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode List Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] partnerServices List Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] criteria String choose the criteria used to compute pt journeys, feature in beta  [optional] [enum: classic, robustness, occupancy, arrival_stop_attractivity, departure_stop_attractivity, pseudo_duration] minDuration Int Minimum travel duration [optional] boundaryDuration List To provide multiple duration parameters [optional]"},{"location":"expert/android/api/GraphicalIsochroneApi/#return","title":"ReturnExample","text":"<p>GraphicalIsrochone1</p> <pre><code>ExpertSdk.getInstance().graphicalIsochroneApi.getCoverageLonLatIsochrones(\n    lon = 0.0,\n    lat = 0.0,\n    from = \"from_example\",\n    to = \"to_example\",\n    datetime = LocalDateTime.now(),\n    datetimeRepresents = \"datetimeRepresents_example\",\n    maxNbTransfers = 123,\n    minNbTransfers = 123,\n    firstSectionMode = listOf(),\n    lastSectionMode = listOf(),\n    maxDurationToPt = 123,\n    maxWalkingDurationToPt = 123,\n    maxBikeDurationToPt = 123,\n    maxBssDurationToPt = 123,\n    maxCarDurationToPt = 123,\n    maxRidesharingDurationToPt = 123,\n    maxCarNoParkDurationToPt = 123,\n    maxTaxiDurationToPt = 123,\n    walkingSpeed = 0f,\n    bikeSpeed = 0f,\n    bssSpeed = 0f,\n    carSpeed = 0f,\n    ridesharingSpeed = 0f,\n    carNoParkSpeed = 0f,\n    taxiSpeed = 0f,\n    forbiddenUris = listOf(),\n    allowedId = listOf(),\n    disruptionActive = true,\n    dataFreshness = \"dataFreshness_example\",\n    maxDuration = 123,\n    wheelchair = true,\n    travelerType = \"travelerType_example\",\n    directPath = \"directPath_example\",\n    freeRadiusFrom = 123,\n    freeRadiusTo = 123,\n    directPathMode = listOf(),\n    partnerServices = listOf(),\n    additionalTimeAfterFirstSectionTaxi = 123,\n    additionalTimeBeforeLastSectionTaxi = 123,\n    criteria = \"criteria_example\",\n    minDuration = 123,\n    boundaryDuration = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/GraphicalIsochroneApi/#getcoverageregionisochrones","title":"getCoverageRegionIsochrones","text":""},{"location":"expert/android/api/GraphicalIsochroneApi/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime LocalDateTime Date and time to go/arrive (see <code>datetime_represents</code>). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode List Force the first section mode if the first section is not a public transport one. <code>bss</code> stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing <code>bss</code> implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: <code>first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike</code> [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] lastSectionMode List Same as first_section_mode but for the last section. [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris List If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId List If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for <code>allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus</code>, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Boolean DEPRECATED, replaced by <code>data_freshness</code>. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: <code>disruption_active=true</code> &lt;=&gt; <code>data_freshness=realtime</code> [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter <code>&amp;data_freshness=base_schedule</code> you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a <code>realtime</code> request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'realtime' - Use all realtime information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer <code>realtime</code> for traveler information as it will also contain adapted information schedule. [optional] [enum: base_schedule, realtime, adapted_schedule] maxDuration Int Maximum duration of journeys in seconds (from <code>datetime</code> parameter). More usefull when computing an isochrone (only <code>from</code> or <code>to</code> is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Boolean If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set <code>forbidden_uris[]</code>! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (<code>first_section_mode[]</code> and <code>last_section_mode[]</code>) and set them yourself. [optional] [enum: standard, slow_walker, fast_walker, luggage, wheelchair, cyclist, motorist] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode List Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] partnerServices List Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] criteria String choose the criteria used to compute pt journeys, feature in beta  [optional] [enum: classic, robustness, occupancy, arrival_stop_attractivity, departure_stop_attractivity, pseudo_duration] minDuration Int Minimum travel duration [optional] boundaryDuration List To provide multiple duration parameters [optional]"},{"location":"expert/android/api/GraphicalIsochroneApi/#return_1","title":"ReturnExample","text":"<p>GraphicalIsrochone1</p> <pre><code>ExpertSdk.getInstance().graphicalIsochroneApi.getCoverageRegionIsochrones(\n    region = \"region_example\",\n    from = \"from_example\",\n    to = \"to_example\",\n    datetime = LocalDateTime.now(),\n    datetimeRepresents = \"datetimeRepresents_example\",\n    maxNbTransfers = 123,\n    minNbTransfers = 123,\n    firstSectionMode = listOf(),\n    lastSectionMode = listOf(),\n    maxDurationToPt = 123,\n    maxWalkingDurationToPt = 123,\n    maxBikeDurationToPt = 123,\n    maxBssDurationToPt = 123,\n    maxCarDurationToPt = 123,\n    maxRidesharingDurationToPt = 123,\n    maxCarNoParkDurationToPt = 123,\n    maxTaxiDurationToPt = 123,\n    walkingSpeed = 0f,\n    bikeSpeed = 0f,\n    bssSpeed = 0f,\n    carSpeed = 0f,\n    ridesharingSpeed = 0f,\n    carNoParkSpeed = 0f,\n    taxiSpeed = 0f,\n    forbiddenUris = listOf(),\n    allowedId = listOf(),\n    disruptionActive = true,\n    dataFreshness = \"dataFreshness_example\",\n    maxDuration = 123,\n    wheelchair = true,\n    travelerType = \"travelerType_example\",\n    directPath = \"directPath_example\",\n    freeRadiusFrom = 123,\n    freeRadiusTo = 123,\n    directPathMode = listOf(),\n    partnerServices = listOf(),\n    additionalTimeAfterFirstSectionTaxi = 123,\n    additionalTimeBeforeLastSectionTaxi = 123,\n    criteria = \"criteria_example\",\n    minDuration = 123,\n    boundaryDuration = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/HeatMapApi/","title":"HeatMapApi","text":"Method HTTP request getCoverageLonLatHeatMaps GET coverage/{lon};{lat}/heat_maps getCoverageRegionHeatMaps GET coverage/{region}/heat_maps"},{"location":"expert/android/api/HeatMapApi/#getcoveragelonlatheatmaps","title":"getCoverageLonLatHeatMaps","text":""},{"location":"expert/android/api/HeatMapApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime LocalDateTime Date and time to go/arrive (see <code>datetime_represents</code>). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode List Force the first section mode if the first section is not a public transport one. <code>bss</code> stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing <code>bss</code> implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: <code>first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike</code> [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] lastSectionMode List Same as first_section_mode but for the last section. [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris List If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId List If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for <code>allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus</code>, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Boolean DEPRECATED, replaced by <code>data_freshness</code>. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: <code>disruption_active=true</code> &lt;=&gt; <code>data_freshness=realtime</code> [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter <code>&amp;data_freshness=base_schedule</code> you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a <code>realtime</code> request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'realtime' - Use all realtime information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer <code>realtime</code> for traveler information as it will also contain adapted information schedule. [optional] [enum: base_schedule, realtime, adapted_schedule] maxDuration Int Maximum duration of journeys in seconds (from <code>datetime</code> parameter). More usefull when computing an isochrone (only <code>from</code> or <code>to</code> is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Boolean If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set <code>forbidden_uris[]</code>! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (<code>first_section_mode[]</code> and <code>last_section_mode[]</code>) and set them yourself. [optional] [enum: standard, slow_walker, fast_walker, luggage, wheelchair, cyclist, motorist] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode List Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] partnerServices List Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] criteria String choose the criteria used to compute pt journeys, feature in beta  [optional] [enum: classic, robustness, occupancy, arrival_stop_attractivity, departure_stop_attractivity, pseudo_duration] resolution Int Sampling resolution [optional] [default to 500]"},{"location":"expert/android/api/HeatMapApi/#return","title":"ReturnExample","text":"<p>HeatMap1</p> <pre><code>ExpertSdk.getInstance().heatMapApi.getCoverageLonLatHeatMaps(\n    lon = 0.0,\n    lat = 0.0,\n    from = \"from_example\",\n    to = \"to_example\",\n    datetime = LocalDateTime.now(),\n    datetimeRepresents = \"datetimeRepresents_example\",\n    maxNbTransfers = 123,\n    minNbTransfers = 123,\n    firstSectionMode = listOf(),\n    lastSectionMode = listOf(),\n    maxDurationToPt = 123,\n    maxWalkingDurationToPt = 123,\n    maxBikeDurationToPt = 123,\n    maxBssDurationToPt = 123,\n    maxCarDurationToPt = 123,\n    maxRidesharingDurationToPt = 123,\n    maxCarNoParkDurationToPt = 123,\n    maxTaxiDurationToPt = 123,\n    walkingSpeed = 0f,\n    bikeSpeed = 0f,\n    bssSpeed = 0f,\n    carSpeed = 0f,\n    ridesharingSpeed = 0f,\n    carNoParkSpeed = 0f,\n    taxiSpeed = 0f,\n    forbiddenUris = listOf(),\n    allowedId = listOf(),\n    disruptionActive = true,\n    dataFreshness = \"dataFreshness_example\",\n    maxDuration = 123,\n    wheelchair = true,\n    travelerType = \"travelerType_example\",\n    directPath = \"directPath_example\",\n    freeRadiusFrom = 123,\n    freeRadiusTo = 123,\n    directPathMode = listOf(),\n    partnerServices = listOf(),\n    additionalTimeAfterFirstSectionTaxi = 123,\n    additionalTimeBeforeLastSectionTaxi = 123,\n    criteria = \"criteria_example\",\n    resolution = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/HeatMapApi/#getcoverageregionheatmaps","title":"getCoverageRegionHeatMaps","text":""},{"location":"expert/android/api/HeatMapApi/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime LocalDateTime Date and time to go/arrive (see <code>datetime_represents</code>). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode List Force the first section mode if the first section is not a public transport one. <code>bss</code> stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing <code>bss</code> implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: <code>first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike</code> [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] lastSectionMode List Same as first_section_mode but for the last section. [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris List If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId List If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for <code>allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus</code>, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Boolean DEPRECATED, replaced by <code>data_freshness</code>. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: <code>disruption_active=true</code> &lt;=&gt; <code>data_freshness=realtime</code> [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter <code>&amp;data_freshness=base_schedule</code> you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a <code>realtime</code> request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'realtime' - Use all realtime information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer <code>realtime</code> for traveler information as it will also contain adapted information schedule. [optional] [enum: base_schedule, realtime, adapted_schedule] maxDuration Int Maximum duration of journeys in seconds (from <code>datetime</code> parameter). More usefull when computing an isochrone (only <code>from</code> or <code>to</code> is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Boolean If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set <code>forbidden_uris[]</code>! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (<code>first_section_mode[]</code> and <code>last_section_mode[]</code>) and set them yourself. [optional] [enum: standard, slow_walker, fast_walker, luggage, wheelchair, cyclist, motorist] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode List Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] partnerServices List Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] criteria String choose the criteria used to compute pt journeys, feature in beta  [optional] [enum: classic, robustness, occupancy, arrival_stop_attractivity, departure_stop_attractivity, pseudo_duration] resolution Int Sampling resolution [optional] [default to 500]"},{"location":"expert/android/api/HeatMapApi/#return_1","title":"ReturnExample","text":"<p>HeatMap1</p> <pre><code>ExpertSdk.getInstance().heatMapApi.getCoverageRegionHeatMaps(\n    region = \"region_example\",\n    from = \"from_example\",\n    to = \"to_example\",\n    datetime = LocalDateTime.now(),\n    datetimeRepresents = \"datetimeRepresents_example\",\n    maxNbTransfers = 123,\n    minNbTransfers = 123,\n    firstSectionMode = listOf(),\n    lastSectionMode = listOf(),\n    maxDurationToPt = 123,\n    maxWalkingDurationToPt = 123,\n    maxBikeDurationToPt = 123,\n    maxBssDurationToPt = 123,\n    maxCarDurationToPt = 123,\n    maxRidesharingDurationToPt = 123,\n    maxCarNoParkDurationToPt = 123,\n    maxTaxiDurationToPt = 123,\n    walkingSpeed = 0f,\n    bikeSpeed = 0f,\n    bssSpeed = 0f,\n    carSpeed = 0f,\n    ridesharingSpeed = 0f,\n    carNoParkSpeed = 0f,\n    taxiSpeed = 0f,\n    forbiddenUris = listOf(),\n    allowedId = listOf(),\n    disruptionActive = true,\n    dataFreshness = \"dataFreshness_example\",\n    maxDuration = 123,\n    wheelchair = true,\n    travelerType = \"travelerType_example\",\n    directPath = \"directPath_example\",\n    freeRadiusFrom = 123,\n    freeRadiusTo = 123,\n    directPathMode = listOf(),\n    partnerServices = listOf(),\n    additionalTimeAfterFirstSectionTaxi = 123,\n    additionalTimeBeforeLastSectionTaxi = 123,\n    criteria = \"criteria_example\",\n    resolution = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternPointsApi/","title":"JourneyPatternPointsApi","text":"Method HTTP request getCoverageLonLatJourneyPatternPoints GET coverage/{lon};{lat}/journey_pattern_points getCoverageLonLatJourneyPatternPointsId GET coverage/{lon};{lat}/journey_pattern_points/{id} getCoverageLonLatUriJourneyPatternPoints GET coverage/{lon};{lat}/{uri}/journey_pattern_points getCoverageLonLatUriJourneyPatternPointsId GET coverage/{lon};{lat}/{uri}/journey_pattern_points/{id} getCoverageRegionJourneyPatternPoints GET coverage/{region}/journey_pattern_points getCoverageRegionJourneyPatternPointsId GET coverage/{region}/journey_pattern_points/{id} getCoverageRegionUriJourneyPatternPoints GET coverage/{region}/{uri}/journey_pattern_points getCoverageRegionUriJourneyPatternPointsId GET coverage/{region}/{uri}/journey_pattern_points/{id}"},{"location":"expert/android/api/JourneyPatternPointsApi/#getcoveragelonlatjourneypatternpoints","title":"getCoverageLonLatJourneyPatternPoints","text":""},{"location":"expert/android/api/JourneyPatternPointsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternPointsApi/#return","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>ExpertSdk.getInstance().journeyPatternPointsApi.getCoverageLonLatJourneyPatternPoints(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternPointsApi/#getcoveragelonlatjourneypatternpointsid","title":"getCoverageLonLatJourneyPatternPointsId","text":""},{"location":"expert/android/api/JourneyPatternPointsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternPointsApi/#return_1","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>ExpertSdk.getInstance().journeyPatternPointsApi.getCoverageLonLatJourneyPatternPointsId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternPointsApi/#getcoveragelonlaturijourneypatternpoints","title":"getCoverageLonLatUriJourneyPatternPoints","text":""},{"location":"expert/android/api/JourneyPatternPointsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternPointsApi/#return_2","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>ExpertSdk.getInstance().journeyPatternPointsApi.getCoverageLonLatUriJourneyPatternPoints(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternPointsApi/#getcoveragelonlaturijourneypatternpointsid","title":"getCoverageLonLatUriJourneyPatternPointsId","text":""},{"location":"expert/android/api/JourneyPatternPointsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternPointsApi/#return_3","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>ExpertSdk.getInstance().journeyPatternPointsApi.getCoverageLonLatUriJourneyPatternPointsId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternPointsApi/#getcoverageregionjourneypatternpoints","title":"getCoverageRegionJourneyPatternPoints","text":""},{"location":"expert/android/api/JourneyPatternPointsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternPointsApi/#return_4","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>ExpertSdk.getInstance().journeyPatternPointsApi.getCoverageRegionJourneyPatternPoints(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternPointsApi/#getcoverageregionjourneypatternpointsid","title":"getCoverageRegionJourneyPatternPointsId","text":""},{"location":"expert/android/api/JourneyPatternPointsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternPointsApi/#return_5","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>ExpertSdk.getInstance().journeyPatternPointsApi.getCoverageRegionJourneyPatternPointsId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternPointsApi/#getcoverageregionurijourneypatternpoints","title":"getCoverageRegionUriJourneyPatternPoints","text":""},{"location":"expert/android/api/JourneyPatternPointsApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternPointsApi/#return_6","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>ExpertSdk.getInstance().journeyPatternPointsApi.getCoverageRegionUriJourneyPatternPoints(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternPointsApi/#getcoverageregionurijourneypatternpointsid","title":"getCoverageRegionUriJourneyPatternPointsId","text":""},{"location":"expert/android/api/JourneyPatternPointsApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternPointsApi/#return_7","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>ExpertSdk.getInstance().journeyPatternPointsApi.getCoverageRegionUriJourneyPatternPointsId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternsApi/","title":"JourneyPatternsApi","text":"Method HTTP request getCoverageLonLatJourneyPatterns GET coverage/{lon};{lat}/journey_patterns getCoverageLonLatJourneyPatternsId GET coverage/{lon};{lat}/journey_patterns/{id} getCoverageLonLatUriJourneyPatterns GET coverage/{lon};{lat}/{uri}/journey_patterns getCoverageLonLatUriJourneyPatternsId GET coverage/{lon};{lat}/{uri}/journey_patterns/{id} getCoverageRegionJourneyPatterns GET coverage/{region}/journey_patterns getCoverageRegionJourneyPatternsId GET coverage/{region}/journey_patterns/{id} getCoverageRegionUriJourneyPatterns GET coverage/{region}/{uri}/journey_patterns getCoverageRegionUriJourneyPatternsId GET coverage/{region}/{uri}/journey_patterns/{id}"},{"location":"expert/android/api/JourneyPatternsApi/#getcoveragelonlatjourneypatterns","title":"getCoverageLonLatJourneyPatterns","text":""},{"location":"expert/android/api/JourneyPatternsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternsApi/#return","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>ExpertSdk.getInstance().journeyPatternsApi.getCoverageLonLatJourneyPatterns(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternsApi/#getcoveragelonlatjourneypatternsid","title":"getCoverageLonLatJourneyPatternsId","text":""},{"location":"expert/android/api/JourneyPatternsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternsApi/#return_1","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>ExpertSdk.getInstance().journeyPatternsApi.getCoverageLonLatJourneyPatternsId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternsApi/#getcoveragelonlaturijourneypatterns","title":"getCoverageLonLatUriJourneyPatterns","text":""},{"location":"expert/android/api/JourneyPatternsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternsApi/#return_2","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>ExpertSdk.getInstance().journeyPatternsApi.getCoverageLonLatUriJourneyPatterns(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternsApi/#getcoveragelonlaturijourneypatternsid","title":"getCoverageLonLatUriJourneyPatternsId","text":""},{"location":"expert/android/api/JourneyPatternsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternsApi/#return_3","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>ExpertSdk.getInstance().journeyPatternsApi.getCoverageLonLatUriJourneyPatternsId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternsApi/#getcoverageregionjourneypatterns","title":"getCoverageRegionJourneyPatterns","text":""},{"location":"expert/android/api/JourneyPatternsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternsApi/#return_4","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>ExpertSdk.getInstance().journeyPatternsApi.getCoverageRegionJourneyPatterns(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternsApi/#getcoverageregionjourneypatternsid","title":"getCoverageRegionJourneyPatternsId","text":""},{"location":"expert/android/api/JourneyPatternsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternsApi/#return_5","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>ExpertSdk.getInstance().journeyPatternsApi.getCoverageRegionJourneyPatternsId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternsApi/#getcoverageregionurijourneypatterns","title":"getCoverageRegionUriJourneyPatterns","text":""},{"location":"expert/android/api/JourneyPatternsApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternsApi/#return_6","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>ExpertSdk.getInstance().journeyPatternsApi.getCoverageRegionUriJourneyPatterns(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneyPatternsApi/#getcoverageregionurijourneypatternsid","title":"getCoverageRegionUriJourneyPatternsId","text":""},{"location":"expert/android/api/JourneyPatternsApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/JourneyPatternsApi/#return_7","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>ExpertSdk.getInstance().journeyPatternsApi.getCoverageRegionUriJourneyPatternsId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneysApi/","title":"JourneysApi","text":"Method HTTP request getCoverageLonLatJourneys GET coverage/{lon};{lat}/journeys getCoverageRegionJourneys GET coverage/{region}/journeys getJourneys GET journeys"},{"location":"expert/android/api/JourneysApi/#getcoveragelonlatjourneys","title":"getCoverageLonLatJourneys","text":""},{"location":"expert/android/api/JourneysApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime LocalDateTime Date and time to go/arrive (see <code>datetime_represents</code>). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode List Force the first section mode if the first section is not a public transport one. <code>bss</code> stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing <code>bss</code> implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: <code>first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike</code> [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] lastSectionMode List Same as first_section_mode but for the last section. [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris List If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId List If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for <code>allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus</code>, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Boolean DEPRECATED, replaced by <code>data_freshness</code>. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: <code>disruption_active=true</code> &lt;=&gt; <code>data_freshness=realtime</code> [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter <code>&amp;data_freshness=base_schedule</code> you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a <code>realtime</code> request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'realtime' - Use all realtime information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer <code>realtime</code> for traveler information as it will also contain adapted information schedule. [optional] [enum: base_schedule, realtime, adapted_schedule] maxDuration Int Maximum duration of journeys in seconds (from <code>datetime</code> parameter). More usefull when computing an isochrone (only <code>from</code> or <code>to</code> is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Boolean If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set <code>forbidden_uris[]</code>! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (<code>first_section_mode[]</code> and <code>last_section_mode[]</code>) and set them yourself. [optional] [enum: standard, slow_walker, fast_walker, luggage, wheelchair, cyclist, motorist] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode List Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] partnerServices List Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] criteria String choose the criteria used to compute pt journeys, feature in beta  [optional] [enum: classic, robustness, occupancy, arrival_stop_attractivity, departure_stop_attractivity, pseudo_duration] count Int Fixed number of different journeys [optional] isJourneySchedules Boolean True when '/journeys' is called to computethe same journey schedules and it'll override some specific parameters [optional] minNbJourneys Int Minimum number of different suggested journeys, must be &gt;= 0 [optional] maxNbJourneys Int Maximum number of different suggested journeys, must be &gt; 0 [optional] bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of response [optional] [enum: bss_stands, car_park, , none] timeframeDuration Int Minimum timeframe to search journeys. For example 'timeframe_duration=3600' will search for all interesting journeys departing within the next hour. Nota 1: Navitia can return journeys after that timeframe as it's actually a minimum. Nota 2: 'max_nb_journeys' parameter has priority over 'timeframe_duration' parameter. [optional] language String Here, select a specific language for guidance instruction. list available: - nl-NL = dutch - en-US equipmentDetails Boolean enhance response with accessibility equipement details [optional] [default to True] maxBssDirectPathDuration Int limit duration of direct path in bss, used ONLY in distributed scenario [optional] maxCarNoParkDirectPathDuration Int limit duration of direct path in car_no_park, used ONLY in distributed scenario [optional] maxCarDirectPathDuration Int limit duration of direct path in car, used ONLY in distributed scenario [optional] maxBikeDirectPathDuration Int limit duration of direct path in bike, used ONLY in distributed scenario [optional] maxRidesharingDirectPathDuration Int limit duration of direct path in ridesharing, used ONLY in distributed scenario [optional] maxWalkingDirectPathDuration Int limit duration of direct path in walking, used ONLY in distributed scenario [optional] maxTaxiDirectPathDuration Int limit duration of direct path in taxi, used ONLY in distributed scenario [optional] depth Int The depth of your object [optional] [default to 1] maxWaitingDuration Int A journey containing a waiting section with a duration greater or equal to  max_waiting_duration will be discarded. Units : seconds. Must be &gt; 0. Default value : 4h [optional]"},{"location":"expert/android/api/JourneysApi/#return","title":"ReturnExample","text":"<p>Journeys</p> <pre><code>ExpertSdk.getInstance().journeysApi.getCoverageLonLatJourneys(\n    lon = 0.0,\n    lat = 0.0,\n    from = \"from_example\",\n    to = \"to_example\",\n    datetime = LocalDateTime.now(),\n    datetimeRepresents = \"datetimeRepresents_example\",\n    maxNbTransfers = 123,\n    minNbTransfers = 123,\n    firstSectionMode = listOf(),\n    lastSectionMode = listOf(),\n    maxDurationToPt = 123,\n    maxWalkingDurationToPt = 123,\n    maxBikeDurationToPt = 123,\n    maxBssDurationToPt = 123,\n    maxCarDurationToPt = 123,\n    maxRidesharingDurationToPt = 123,\n    maxCarNoParkDurationToPt = 123,\n    maxTaxiDurationToPt = 123,\n    walkingSpeed = 0f,\n    bikeSpeed = 0f,\n    bssSpeed = 0f,\n    carSpeed = 0f,\n    ridesharingSpeed = 0f,\n    carNoParkSpeed = 0f,\n    taxiSpeed = 0f,\n    forbiddenUris = listOf(),\n    allowedId = listOf(),\n    disruptionActive = true,\n    dataFreshness = \"dataFreshness_example\",\n    maxDuration = 123,\n    wheelchair = true,\n    travelerType = \"travelerType_example\",\n    directPath = \"directPath_example\",\n    freeRadiusFrom = 123,\n    freeRadiusTo = 123,\n    directPathMode = listOf(),\n    partnerServices = listOf(),\n    additionalTimeAfterFirstSectionTaxi = 123,\n    additionalTimeBeforeLastSectionTaxi = 123,\n    criteria = \"criteria_example\",\n    count = 123,\n    isJourneySchedules = true,\n    minNbJourneys = 123,\n    maxNbJourneys = 123,\n    bssStands = true,\n    addPoiInfos = listOf(),\n    timeframeDuration = 123,\n    language = \"language_example\",\n    equipmentDetails = true,\n    maxBssDirectPathDuration = 123,\n    maxCarNoParkDirectPathDuration = 123,\n    maxCarDirectPathDuration = 123,\n    maxBikeDirectPathDuration = 123,\n    maxRidesharingDirectPathDuration = 123,\n    maxWalkingDirectPathDuration = 123,\n    maxTaxiDirectPathDuration = 123,\n    depth = 123,\n    maxWaitingDuration = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneysApi/#getcoverageregionjourneys","title":"getCoverageRegionJourneys","text":""},{"location":"expert/android/api/JourneysApi/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime LocalDateTime Date and time to go/arrive (see <code>datetime_represents</code>). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode List Force the first section mode if the first section is not a public transport one. <code>bss</code> stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing <code>bss</code> implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: <code>first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike</code> [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] lastSectionMode List Same as first_section_mode but for the last section. [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris List If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId List If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for <code>allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus</code>, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Boolean DEPRECATED, replaced by <code>data_freshness</code>. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: <code>disruption_active=true</code> &lt;=&gt; <code>data_freshness=realtime</code> [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter <code>&amp;data_freshness=base_schedule</code> you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a <code>realtime</code> request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'realtime' - Use all realtime information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer <code>realtime</code> for traveler information as it will also contain adapted information schedule. [optional] [enum: base_schedule, realtime, adapted_schedule] maxDuration Int Maximum duration of journeys in seconds (from <code>datetime</code> parameter). More usefull when computing an isochrone (only <code>from</code> or <code>to</code> is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Boolean If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set <code>forbidden_uris[]</code>! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (<code>first_section_mode[]</code> and <code>last_section_mode[]</code>) and set them yourself. [optional] [enum: standard, slow_walker, fast_walker, luggage, wheelchair, cyclist, motorist] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode List Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] partnerServices List Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] criteria String choose the criteria used to compute pt journeys, feature in beta  [optional] [enum: classic, robustness, occupancy, arrival_stop_attractivity, departure_stop_attractivity, pseudo_duration] count Int Fixed number of different journeys [optional] isJourneySchedules Boolean True when '/journeys' is called to computethe same journey schedules and it'll override some specific parameters [optional] minNbJourneys Int Minimum number of different suggested journeys, must be &gt;= 0 [optional] maxNbJourneys Int Maximum number of different suggested journeys, must be &gt; 0 [optional] bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of response [optional] [enum: bss_stands, car_park, , none] timeframeDuration Int Minimum timeframe to search journeys. For example 'timeframe_duration=3600' will search for all interesting journeys departing within the next hour. Nota 1: Navitia can return journeys after that timeframe as it's actually a minimum. Nota 2: 'max_nb_journeys' parameter has priority over 'timeframe_duration' parameter. [optional] language String Here, select a specific language for guidance instruction. list available: - nl-NL = dutch - en-US equipmentDetails Boolean enhance response with accessibility equipement details [optional] [default to True] maxBssDirectPathDuration Int limit duration of direct path in bss, used ONLY in distributed scenario [optional] maxCarNoParkDirectPathDuration Int limit duration of direct path in car_no_park, used ONLY in distributed scenario [optional] maxCarDirectPathDuration Int limit duration of direct path in car, used ONLY in distributed scenario [optional] maxBikeDirectPathDuration Int limit duration of direct path in bike, used ONLY in distributed scenario [optional] maxRidesharingDirectPathDuration Int limit duration of direct path in ridesharing, used ONLY in distributed scenario [optional] maxWalkingDirectPathDuration Int limit duration of direct path in walking, used ONLY in distributed scenario [optional] maxTaxiDirectPathDuration Int limit duration of direct path in taxi, used ONLY in distributed scenario [optional] depth Int The depth of your object [optional] [default to 1] maxWaitingDuration Int A journey containing a waiting section with a duration greater or equal to  max_waiting_duration will be discarded. Units : seconds. Must be &gt; 0. Default value : 4h [optional]"},{"location":"expert/android/api/JourneysApi/#return_1","title":"ReturnExample","text":"<p>Journeys</p> <pre><code>ExpertSdk.getInstance().journeysApi.getCoverageRegionJourneys(\n    region = \"region_example\",\n    from = \"from_example\",\n    to = \"to_example\",\n    datetime = LocalDateTime.now(),\n    datetimeRepresents = \"datetimeRepresents_example\",\n    maxNbTransfers = 123,\n    minNbTransfers = 123,\n    firstSectionMode = listOf(),\n    lastSectionMode = listOf(),\n    maxDurationToPt = 123,\n    maxWalkingDurationToPt = 123,\n    maxBikeDurationToPt = 123,\n    maxBssDurationToPt = 123,\n    maxCarDurationToPt = 123,\n    maxRidesharingDurationToPt = 123,\n    maxCarNoParkDurationToPt = 123,\n    maxTaxiDurationToPt = 123,\n    walkingSpeed = 0f,\n    bikeSpeed = 0f,\n    bssSpeed = 0f,\n    carSpeed = 0f,\n    ridesharingSpeed = 0f,\n    carNoParkSpeed = 0f,\n    taxiSpeed = 0f,\n    forbiddenUris = listOf(),\n    allowedId = listOf(),\n    disruptionActive = true,\n    dataFreshness = \"dataFreshness_example\",\n    maxDuration = 123,\n    wheelchair = true,\n    travelerType = \"travelerType_example\",\n    directPath = \"directPath_example\",\n    freeRadiusFrom = 123,\n    freeRadiusTo = 123,\n    directPathMode = listOf(),\n    partnerServices = listOf(),\n    additionalTimeAfterFirstSectionTaxi = 123,\n    additionalTimeBeforeLastSectionTaxi = 123,\n    criteria = \"criteria_example\",\n    count = 123,\n    isJourneySchedules = true,\n    minNbJourneys = 123,\n    maxNbJourneys = 123,\n    bssStands = true,\n    addPoiInfos = listOf(),\n    timeframeDuration = 123,\n    language = \"language_example\",\n    equipmentDetails = true,\n    maxBssDirectPathDuration = 123,\n    maxCarNoParkDirectPathDuration = 123,\n    maxCarDirectPathDuration = 123,\n    maxBikeDirectPathDuration = 123,\n    maxRidesharingDirectPathDuration = 123,\n    maxWalkingDirectPathDuration = 123,\n    maxTaxiDirectPathDuration = 123,\n    depth = 123,\n    maxWaitingDuration = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/JourneysApi/#getjourneys","title":"getJourneys","text":""},{"location":"expert/android/api/JourneysApi/#parameters_2","title":"Parameters","text":"Name Type Note from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime LocalDateTime Date and time to go/arrive (see <code>datetime_represents</code>). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode List Force the first section mode if the first section is not a public transport one. <code>bss</code> stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing <code>bss</code> implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: <code>first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike</code> [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] lastSectionMode List Same as first_section_mode but for the last section. [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris List If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId List If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for <code>allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus</code>, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Boolean DEPRECATED, replaced by <code>data_freshness</code>. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: <code>disruption_active=true</code> &lt;=&gt; <code>data_freshness=realtime</code> [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter <code>&amp;data_freshness=base_schedule</code> you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a <code>realtime</code> request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'realtime' - Use all realtime information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer <code>realtime</code> for traveler information as it will also contain adapted information schedule. [optional] [enum: base_schedule, realtime, adapted_schedule] maxDuration Int Maximum duration of journeys in seconds (from <code>datetime</code> parameter). More usefull when computing an isochrone (only <code>from</code> or <code>to</code> is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Boolean If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set <code>forbidden_uris[]</code>! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (<code>first_section_mode[]</code> and <code>last_section_mode[]</code>) and set them yourself. [optional] [enum: standard, slow_walker, fast_walker, luggage, wheelchair, cyclist, motorist] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode List Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: bss, car_no_park, car, bike, ridesharing, walking, taxi] partnerServices List Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] criteria String choose the criteria used to compute pt journeys, feature in beta  [optional] [enum: classic, robustness, occupancy, arrival_stop_attractivity, departure_stop_attractivity, pseudo_duration] count Int Fixed number of different journeys [optional] isJourneySchedules Boolean True when '/journeys' is called to computethe same journey schedules and it'll override some specific parameters [optional] minNbJourneys Int Minimum number of different suggested journeys, must be &gt;= 0 [optional] maxNbJourneys Int Maximum number of different suggested journeys, must be &gt; 0 [optional] bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of response [optional] [enum: bss_stands, car_park, , none] timeframeDuration Int Minimum timeframe to search journeys. For example 'timeframe_duration=3600' will search for all interesting journeys departing within the next hour. Nota 1: Navitia can return journeys after that timeframe as it's actually a minimum. Nota 2: 'max_nb_journeys' parameter has priority over 'timeframe_duration' parameter. [optional] language String Here, select a specific language for guidance instruction. list available: - nl-NL = dutch - en-US equipmentDetails Boolean enhance response with accessibility equipement details [optional] [default to True] maxBssDirectPathDuration Int limit duration of direct path in bss, used ONLY in distributed scenario [optional] maxCarNoParkDirectPathDuration Int limit duration of direct path in car_no_park, used ONLY in distributed scenario [optional] maxCarDirectPathDuration Int limit duration of direct path in car, used ONLY in distributed scenario [optional] maxBikeDirectPathDuration Int limit duration of direct path in bike, used ONLY in distributed scenario [optional] maxRidesharingDirectPathDuration Int limit duration of direct path in ridesharing, used ONLY in distributed scenario [optional] maxWalkingDirectPathDuration Int limit duration of direct path in walking, used ONLY in distributed scenario [optional] maxTaxiDirectPathDuration Int limit duration of direct path in taxi, used ONLY in distributed scenario [optional] depth Int The depth of your object [optional] [default to 1] maxWaitingDuration Int A journey containing a waiting section with a duration greater or equal to  max_waiting_duration will be discarded. Units : seconds. Must be &gt; 0. Default value : 4h [optional]"},{"location":"expert/android/api/JourneysApi/#return_2","title":"ReturnExample","text":"<p>Journeys</p> <pre><code>ExpertSdk.getInstance().journeysApi.getJourneys(\n    from = \"from_example\",\n    to = \"to_example\",\n    datetime = LocalDateTime.now(),\n    datetimeRepresents = \"datetimeRepresents_example\",\n    maxNbTransfers = 123,\n    minNbTransfers = 123,\n    firstSectionMode = listOf(),\n    lastSectionMode = listOf(),\n    maxDurationToPt = 123,\n    maxWalkingDurationToPt = 123,\n    maxBikeDurationToPt = 123,\n    maxBssDurationToPt = 123,\n    maxCarDurationToPt = 123,\n    maxRidesharingDurationToPt = 123,\n    maxCarNoParkDurationToPt = 123,\n    maxTaxiDurationToPt = 123,\n    walkingSpeed = 0f,\n    bikeSpeed = 0f,\n    bssSpeed = 0f,\n    carSpeed = 0f,\n    ridesharingSpeed = 0f,\n    carNoParkSpeed = 0f,\n    taxiSpeed = 0f,\n    forbiddenUris = listOf(),\n    allowedId = listOf(),\n    disruptionActive = true,\n    dataFreshness = \"dataFreshness_example\",\n    maxDuration = 123,\n    wheelchair = true,\n    travelerType = \"travelerType_example\",\n    directPath = \"directPath_example\",\n    freeRadiusFrom = 123,\n    freeRadiusTo = 123,\n    directPathMode = listOf(),\n    partnerServices = listOf(),\n    additionalTimeAfterFirstSectionTaxi = 123,\n    additionalTimeBeforeLastSectionTaxi = 123,\n    criteria = \"criteria_example\",\n    count = 123,\n    isJourneySchedules = true,\n    minNbJourneys = 123,\n    maxNbJourneys = 123,\n    bssStands = true,\n    addPoiInfos = listOf(),\n    timeframeDuration = 123,\n    language = \"language_example\",\n    equipmentDetails = true,\n    maxBssDirectPathDuration = 123,\n    maxCarNoParkDirectPathDuration = 123,\n    maxCarDirectPathDuration = 123,\n    maxBikeDirectPathDuration = 123,\n    maxRidesharingDirectPathDuration = 123,\n    maxWalkingDirectPathDuration = 123,\n    maxTaxiDirectPathDuration = 123,\n    depth = 123,\n    maxWaitingDuration = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineGroupsApi/","title":"LineGroupsApi","text":"Method HTTP request getCoverageLonLatLineGroups GET coverage/{lon};{lat}/line_groups getCoverageLonLatLineGroupsId GET coverage/{lon};{lat}/line_groups/{id} getCoverageLonLatUriLineGroups GET coverage/{lon};{lat}/{uri}/line_groups getCoverageLonLatUriLineGroupsId GET coverage/{lon};{lat}/{uri}/line_groups/{id} getCoverageRegionLineGroups GET coverage/{region}/line_groups getCoverageRegionLineGroupsId GET coverage/{region}/line_groups/{id} getCoverageRegionUriLineGroups GET coverage/{region}/{uri}/line_groups getCoverageRegionUriLineGroupsId GET coverage/{region}/{uri}/line_groups/{id} getLineGroups GET line_groups"},{"location":"expert/android/api/LineGroupsApi/#getcoveragelonlatlinegroups","title":"getCoverageLonLatLineGroups","text":""},{"location":"expert/android/api/LineGroupsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LineGroupsApi/#return","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>ExpertSdk.getInstance().lineGroupsApi.getCoverageLonLatLineGroups(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineGroupsApi/#getcoveragelonlatlinegroupsid","title":"getCoverageLonLatLineGroupsId","text":""},{"location":"expert/android/api/LineGroupsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LineGroupsApi/#return_1","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>ExpertSdk.getInstance().lineGroupsApi.getCoverageLonLatLineGroupsId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineGroupsApi/#getcoveragelonlaturilinegroups","title":"getCoverageLonLatUriLineGroups","text":""},{"location":"expert/android/api/LineGroupsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LineGroupsApi/#return_2","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>ExpertSdk.getInstance().lineGroupsApi.getCoverageLonLatUriLineGroups(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineGroupsApi/#getcoveragelonlaturilinegroupsid","title":"getCoverageLonLatUriLineGroupsId","text":""},{"location":"expert/android/api/LineGroupsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LineGroupsApi/#return_3","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>ExpertSdk.getInstance().lineGroupsApi.getCoverageLonLatUriLineGroupsId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineGroupsApi/#getcoverageregionlinegroups","title":"getCoverageRegionLineGroups","text":""},{"location":"expert/android/api/LineGroupsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LineGroupsApi/#return_4","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>ExpertSdk.getInstance().lineGroupsApi.getCoverageRegionLineGroups(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineGroupsApi/#getcoverageregionlinegroupsid","title":"getCoverageRegionLineGroupsId","text":""},{"location":"expert/android/api/LineGroupsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LineGroupsApi/#return_5","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>ExpertSdk.getInstance().lineGroupsApi.getCoverageRegionLineGroupsId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineGroupsApi/#getcoverageregionurilinegroups","title":"getCoverageRegionUriLineGroups","text":""},{"location":"expert/android/api/LineGroupsApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LineGroupsApi/#return_6","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>ExpertSdk.getInstance().lineGroupsApi.getCoverageRegionUriLineGroups(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineGroupsApi/#getcoverageregionurilinegroupsid","title":"getCoverageRegionUriLineGroupsId","text":""},{"location":"expert/android/api/LineGroupsApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LineGroupsApi/#return_7","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>ExpertSdk.getInstance().lineGroupsApi.getCoverageRegionUriLineGroupsId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineGroupsApi/#getlinegroups","title":"getLineGroups","text":""},{"location":"expert/android/api/LineGroupsApi/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LineGroupsApi/#return_8","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>ExpertSdk.getInstance().lineGroupsApi.getLineGroups(\n    externalCode = \"externalCode_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineReportsApi/","title":"LineReportsApi","text":"Method HTTP request getCoverageLonLatLineReports GET coverage/{lon};{lat}/line_reports getCoverageLonLatUriLineReports GET coverage/{lon};{lat}/{uri}/line_reports getCoverageRegionLineReports GET coverage/{region}/line_reports getCoverageRegionUriLineReports GET coverage/{region}/{uri}/line_reports"},{"location":"expert/android/api/LineReportsApi/#getcoveragelonlatlinereports","title":"getCoverageLonLatLineReports","text":""},{"location":"expert/android/api/LineReportsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional] disableGeojson Boolean remove geojson from the response [optional] since LocalDateTime use disruptions valid after this date [optional] until LocalDateTime use disruptions valid before this date [optional] filterStatus List filter_status uris [optional] [enum: past, active, future] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/LineReportsApi/#return","title":"ReturnExample","text":"<p>LineReports</p> <pre><code>ExpertSdk.getInstance().lineReportsApi.getCoverageLonLatLineReports(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenUris = listOf(),\n    disableGeojson = true,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    filterStatus = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineReportsApi/#getcoveragelonlaturilinereports","title":"getCoverageLonLatUriLineReports","text":""},{"location":"expert/android/api/LineReportsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional] disableGeojson Boolean remove geojson from the response [optional] since LocalDateTime use disruptions valid after this date [optional] until LocalDateTime use disruptions valid before this date [optional] filterStatus List filter_status uris [optional] [enum: past, active, future] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/LineReportsApi/#return_1","title":"ReturnExample","text":"<p>LineReports</p> <pre><code>ExpertSdk.getInstance().lineReportsApi.getCoverageLonLatUriLineReports(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenUris = listOf(),\n    disableGeojson = true,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    filterStatus = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineReportsApi/#getcoverageregionlinereports","title":"getCoverageRegionLineReports","text":""},{"location":"expert/android/api/LineReportsApi/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional] disableGeojson Boolean remove geojson from the response [optional] since LocalDateTime use disruptions valid after this date [optional] until LocalDateTime use disruptions valid before this date [optional] filterStatus List filter_status uris [optional] [enum: past, active, future] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/LineReportsApi/#return_2","title":"ReturnExample","text":"<p>LineReports</p> <pre><code>ExpertSdk.getInstance().lineReportsApi.getCoverageRegionLineReports(\n    region = \"region_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenUris = listOf(),\n    disableGeojson = true,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    filterStatus = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LineReportsApi/#getcoverageregionurilinereports","title":"getCoverageRegionUriLineReports","text":""},{"location":"expert/android/api/LineReportsApi/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional] disableGeojson Boolean remove geojson from the response [optional] since LocalDateTime use disruptions valid after this date [optional] until LocalDateTime use disruptions valid before this date [optional] filterStatus List filter_status uris [optional] [enum: past, active, future] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/LineReportsApi/#return_3","title":"ReturnExample","text":"<p>LineReports</p> <pre><code>ExpertSdk.getInstance().lineReportsApi.getCoverageRegionUriLineReports(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenUris = listOf(),\n    disableGeojson = true,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    filterStatus = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LinesApi/","title":"LinesApi","text":"Method HTTP request getCoverageLonLatLines GET coverage/{lon};{lat}/lines getCoverageLonLatLinesId GET coverage/{lon};{lat}/lines/{id} getCoverageLonLatUriLines GET coverage/{lon};{lat}/{uri}/lines getCoverageLonLatUriLinesId GET coverage/{lon};{lat}/{uri}/lines/{id} getCoverageRegionLines GET coverage/{region}/lines getCoverageRegionLinesId GET coverage/{region}/lines/{id} getCoverageRegionUriLines GET coverage/{region}/{uri}/lines getCoverageRegionUriLinesId GET coverage/{region}/{uri}/lines/{id} getLines GET lines"},{"location":"expert/android/api/LinesApi/#getcoveragelonlatlines","title":"getCoverageLonLatLines","text":""},{"location":"expert/android/api/LinesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LinesApi/#return","title":"ReturnExample","text":"<p>Lines</p> <pre><code>ExpertSdk.getInstance().linesApi.getCoverageLonLatLines(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LinesApi/#getcoveragelonlatlinesid","title":"getCoverageLonLatLinesId","text":""},{"location":"expert/android/api/LinesApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LinesApi/#return_1","title":"ReturnExample","text":"<p>Lines</p> <pre><code>ExpertSdk.getInstance().linesApi.getCoverageLonLatLinesId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LinesApi/#getcoveragelonlaturilines","title":"getCoverageLonLatUriLines","text":""},{"location":"expert/android/api/LinesApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LinesApi/#return_2","title":"ReturnExample","text":"<p>Lines</p> <pre><code>ExpertSdk.getInstance().linesApi.getCoverageLonLatUriLines(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LinesApi/#getcoveragelonlaturilinesid","title":"getCoverageLonLatUriLinesId","text":""},{"location":"expert/android/api/LinesApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LinesApi/#return_3","title":"ReturnExample","text":"<p>Lines</p> <pre><code>ExpertSdk.getInstance().linesApi.getCoverageLonLatUriLinesId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LinesApi/#getcoverageregionlines","title":"getCoverageRegionLines","text":""},{"location":"expert/android/api/LinesApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LinesApi/#return_4","title":"ReturnExample","text":"<p>Lines</p> <pre><code>ExpertSdk.getInstance().linesApi.getCoverageRegionLines(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LinesApi/#getcoverageregionlinesid","title":"getCoverageRegionLinesId","text":""},{"location":"expert/android/api/LinesApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LinesApi/#return_5","title":"ReturnExample","text":"<p>Lines</p> <pre><code>ExpertSdk.getInstance().linesApi.getCoverageRegionLinesId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LinesApi/#getcoverageregionurilines","title":"getCoverageRegionUriLines","text":""},{"location":"expert/android/api/LinesApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LinesApi/#return_6","title":"ReturnExample","text":"<p>Lines</p> <pre><code>ExpertSdk.getInstance().linesApi.getCoverageRegionUriLines(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LinesApi/#getcoverageregionurilinesid","title":"getCoverageRegionUriLinesId","text":""},{"location":"expert/android/api/LinesApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LinesApi/#return_7","title":"ReturnExample","text":"<p>Lines</p> <pre><code>ExpertSdk.getInstance().linesApi.getCoverageRegionUriLinesId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/LinesApi/#getlines","title":"getLines","text":""},{"location":"expert/android/api/LinesApi/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/LinesApi/#return_8","title":"ReturnExample","text":"<p>Lines</p> <pre><code>ExpertSdk.getInstance().linesApi.getLines(\n    externalCode = \"externalCode_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NetworksApi/","title":"NetworksApi","text":"Method HTTP request getCoverageLonLatNetworks GET coverage/{lon};{lat}/networks getCoverageLonLatNetworksId GET coverage/{lon};{lat}/networks/{id} getCoverageLonLatUriNetworks GET coverage/{lon};{lat}/{uri}/networks getCoverageLonLatUriNetworksId GET coverage/{lon};{lat}/{uri}/networks/{id} getCoverageRegionNetworks GET coverage/{region}/networks getCoverageRegionNetworksId GET coverage/{region}/networks/{id} getCoverageRegionUriNetworks GET coverage/{region}/{uri}/networks getCoverageRegionUriNetworksId GET coverage/{region}/{uri}/networks/{id} getNetworks GET networks"},{"location":"expert/android/api/NetworksApi/#getcoveragelonlatnetworks","title":"getCoverageLonLatNetworks","text":""},{"location":"expert/android/api/NetworksApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/NetworksApi/#return","title":"ReturnExample","text":"<p>Networks</p> <pre><code>ExpertSdk.getInstance().networksApi.getCoverageLonLatNetworks(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NetworksApi/#getcoveragelonlatnetworksid","title":"getCoverageLonLatNetworksId","text":""},{"location":"expert/android/api/NetworksApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/NetworksApi/#return_1","title":"ReturnExample","text":"<p>Networks</p> <pre><code>ExpertSdk.getInstance().networksApi.getCoverageLonLatNetworksId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NetworksApi/#getcoveragelonlaturinetworks","title":"getCoverageLonLatUriNetworks","text":""},{"location":"expert/android/api/NetworksApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/NetworksApi/#return_2","title":"ReturnExample","text":"<p>Networks</p> <pre><code>ExpertSdk.getInstance().networksApi.getCoverageLonLatUriNetworks(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NetworksApi/#getcoveragelonlaturinetworksid","title":"getCoverageLonLatUriNetworksId","text":""},{"location":"expert/android/api/NetworksApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/NetworksApi/#return_3","title":"ReturnExample","text":"<p>Networks</p> <pre><code>ExpertSdk.getInstance().networksApi.getCoverageLonLatUriNetworksId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NetworksApi/#getcoverageregionnetworks","title":"getCoverageRegionNetworks","text":""},{"location":"expert/android/api/NetworksApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/NetworksApi/#return_4","title":"ReturnExample","text":"<p>Networks</p> <pre><code>ExpertSdk.getInstance().networksApi.getCoverageRegionNetworks(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NetworksApi/#getcoverageregionnetworksid","title":"getCoverageRegionNetworksId","text":""},{"location":"expert/android/api/NetworksApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/NetworksApi/#return_5","title":"ReturnExample","text":"<p>Networks</p> <pre><code>ExpertSdk.getInstance().networksApi.getCoverageRegionNetworksId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NetworksApi/#getcoverageregionurinetworks","title":"getCoverageRegionUriNetworks","text":""},{"location":"expert/android/api/NetworksApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/NetworksApi/#return_6","title":"ReturnExample","text":"<p>Networks</p> <pre><code>ExpertSdk.getInstance().networksApi.getCoverageRegionUriNetworks(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NetworksApi/#getcoverageregionurinetworksid","title":"getCoverageRegionUriNetworksId","text":""},{"location":"expert/android/api/NetworksApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/NetworksApi/#return_7","title":"ReturnExample","text":"<p>Networks</p> <pre><code>ExpertSdk.getInstance().networksApi.getCoverageRegionUriNetworksId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NetworksApi/#getnetworks","title":"getNetworks","text":""},{"location":"expert/android/api/NetworksApi/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/NetworksApi/#return_8","title":"ReturnExample","text":"<p>Networks</p> <pre><code>ExpertSdk.getInstance().networksApi.getNetworks(\n    externalCode = \"externalCode_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NextArrivalsApi/","title":"NextArrivalsApi","text":"Method HTTP request getCoverageLonLatArrivals GET coverage/{lon};{lat}/arrivals getCoverageLonLatUriArrivals GET coverage/{lon};{lat}/{uri}/arrivals getCoverageRegionArrivals GET coverage/{region}/arrivals getCoverageRegionUriArrivals GET coverage/{region}/{uri}/arrivals"},{"location":"expert/android/api/NextArrivalsApi/#getcoveragelonlatarrivals","title":"getCoverageLonLatArrivals","text":""},{"location":"expert/android/api/NextArrivalsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/NextArrivalsApi/#return","title":"ReturnExample","text":"<p>Arrivals</p> <pre><code>ExpertSdk.getInstance().nextArrivalsApi.getCoverageLonLatArrivals(\n    lon = 0.0,\n    lat = 0.0,\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NextArrivalsApi/#getcoveragelonlaturiarrivals","title":"getCoverageLonLatUriArrivals","text":""},{"location":"expert/android/api/NextArrivalsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/NextArrivalsApi/#return_1","title":"ReturnExample","text":"<p>Arrivals</p> <pre><code>ExpertSdk.getInstance().nextArrivalsApi.getCoverageLonLatUriArrivals(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NextArrivalsApi/#getcoverageregionarrivals","title":"getCoverageRegionArrivals","text":""},{"location":"expert/android/api/NextArrivalsApi/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/NextArrivalsApi/#return_2","title":"ReturnExample","text":"<p>Arrivals</p> <pre><code>ExpertSdk.getInstance().nextArrivalsApi.getCoverageRegionArrivals(\n    region = \"region_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NextArrivalsApi/#getcoverageregionuriarrivals","title":"getCoverageRegionUriArrivals","text":""},{"location":"expert/android/api/NextArrivalsApi/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/NextArrivalsApi/#return_3","title":"ReturnExample","text":"<p>Arrivals</p> <pre><code>ExpertSdk.getInstance().nextArrivalsApi.getCoverageRegionUriArrivals(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NextDeparturesApi/","title":"NextDeparturesApi","text":"Method HTTP request getCoverageLonLatDepartures GET coverage/{lon};{lat}/departures getCoverageLonLatUriDepartures GET coverage/{lon};{lat}/{uri}/departures getCoverageRegionDepartures GET coverage/{region}/departures getCoverageRegionUriDepartures GET coverage/{region}/{uri}/departures"},{"location":"expert/android/api/NextDeparturesApi/#getcoveragelonlatdepartures","title":"getCoverageLonLatDepartures","text":""},{"location":"expert/android/api/NextDeparturesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/NextDeparturesApi/#return","title":"ReturnExample","text":"<p>Departures</p> <pre><code>ExpertSdk.getInstance().nextDeparturesApi.getCoverageLonLatDepartures(\n    lon = 0.0,\n    lat = 0.0,\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NextDeparturesApi/#getcoveragelonlaturidepartures","title":"getCoverageLonLatUriDepartures","text":""},{"location":"expert/android/api/NextDeparturesApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/NextDeparturesApi/#return_1","title":"ReturnExample","text":"<p>Departures</p> <pre><code>ExpertSdk.getInstance().nextDeparturesApi.getCoverageLonLatUriDepartures(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NextDeparturesApi/#getcoverageregiondepartures","title":"getCoverageRegionDepartures","text":""},{"location":"expert/android/api/NextDeparturesApi/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/NextDeparturesApi/#return_2","title":"ReturnExample","text":"<p>Departures</p> <pre><code>ExpertSdk.getInstance().nextDeparturesApi.getCoverageRegionDepartures(\n    region = \"region_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/NextDeparturesApi/#getcoverageregionuridepartures","title":"getCoverageRegionUriDepartures","text":""},{"location":"expert/android/api/NextDeparturesApi/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/NextDeparturesApi/#return_3","title":"ReturnExample","text":"<p>Departures</p> <pre><code>ExpertSdk.getInstance().nextDeparturesApi.getCoverageRegionUriDepartures(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ObstaclesNearbyApi/","title":"ObstaclesNearbyApi","text":"Method HTTP request getCoordLonLatObstaclesNearby GET coord/{lon};{lat}/obstacles_nearby getCoordsLonLatObstaclesNearby GET coords/{lon};{lat}/obstacles_nearby getCoverageLonLatObstaclesNearby GET coverage/{lon};{lat}/obstacles_nearby getCoverageLonLatUriObstaclesNearby GET coverage/{lon};{lat}/{uri}/obstacles_nearby getCoverageRegionObstaclesNearby GET coverage/{region}/obstacles_nearby getCoverageRegionUriObstaclesNearby GET coverage/{region}/{uri}/obstacles_nearby"},{"location":"expert/android/api/ObstaclesNearbyApi/#getcoordlonlatobstaclesnearby","title":"getCoordLonLatObstaclesNearby","text":""},{"location":"expert/android/api/ObstaclesNearbyApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query path String A geojson in polyline path as base64 [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/ObstaclesNearbyApi/#return","title":"ReturnExample","text":"<p>Obstacles</p> <pre><code>ExpertSdk.getInstance().obstaclesNearbyApi.getCoordLonLatObstaclesNearby(\n    lon = 0.0,\n    lat = 0.0,\n    path = \"path_example\",\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ObstaclesNearbyApi/#getcoordslonlatobstaclesnearby","title":"getCoordsLonLatObstaclesNearby","text":""},{"location":"expert/android/api/ObstaclesNearbyApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query path String A geojson in polyline path as base64 [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/ObstaclesNearbyApi/#return_1","title":"ReturnExample","text":"<p>Obstacles</p> <pre><code>ExpertSdk.getInstance().obstaclesNearbyApi.getCoordsLonLatObstaclesNearby(\n    lon = 0.0,\n    lat = 0.0,\n    path = \"path_example\",\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ObstaclesNearbyApi/#getcoveragelonlatobstaclesnearby","title":"getCoverageLonLatObstaclesNearby","text":""},{"location":"expert/android/api/ObstaclesNearbyApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query path String A geojson in polyline path as base64 [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/ObstaclesNearbyApi/#return_2","title":"ReturnExample","text":"<p>Obstacles</p> <pre><code>ExpertSdk.getInstance().obstaclesNearbyApi.getCoverageLonLatObstaclesNearby(\n    lon = 0.0,\n    lat = 0.0,\n    path = \"path_example\",\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ObstaclesNearbyApi/#getcoveragelonlaturiobstaclesnearby","title":"getCoverageLonLatUriObstaclesNearby","text":""},{"location":"expert/android/api/ObstaclesNearbyApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri path String A geojson in polyline path as base64 [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/ObstaclesNearbyApi/#return_3","title":"ReturnExample","text":"<p>Obstacles</p> <pre><code>ExpertSdk.getInstance().obstaclesNearbyApi.getCoverageLonLatUriObstaclesNearby(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    path = \"path_example\",\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ObstaclesNearbyApi/#getcoverageregionobstaclesnearby","title":"getCoverageRegionObstaclesNearby","text":""},{"location":"expert/android/api/ObstaclesNearbyApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query path String A geojson in polyline path as base64 [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/ObstaclesNearbyApi/#return_4","title":"ReturnExample","text":"<p>Obstacles</p> <pre><code>ExpertSdk.getInstance().obstaclesNearbyApi.getCoverageRegionObstaclesNearby(\n    region = \"region_example\",\n    path = \"path_example\",\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/ObstaclesNearbyApi/#getcoverageregionuriobstaclesnearby","title":"getCoverageRegionUriObstaclesNearby","text":""},{"location":"expert/android/api/ObstaclesNearbyApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri path String A geojson in polyline path as base64 [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/android/api/ObstaclesNearbyApi/#return_5","title":"ReturnExample","text":"<p>Obstacles</p> <pre><code>ExpertSdk.getInstance().obstaclesNearbyApi.getCoverageRegionUriObstaclesNearby(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    path = \"path_example\",\n    distance = 123,\n    count = 123,\n    coord = \"coord_example\",\n    startPage = 123\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PhysicalModesApi/","title":"PhysicalModesApi","text":"Method HTTP request getCoverageLonLatPhysicalModes GET coverage/{lon};{lat}/physical_modes getCoverageLonLatPhysicalModesId GET coverage/{lon};{lat}/physical_modes/{id} getCoverageLonLatUriPhysicalModes GET coverage/{lon};{lat}/{uri}/physical_modes getCoverageLonLatUriPhysicalModesId GET coverage/{lon};{lat}/{uri}/physical_modes/{id} getCoverageRegionPhysicalModes GET coverage/{region}/physical_modes getCoverageRegionPhysicalModesId GET coverage/{region}/physical_modes/{id} getCoverageRegionUriPhysicalModes GET coverage/{region}/{uri}/physical_modes getCoverageRegionUriPhysicalModesId GET coverage/{region}/{uri}/physical_modes/{id}"},{"location":"expert/android/api/PhysicalModesApi/#getcoveragelonlatphysicalmodes","title":"getCoverageLonLatPhysicalModes","text":""},{"location":"expert/android/api/PhysicalModesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PhysicalModesApi/#return","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>ExpertSdk.getInstance().physicalModesApi.getCoverageLonLatPhysicalModes(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PhysicalModesApi/#getcoveragelonlatphysicalmodesid","title":"getCoverageLonLatPhysicalModesId","text":""},{"location":"expert/android/api/PhysicalModesApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PhysicalModesApi/#return_1","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>ExpertSdk.getInstance().physicalModesApi.getCoverageLonLatPhysicalModesId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PhysicalModesApi/#getcoveragelonlaturiphysicalmodes","title":"getCoverageLonLatUriPhysicalModes","text":""},{"location":"expert/android/api/PhysicalModesApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PhysicalModesApi/#return_2","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>ExpertSdk.getInstance().physicalModesApi.getCoverageLonLatUriPhysicalModes(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PhysicalModesApi/#getcoveragelonlaturiphysicalmodesid","title":"getCoverageLonLatUriPhysicalModesId","text":""},{"location":"expert/android/api/PhysicalModesApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PhysicalModesApi/#return_3","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>ExpertSdk.getInstance().physicalModesApi.getCoverageLonLatUriPhysicalModesId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PhysicalModesApi/#getcoverageregionphysicalmodes","title":"getCoverageRegionPhysicalModes","text":""},{"location":"expert/android/api/PhysicalModesApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PhysicalModesApi/#return_4","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>ExpertSdk.getInstance().physicalModesApi.getCoverageRegionPhysicalModes(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PhysicalModesApi/#getcoverageregionphysicalmodesid","title":"getCoverageRegionPhysicalModesId","text":""},{"location":"expert/android/api/PhysicalModesApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PhysicalModesApi/#return_5","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>ExpertSdk.getInstance().physicalModesApi.getCoverageRegionPhysicalModesId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PhysicalModesApi/#getcoverageregionuriphysicalmodes","title":"getCoverageRegionUriPhysicalModes","text":""},{"location":"expert/android/api/PhysicalModesApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PhysicalModesApi/#return_6","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>ExpertSdk.getInstance().physicalModesApi.getCoverageRegionUriPhysicalModes(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PhysicalModesApi/#getcoverageregionuriphysicalmodesid","title":"getCoverageRegionUriPhysicalModesId","text":""},{"location":"expert/android/api/PhysicalModesApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PhysicalModesApi/#return_7","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>ExpertSdk.getInstance().physicalModesApi.getCoverageRegionUriPhysicalModesId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlaceUriApi/","title":"PlaceUriApi","text":"Method HTTP request getCoverageLonLatPlacesId GET coverage/{lon};{lat}/places/{id} getCoverageRegionPlacesId GET coverage/{region}/places/{id} getPlacesId GET places/{id}"},{"location":"expert/android/api/PlaceUriApi/#getcoveragelonlatplacesid","title":"getCoverageLonLatPlacesId","text":""},{"location":"expert/android/api/PlaceUriApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional]"},{"location":"expert/android/api/PlaceUriApi/#return","title":"ReturnExample","text":"<p>Places</p> <pre><code>ExpertSdk.getInstance().placeUriApi.getCoverageLonLatPlacesId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    bssStands = true,\n    addPoiInfos = listOf(),\n    disableGeojson = true,\n    disableDisruption = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlaceUriApi/#getcoverageregionplacesid","title":"getCoverageRegionPlacesId","text":""},{"location":"expert/android/api/PlaceUriApi/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional]"},{"location":"expert/android/api/PlaceUriApi/#return_1","title":"ReturnExample","text":"<p>Places</p> <pre><code>ExpertSdk.getInstance().placeUriApi.getCoverageRegionPlacesId(\n    region = \"region_example\",\n    id = \"id_example\",\n    bssStands = true,\n    addPoiInfos = listOf(),\n    disableGeojson = true,\n    disableDisruption = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlaceUriApi/#getplacesid","title":"getPlacesId","text":""},{"location":"expert/android/api/PlaceUriApi/#parameters_2","title":"Parameters","text":"Name Type Note id String Id of the object you want to query bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional]"},{"location":"expert/android/api/PlaceUriApi/#return_2","title":"ReturnExample","text":"<p>Places</p> <pre><code>ExpertSdk.getInstance().placeUriApi.getPlacesId(\n    id = \"id_example\",\n    bssStands = true,\n    addPoiInfos = listOf(),\n    disableGeojson = true,\n    disableDisruption = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlacesApi/","title":"PlacesApi","text":"Method HTTP request getCoverageLonLatPlaces GET coverage/{lon};{lat}/places getCoverageRegionPlaces GET coverage/{region}/places getPlaces GET places"},{"location":"expert/android/api/PlacesApi/#getcoveragelonlatplaces","title":"getCoverageLonLatPlaces","text":""},{"location":"expert/android/api/PlacesApi/#parameters","title":"Parameters","text":"Name Type Note q String The data to search lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query type List The type of data to search [optional] [default to ['stop_area', 'address', 'poi', 'administrative_region']] [enum: stop_area, stop_point, address, poi, administrative_region] count Int The maximum number of places returned [optional] [default to 10] adminUri List If filled, will restrain the search within the given admin uris [optional] depth Int The depth of objects [optional] [default to 1] disableGeojson Boolean remove geojson from the response [optional] from String Coordinates longitude;latitude used to prioritize the objects around this coordinate [optional] shape String Geographical shape to limit the search. [optional] shapeScope List The scope shape on data to search [optional] [enum: admin, street, addr, poi, stop] placesProximityRadius Float Radius used to prioritize the objects around coordinate from [optional]"},{"location":"expert/android/api/PlacesApi/#return","title":"ReturnExample","text":"<p>Places</p> <pre><code>ExpertSdk.getInstance().placesApi.getCoverageLonLatPlaces(\n    q = \"q_example\",\n    lon = 0.0,\n    lat = 0.0,\n    type = listOf(),\n    count = 123,\n    adminUri = listOf(),\n    depth = 123,\n    disableGeojson = true,\n    from = \"from_example\",\n    shape = \"shape_example\",\n    shapeScope = listOf(),\n    placesProximityRadius = 0f\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlacesApi/#getcoverageregionplaces","title":"getCoverageRegionPlaces","text":""},{"location":"expert/android/api/PlacesApi/#parameters_1","title":"Parameters","text":"Name Type Note q String The data to search region String The region you want to query type List The type of data to search [optional] [default to ['stop_area', 'address', 'poi', 'administrative_region']] [enum: stop_area, stop_point, address, poi, administrative_region] count Int The maximum number of places returned [optional] [default to 10] adminUri List If filled, will restrain the search within the given admin uris [optional] depth Int The depth of objects [optional] [default to 1] disableGeojson Boolean remove geojson from the response [optional] from String Coordinates longitude;latitude used to prioritize the objects around this coordinate [optional] shape String Geographical shape to limit the search. [optional] shapeScope List The scope shape on data to search [optional] [enum: admin, street, addr, poi, stop] placesProximityRadius Float Radius used to prioritize the objects around coordinate from [optional]"},{"location":"expert/android/api/PlacesApi/#return_1","title":"ReturnExample","text":"<p>Places</p> <pre><code>ExpertSdk.getInstance().placesApi.getCoverageRegionPlaces(\n    q = \"q_example\",\n    region = \"region_example\",\n    type = listOf(),\n    count = 123,\n    adminUri = listOf(),\n    depth = 123,\n    disableGeojson = true,\n    from = \"from_example\",\n    shape = \"shape_example\",\n    shapeScope = listOf(),\n    placesProximityRadius = 0f\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlacesApi/#getplaces","title":"getPlaces","text":""},{"location":"expert/android/api/PlacesApi/#parameters_2","title":"Parameters","text":"Name Type Note q String The data to search type List The type of data to search [optional] [default to ['stop_area', 'address', 'poi', 'administrative_region']] [enum: stop_area, stop_point, address, poi, administrative_region] count Int The maximum number of places returned [optional] [default to 10] adminUri List If filled, will restrain the search within the given admin uris [optional] depth Int The depth of objects [optional] [default to 1] disableGeojson Boolean remove geojson from the response [optional] from String Coordinates longitude;latitude used to prioritize the objects around this coordinate [optional] shape String Geographical shape to limit the search. [optional] shapeScope List The scope shape on data to search [optional] [enum: admin, street, addr, poi, stop] placesProximityRadius Float Radius used to prioritize the objects around coordinate from [optional]"},{"location":"expert/android/api/PlacesApi/#return_2","title":"ReturnExample","text":"<p>Places</p> <pre><code>ExpertSdk.getInstance().placesApi.getPlaces(\n    q = \"q_example\",\n    type = listOf(),\n    count = 123,\n    adminUri = listOf(),\n    depth = 123,\n    disableGeojson = true,\n    from = \"from_example\",\n    shape = \"shape_example\",\n    shapeScope = listOf(),\n    placesProximityRadius = 0f\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlacesNearbyApi/","title":"PlacesNearbyApi","text":"Method HTTP request getCoordLonLatPlacesNearby GET coord/{lon};{lat}/places_nearby getCoordsLonLatPlacesNearby GET coords/{lon};{lat}/places_nearby getCoverageLonLatPlacesNearby GET coverage/{lon};{lat}/places_nearby getCoverageLonLatUriPlacesNearby GET coverage/{lon};{lat}/{uri}/places_nearby getCoverageRegionPlacesNearby GET coverage/{region}/places_nearby getCoverageRegionUriPlacesNearby GET coverage/{region}/{uri}/places_nearby"},{"location":"expert/android/api/PlacesNearbyApi/#getcoordlonlatplacesnearby","title":"getCoordLonLatPlacesNearby","text":""},{"location":"expert/android/api/PlacesNearbyApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query type List Type of the objects to return [optional] [default to ['stop_area', 'stop_point', 'poi']] [enum: stop_area, stop_point, address, poi, administrative_region] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional]"},{"location":"expert/android/api/PlacesNearbyApi/#return","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>ExpertSdk.getInstance().placesNearbyApi.getCoordLonLatPlacesNearby(\n    lon = 0.0,\n    lat = 0.0,\n    type = listOf(),\n    filter = \"filter_example\",\n    distance = 123,\n    count = 123,\n    depth = 123,\n    startPage = 123,\n    bssStands = true,\n    addPoiInfos = listOf(),\n    disableGeojson = true,\n    disableDisruption = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlacesNearbyApi/#getcoordslonlatplacesnearby","title":"getCoordsLonLatPlacesNearby","text":""},{"location":"expert/android/api/PlacesNearbyApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query type List Type of the objects to return [optional] [default to ['stop_area', 'stop_point', 'poi']] [enum: stop_area, stop_point, address, poi, administrative_region] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional]"},{"location":"expert/android/api/PlacesNearbyApi/#return_1","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>ExpertSdk.getInstance().placesNearbyApi.getCoordsLonLatPlacesNearby(\n    lon = 0.0,\n    lat = 0.0,\n    type = listOf(),\n    filter = \"filter_example\",\n    distance = 123,\n    count = 123,\n    depth = 123,\n    startPage = 123,\n    bssStands = true,\n    addPoiInfos = listOf(),\n    disableGeojson = true,\n    disableDisruption = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlacesNearbyApi/#getcoveragelonlatplacesnearby","title":"getCoverageLonLatPlacesNearby","text":""},{"location":"expert/android/api/PlacesNearbyApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query type List Type of the objects to return [optional] [default to ['stop_area', 'stop_point', 'poi']] [enum: stop_area, stop_point, address, poi, administrative_region] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional]"},{"location":"expert/android/api/PlacesNearbyApi/#return_2","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>ExpertSdk.getInstance().placesNearbyApi.getCoverageLonLatPlacesNearby(\n    lon = 0.0,\n    lat = 0.0,\n    type = listOf(),\n    filter = \"filter_example\",\n    distance = 123,\n    count = 123,\n    depth = 123,\n    startPage = 123,\n    bssStands = true,\n    addPoiInfos = listOf(),\n    disableGeojson = true,\n    disableDisruption = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlacesNearbyApi/#getcoveragelonlaturiplacesnearby","title":"getCoverageLonLatUriPlacesNearby","text":""},{"location":"expert/android/api/PlacesNearbyApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri type List Type of the objects to return [optional] [default to ['stop_area', 'stop_point', 'poi']] [enum: stop_area, stop_point, address, poi, administrative_region] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional]"},{"location":"expert/android/api/PlacesNearbyApi/#return_3","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>ExpertSdk.getInstance().placesNearbyApi.getCoverageLonLatUriPlacesNearby(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    type = listOf(),\n    filter = \"filter_example\",\n    distance = 123,\n    count = 123,\n    depth = 123,\n    startPage = 123,\n    bssStands = true,\n    addPoiInfos = listOf(),\n    disableGeojson = true,\n    disableDisruption = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlacesNearbyApi/#getcoverageregionplacesnearby","title":"getCoverageRegionPlacesNearby","text":""},{"location":"expert/android/api/PlacesNearbyApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query type List Type of the objects to return [optional] [default to ['stop_area', 'stop_point', 'poi']] [enum: stop_area, stop_point, address, poi, administrative_region] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional]"},{"location":"expert/android/api/PlacesNearbyApi/#return_4","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>ExpertSdk.getInstance().placesNearbyApi.getCoverageRegionPlacesNearby(\n    region = \"region_example\",\n    type = listOf(),\n    filter = \"filter_example\",\n    distance = 123,\n    count = 123,\n    depth = 123,\n    startPage = 123,\n    bssStands = true,\n    addPoiInfos = listOf(),\n    disableGeojson = true,\n    disableDisruption = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PlacesNearbyApi/#getcoverageregionuriplacesnearby","title":"getCoverageRegionUriPlacesNearby","text":""},{"location":"expert/android/api/PlacesNearbyApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri type List Type of the objects to return [optional] [default to ['stop_area', 'stop_point', 'poi']] [enum: stop_area, stop_point, address, poi, administrative_region] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Boolean DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional]"},{"location":"expert/android/api/PlacesNearbyApi/#return_5","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>ExpertSdk.getInstance().placesNearbyApi.getCoverageRegionUriPlacesNearby(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    type = listOf(),\n    filter = \"filter_example\",\n    distance = 123,\n    count = 123,\n    depth = 123,\n    startPage = 123,\n    bssStands = true,\n    addPoiInfos = listOf(),\n    disableGeojson = true,\n    disableDisruption = true\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoiTypesApi/","title":"PoiTypesApi","text":"Method HTTP request getCoverageLonLatPoiTypes GET coverage/{lon};{lat}/poi_types getCoverageLonLatPoiTypesId GET coverage/{lon};{lat}/poi_types/{id} getCoverageLonLatUriPoiTypes GET coverage/{lon};{lat}/{uri}/poi_types getCoverageLonLatUriPoiTypesId GET coverage/{lon};{lat}/{uri}/poi_types/{id} getCoverageRegionPoiTypes GET coverage/{region}/poi_types getCoverageRegionPoiTypesId GET coverage/{region}/poi_types/{id} getCoverageRegionUriPoiTypes GET coverage/{region}/{uri}/poi_types getCoverageRegionUriPoiTypesId GET coverage/{region}/{uri}/poi_types/{id}"},{"location":"expert/android/api/PoiTypesApi/#getcoveragelonlatpoitypes","title":"getCoverageLonLatPoiTypes","text":""},{"location":"expert/android/api/PoiTypesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PoiTypesApi/#return","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>ExpertSdk.getInstance().poiTypesApi.getCoverageLonLatPoiTypes(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoiTypesApi/#getcoveragelonlatpoitypesid","title":"getCoverageLonLatPoiTypesId","text":""},{"location":"expert/android/api/PoiTypesApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PoiTypesApi/#return_1","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>ExpertSdk.getInstance().poiTypesApi.getCoverageLonLatPoiTypesId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoiTypesApi/#getcoveragelonlaturipoitypes","title":"getCoverageLonLatUriPoiTypes","text":""},{"location":"expert/android/api/PoiTypesApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PoiTypesApi/#return_2","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>ExpertSdk.getInstance().poiTypesApi.getCoverageLonLatUriPoiTypes(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoiTypesApi/#getcoveragelonlaturipoitypesid","title":"getCoverageLonLatUriPoiTypesId","text":""},{"location":"expert/android/api/PoiTypesApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PoiTypesApi/#return_3","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>ExpertSdk.getInstance().poiTypesApi.getCoverageLonLatUriPoiTypesId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoiTypesApi/#getcoverageregionpoitypes","title":"getCoverageRegionPoiTypes","text":""},{"location":"expert/android/api/PoiTypesApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PoiTypesApi/#return_4","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>ExpertSdk.getInstance().poiTypesApi.getCoverageRegionPoiTypes(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoiTypesApi/#getcoverageregionpoitypesid","title":"getCoverageRegionPoiTypesId","text":""},{"location":"expert/android/api/PoiTypesApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PoiTypesApi/#return_5","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>ExpertSdk.getInstance().poiTypesApi.getCoverageRegionPoiTypesId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoiTypesApi/#getcoverageregionuripoitypes","title":"getCoverageRegionUriPoiTypes","text":""},{"location":"expert/android/api/PoiTypesApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PoiTypesApi/#return_6","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>ExpertSdk.getInstance().poiTypesApi.getCoverageRegionUriPoiTypes(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoiTypesApi/#getcoverageregionuripoitypesid","title":"getCoverageRegionUriPoiTypesId","text":""},{"location":"expert/android/api/PoiTypesApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/PoiTypesApi/#return_7","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>ExpertSdk.getInstance().poiTypesApi.getCoverageRegionUriPoiTypesId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoisApi/","title":"PoisApi","text":"Method HTTP request getCoverageLonLatPois GET coverage/{lon};{lat}/pois getCoverageLonLatPoisId GET coverage/{lon};{lat}/pois/{id} getCoverageLonLatUriPois GET coverage/{lon};{lat}/{uri}/pois getCoverageLonLatUriPoisId GET coverage/{lon};{lat}/{uri}/pois/{id} getCoverageRegionPois GET coverage/{region}/pois getCoverageRegionPoisId GET coverage/{region}/pois/{id} getCoverageRegionUriPois GET coverage/{region}/{uri}/pois getCoverageRegionUriPoisId GET coverage/{region}/{uri}/pois/{id}"},{"location":"expert/android/api/PoisApi/#getcoveragelonlatpois","title":"getCoverageLonLatPois","text":""},{"location":"expert/android/api/PoisApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional] bssStands Boolean Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/android/api/PoisApi/#return","title":"ReturnExample","text":"<p>Pois</p> <pre><code>ExpertSdk.getInstance().poisApi.getCoverageLonLatPois(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\",\n    bssStands = true,\n    addPoiInfos = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoisApi/#getcoveragelonlatpoisid","title":"getCoverageLonLatPoisId","text":""},{"location":"expert/android/api/PoisApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional] bssStands Boolean Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/android/api/PoisApi/#return_1","title":"ReturnExample","text":"<p>Pois</p> <pre><code>ExpertSdk.getInstance().poisApi.getCoverageLonLatPoisId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\",\n    bssStands = true,\n    addPoiInfos = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoisApi/#getcoveragelonlaturipois","title":"getCoverageLonLatUriPois","text":""},{"location":"expert/android/api/PoisApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional] bssStands Boolean Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/android/api/PoisApi/#return_2","title":"ReturnExample","text":"<p>Pois</p> <pre><code>ExpertSdk.getInstance().poisApi.getCoverageLonLatUriPois(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\",\n    bssStands = true,\n    addPoiInfos = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoisApi/#getcoveragelonlaturipoisid","title":"getCoverageLonLatUriPoisId","text":""},{"location":"expert/android/api/PoisApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional] bssStands Boolean Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/android/api/PoisApi/#return_3","title":"ReturnExample","text":"<p>Pois</p> <pre><code>ExpertSdk.getInstance().poisApi.getCoverageLonLatUriPoisId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\",\n    bssStands = true,\n    addPoiInfos = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoisApi/#getcoverageregionpois","title":"getCoverageRegionPois","text":""},{"location":"expert/android/api/PoisApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional] bssStands Boolean Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/android/api/PoisApi/#return_4","title":"ReturnExample","text":"<p>Pois</p> <pre><code>ExpertSdk.getInstance().poisApi.getCoverageRegionPois(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\",\n    bssStands = true,\n    addPoiInfos = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoisApi/#getcoverageregionpoisid","title":"getCoverageRegionPoisId","text":""},{"location":"expert/android/api/PoisApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional] bssStands Boolean Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/android/api/PoisApi/#return_5","title":"ReturnExample","text":"<p>Pois</p> <pre><code>ExpertSdk.getInstance().poisApi.getCoverageRegionPoisId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\",\n    bssStands = true,\n    addPoiInfos = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoisApi/#getcoverageregionuripois","title":"getCoverageRegionUriPois","text":""},{"location":"expert/android/api/PoisApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional] bssStands Boolean Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/android/api/PoisApi/#return_6","title":"ReturnExample","text":"<p>Pois</p> <pre><code>ExpertSdk.getInstance().poisApi.getCoverageRegionUriPois(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\",\n    bssStands = true,\n    addPoiInfos = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PoisApi/#getcoverageregionuripoisid","title":"getCoverageRegionUriPoisId","text":""},{"location":"expert/android/api/PoisApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional] bssStands Boolean Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos List Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to ['bss_stands', 'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/android/api/PoisApi/#return_7","title":"ReturnExample","text":"<p>Pois</p> <pre><code>ExpertSdk.getInstance().poisApi.getCoverageRegionUriPoisId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\",\n    bssStands = true,\n    addPoiInfos = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PtobjectsApi/","title":"PtobjectsApi","text":"Method HTTP request getCoverageLonLatPtObjects GET coverage/{lon};{lat}/pt_objects getCoverageRegionPtObjects GET coverage/{region}/pt_objects"},{"location":"expert/android/api/PtobjectsApi/#getcoveragelonlatptobjects","title":"getCoverageLonLatPtObjects","text":""},{"location":"expert/android/api/PtobjectsApi/#parameters","title":"Parameters","text":"Name Type Note q String The data to search lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query type List The type of data to search [optional] [default to ['network', 'commercial_mode', 'line', 'line_group', 'route', 'stop_area']] [enum: network, commercial_mode, line, line_group, route, stop_area, stop_point] count Int The maximum number of ptobjects returned [optional] [default to 10] adminUri List If filled, will restrain the search within the given admin uris [optional] depth Int The depth of objects [optional] [default to 1] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String Filter your objects [optional]"},{"location":"expert/android/api/PtobjectsApi/#return","title":"ReturnExample","text":"<p>PtObjects</p> <pre><code>ExpertSdk.getInstance().ptobjectsApi.getCoverageLonLatPtObjects(\n    q = \"q_example\",\n    lon = 0.0,\n    lat = 0.0,\n    type = listOf(),\n    count = 123,\n    adminUri = listOf(),\n    depth = 123,\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/PtobjectsApi/#getcoverageregionptobjects","title":"getCoverageRegionPtObjects","text":""},{"location":"expert/android/api/PtobjectsApi/#parameters_1","title":"Parameters","text":"Name Type Note q String The data to search region String The region you want to query type List The type of data to search [optional] [default to ['network', 'commercial_mode', 'line', 'line_group', 'route', 'stop_area']] [enum: network, commercial_mode, line, line_group, route, stop_area, stop_point] count Int The maximum number of ptobjects returned [optional] [default to 10] adminUri List If filled, will restrain the search within the given admin uris [optional] depth Int The depth of objects [optional] [default to 1] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String Filter your objects [optional]"},{"location":"expert/android/api/PtobjectsApi/#return_1","title":"ReturnExample","text":"<p>PtObjects</p> <pre><code>ExpertSdk.getInstance().ptobjectsApi.getCoverageRegionPtObjects(\n    q = \"q_example\",\n    region = \"region_example\",\n    type = listOf(),\n    count = 123,\n    adminUri = listOf(),\n    depth = 123,\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RouteSchedulesApi/","title":"RouteSchedulesApi","text":"Method HTTP request getCoverageLonLatUriRouteSchedules GET coverage/{lon};{lat}/{uri}/route_schedules getCoverageRegionUriRouteSchedules GET coverage/{region}/{uri}/route_schedules getRouteSchedules GET route_schedules"},{"location":"expert/android/api/RouteSchedulesApi/#getcoveragelonlaturirouteschedules","title":"getCoverageLonLatUriRouteSchedules","text":""},{"location":"expert/android/api/RouteSchedulesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/RouteSchedulesApi/#return","title":"ReturnExample","text":"<p>RouteSchedules</p> <pre><code>ExpertSdk.getInstance().routeSchedulesApi.getCoverageLonLatUriRouteSchedules(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RouteSchedulesApi/#getcoverageregionurirouteschedules","title":"getCoverageRegionUriRouteSchedules","text":""},{"location":"expert/android/api/RouteSchedulesApi/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/RouteSchedulesApi/#return_1","title":"ReturnExample","text":"<p>RouteSchedules</p> <pre><code>ExpertSdk.getInstance().routeSchedulesApi.getCoverageRegionUriRouteSchedules(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RouteSchedulesApi/#getrouteschedules","title":"getRouteSchedules","text":""},{"location":"expert/android/api/RouteSchedulesApi/#parameters_2","title":"Parameters","text":"Name Type Note filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/RouteSchedulesApi/#return_2","title":"ReturnExample","text":"<p>RouteSchedules</p> <pre><code>ExpertSdk.getInstance().routeSchedulesApi.getRouteSchedules(\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RoutesApi/","title":"RoutesApi","text":"Method HTTP request getCoverageLonLatRoutes GET coverage/{lon};{lat}/routes getCoverageLonLatRoutesId GET coverage/{lon};{lat}/routes/{id} getCoverageLonLatUriRoutes GET coverage/{lon};{lat}/{uri}/routes getCoverageLonLatUriRoutesId GET coverage/{lon};{lat}/{uri}/routes/{id} getCoverageRegionRoutes GET coverage/{region}/routes getCoverageRegionRoutesId GET coverage/{region}/routes/{id} getCoverageRegionUriRoutes GET coverage/{region}/{uri}/routes getCoverageRegionUriRoutesId GET coverage/{region}/{uri}/routes/{id} getRoutes GET routes"},{"location":"expert/android/api/RoutesApi/#getcoveragelonlatroutes","title":"getCoverageLonLatRoutes","text":""},{"location":"expert/android/api/RoutesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/RoutesApi/#return","title":"ReturnExample","text":"<p>Routes</p> <pre><code>ExpertSdk.getInstance().routesApi.getCoverageLonLatRoutes(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RoutesApi/#getcoveragelonlatroutesid","title":"getCoverageLonLatRoutesId","text":""},{"location":"expert/android/api/RoutesApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/RoutesApi/#return_1","title":"ReturnExample","text":"<p>Routes</p> <pre><code>ExpertSdk.getInstance().routesApi.getCoverageLonLatRoutesId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RoutesApi/#getcoveragelonlaturiroutes","title":"getCoverageLonLatUriRoutes","text":""},{"location":"expert/android/api/RoutesApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/RoutesApi/#return_2","title":"ReturnExample","text":"<p>Routes</p> <pre><code>ExpertSdk.getInstance().routesApi.getCoverageLonLatUriRoutes(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RoutesApi/#getcoveragelonlaturiroutesid","title":"getCoverageLonLatUriRoutesId","text":""},{"location":"expert/android/api/RoutesApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/RoutesApi/#return_3","title":"ReturnExample","text":"<p>Routes</p> <pre><code>ExpertSdk.getInstance().routesApi.getCoverageLonLatUriRoutesId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RoutesApi/#getcoverageregionroutes","title":"getCoverageRegionRoutes","text":""},{"location":"expert/android/api/RoutesApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/RoutesApi/#return_4","title":"ReturnExample","text":"<p>Routes</p> <pre><code>ExpertSdk.getInstance().routesApi.getCoverageRegionRoutes(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RoutesApi/#getcoverageregionroutesid","title":"getCoverageRegionRoutesId","text":""},{"location":"expert/android/api/RoutesApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/RoutesApi/#return_5","title":"ReturnExample","text":"<p>Routes</p> <pre><code>ExpertSdk.getInstance().routesApi.getCoverageRegionRoutesId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RoutesApi/#getcoverageregionuriroutes","title":"getCoverageRegionUriRoutes","text":""},{"location":"expert/android/api/RoutesApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/RoutesApi/#return_6","title":"ReturnExample","text":"<p>Routes</p> <pre><code>ExpertSdk.getInstance().routesApi.getCoverageRegionUriRoutes(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RoutesApi/#getcoverageregionuriroutesid","title":"getCoverageRegionUriRoutesId","text":""},{"location":"expert/android/api/RoutesApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/RoutesApi/#return_7","title":"ReturnExample","text":"<p>Routes</p> <pre><code>ExpertSdk.getInstance().routesApi.getCoverageRegionUriRoutesId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/RoutesApi/#getroutes","title":"getRoutes","text":""},{"location":"expert/android/api/RoutesApi/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/RoutesApi/#return_8","title":"ReturnExample","text":"<p>Routes</p> <pre><code>ExpertSdk.getInstance().routesApi.getRoutes(\n    externalCode = \"externalCode_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopAreasApi/","title":"StopAreasApi","text":"Method HTTP request getCoverageLonLatStopAreas GET coverage/{lon};{lat}/stop_areas getCoverageLonLatStopAreasId GET coverage/{lon};{lat}/stop_areas/{id} getCoverageLonLatUriStopAreas GET coverage/{lon};{lat}/{uri}/stop_areas getCoverageLonLatUriStopAreasId GET coverage/{lon};{lat}/{uri}/stop_areas/{id} getCoverageRegionStopAreas GET coverage/{region}/stop_areas getCoverageRegionStopAreasId GET coverage/{region}/stop_areas/{id} getCoverageRegionUriStopAreas GET coverage/{region}/{uri}/stop_areas getCoverageRegionUriStopAreasId GET coverage/{region}/{uri}/stop_areas/{id} getStopAreas GET stop_areas"},{"location":"expert/android/api/StopAreasApi/#getcoveragelonlatstopareas","title":"getCoverageLonLatStopAreas","text":""},{"location":"expert/android/api/StopAreasApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopAreasApi/#return","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>ExpertSdk.getInstance().stopAreasApi.getCoverageLonLatStopAreas(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopAreasApi/#getcoveragelonlatstopareasid","title":"getCoverageLonLatStopAreasId","text":""},{"location":"expert/android/api/StopAreasApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopAreasApi/#return_1","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>ExpertSdk.getInstance().stopAreasApi.getCoverageLonLatStopAreasId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopAreasApi/#getcoveragelonlaturistopareas","title":"getCoverageLonLatUriStopAreas","text":""},{"location":"expert/android/api/StopAreasApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopAreasApi/#return_2","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>ExpertSdk.getInstance().stopAreasApi.getCoverageLonLatUriStopAreas(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopAreasApi/#getcoveragelonlaturistopareasid","title":"getCoverageLonLatUriStopAreasId","text":""},{"location":"expert/android/api/StopAreasApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopAreasApi/#return_3","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>ExpertSdk.getInstance().stopAreasApi.getCoverageLonLatUriStopAreasId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopAreasApi/#getcoverageregionstopareas","title":"getCoverageRegionStopAreas","text":""},{"location":"expert/android/api/StopAreasApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopAreasApi/#return_4","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>ExpertSdk.getInstance().stopAreasApi.getCoverageRegionStopAreas(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopAreasApi/#getcoverageregionstopareasid","title":"getCoverageRegionStopAreasId","text":""},{"location":"expert/android/api/StopAreasApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopAreasApi/#return_5","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>ExpertSdk.getInstance().stopAreasApi.getCoverageRegionStopAreasId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopAreasApi/#getcoverageregionuristopareas","title":"getCoverageRegionUriStopAreas","text":""},{"location":"expert/android/api/StopAreasApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopAreasApi/#return_6","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>ExpertSdk.getInstance().stopAreasApi.getCoverageRegionUriStopAreas(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopAreasApi/#getcoverageregionuristopareasid","title":"getCoverageRegionUriStopAreasId","text":""},{"location":"expert/android/api/StopAreasApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopAreasApi/#return_7","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>ExpertSdk.getInstance().stopAreasApi.getCoverageRegionUriStopAreasId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopAreasApi/#getstopareas","title":"getStopAreas","text":""},{"location":"expert/android/api/StopAreasApi/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopAreasApi/#return_8","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>ExpertSdk.getInstance().stopAreasApi.getStopAreas(\n    externalCode = \"externalCode_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopPointsApi/","title":"StopPointsApi","text":"Method HTTP request getCoverageLonLatStopPoints GET coverage/{lon};{lat}/stop_points getCoverageLonLatStopPointsId GET coverage/{lon};{lat}/stop_points/{id} getCoverageLonLatUriStopPoints GET coverage/{lon};{lat}/{uri}/stop_points getCoverageLonLatUriStopPointsId GET coverage/{lon};{lat}/{uri}/stop_points/{id} getCoverageRegionStopPoints GET coverage/{region}/stop_points getCoverageRegionStopPointsId GET coverage/{region}/stop_points/{id} getCoverageRegionUriStopPoints GET coverage/{region}/{uri}/stop_points getCoverageRegionUriStopPointsId GET coverage/{region}/{uri}/stop_points/{id} getStopPoints GET stop_points"},{"location":"expert/android/api/StopPointsApi/#getcoveragelonlatstoppoints","title":"getCoverageLonLatStopPoints","text":""},{"location":"expert/android/api/StopPointsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopPointsApi/#return","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>ExpertSdk.getInstance().stopPointsApi.getCoverageLonLatStopPoints(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopPointsApi/#getcoveragelonlatstoppointsid","title":"getCoverageLonLatStopPointsId","text":""},{"location":"expert/android/api/StopPointsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopPointsApi/#return_1","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>ExpertSdk.getInstance().stopPointsApi.getCoverageLonLatStopPointsId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopPointsApi/#getcoveragelonlaturistoppoints","title":"getCoverageLonLatUriStopPoints","text":""},{"location":"expert/android/api/StopPointsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopPointsApi/#return_2","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>ExpertSdk.getInstance().stopPointsApi.getCoverageLonLatUriStopPoints(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopPointsApi/#getcoveragelonlaturistoppointsid","title":"getCoverageLonLatUriStopPointsId","text":""},{"location":"expert/android/api/StopPointsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopPointsApi/#return_3","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>ExpertSdk.getInstance().stopPointsApi.getCoverageLonLatUriStopPointsId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopPointsApi/#getcoverageregionstoppoints","title":"getCoverageRegionStopPoints","text":""},{"location":"expert/android/api/StopPointsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopPointsApi/#return_4","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>ExpertSdk.getInstance().stopPointsApi.getCoverageRegionStopPoints(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopPointsApi/#getcoverageregionstoppointsid","title":"getCoverageRegionStopPointsId","text":""},{"location":"expert/android/api/StopPointsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopPointsApi/#return_5","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>ExpertSdk.getInstance().stopPointsApi.getCoverageRegionStopPointsId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopPointsApi/#getcoverageregionuristoppoints","title":"getCoverageRegionUriStopPoints","text":""},{"location":"expert/android/api/StopPointsApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopPointsApi/#return_6","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>ExpertSdk.getInstance().stopPointsApi.getCoverageRegionUriStopPoints(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopPointsApi/#getcoverageregionuristoppointsid","title":"getCoverageRegionUriStopPointsId","text":""},{"location":"expert/android/api/StopPointsApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopPointsApi/#return_7","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>ExpertSdk.getInstance().stopPointsApi.getCoverageRegionUriStopPointsId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopPointsApi/#getstoppoints","title":"getStopPoints","text":""},{"location":"expert/android/api/StopPointsApi/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] originalId String original uri of the object you want to query [optional]"},{"location":"expert/android/api/StopPointsApi/#return_8","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>ExpertSdk.getInstance().stopPointsApi.getStopPoints(\n    externalCode = \"externalCode_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\",\n    originalId = \"originalId_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopSchedulesApi/","title":"StopSchedulesApi","text":"Method HTTP request getCoverageLonLatUriStopSchedules GET coverage/{lon};{lat}/{uri}/stop_schedules getCoverageRegionUriStopSchedules GET coverage/{region}/{uri}/stop_schedules getStopSchedules GET stop_schedules"},{"location":"expert/android/api/StopSchedulesApi/#getcoveragelonlaturistopschedules","title":"getCoverageLonLatUriStopSchedules","text":""},{"location":"expert/android/api/StopSchedulesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/StopSchedulesApi/#return","title":"ReturnExample","text":"<p>StopSchedules</p> <pre><code>ExpertSdk.getInstance().stopSchedulesApi.getCoverageLonLatUriStopSchedules(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopSchedulesApi/#getcoverageregionuristopschedules","title":"getCoverageRegionUriStopSchedules","text":""},{"location":"expert/android/api/StopSchedulesApi/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/StopSchedulesApi/#return_1","title":"ReturnExample","text":"<p>StopSchedules</p> <pre><code>ExpertSdk.getInstance().stopSchedulesApi.getCoverageRegionUriStopSchedules(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/StopSchedulesApi/#getstopschedules","title":"getStopSchedules","text":""},{"location":"expert/android/api/StopSchedulesApi/#parameters_2","title":"Parameters","text":"Name Type Note filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/StopSchedulesApi/#return_2","title":"ReturnExample","text":"<p>StopSchedules</p> <pre><code>ExpertSdk.getInstance().stopSchedulesApi.getStopSchedules(\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TerminusSchedulesApi/","title":"TerminusSchedulesApi","text":"Method HTTP request getCoverageLonLatUriTerminusSchedules GET coverage/{lon};{lat}/{uri}/terminus_schedules getCoverageRegionUriTerminusSchedules GET coverage/{region}/{uri}/terminus_schedules getTerminusSchedules GET terminus_schedules"},{"location":"expert/android/api/TerminusSchedulesApi/#getcoveragelonlaturiterminusschedules","title":"getCoverageLonLatUriTerminusSchedules","text":""},{"location":"expert/android/api/TerminusSchedulesApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/TerminusSchedulesApi/#return","title":"ReturnExample","text":"<p>TerminusSchedules</p> <pre><code>ExpertSdk.getInstance().terminusSchedulesApi.getCoverageLonLatUriTerminusSchedules(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TerminusSchedulesApi/#getcoverageregionuriterminusschedules","title":"getCoverageRegionUriTerminusSchedules","text":""},{"location":"expert/android/api/TerminusSchedulesApi/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/TerminusSchedulesApi/#return_1","title":"ReturnExample","text":"<p>TerminusSchedules</p> <pre><code>ExpertSdk.getInstance().terminusSchedulesApi.getCoverageRegionUriTerminusSchedules(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TerminusSchedulesApi/#getterminusschedules","title":"getTerminusSchedules","text":""},{"location":"expert/android/api/TerminusSchedulesApi/#parameters_2","title":"Parameters","text":"Name Type Note filter String use to filter PT objects [optional] fromDatetime LocalDateTime The datetime from which you want the schedules [optional] untilDatetime LocalDateTime The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by <code>items_per_schedule</code> [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Boolean remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/android/api/TerminusSchedulesApi/#return_2","title":"ReturnExample","text":"<p>TerminusSchedules</p> <pre><code>ExpertSdk.getInstance().terminusSchedulesApi.getTerminusSchedules(\n    filter = \"filter_example\",\n    fromDatetime = LocalDateTime.now(),\n    untilDatetime = LocalDateTime.now(),\n    duration = 123,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    maxDateTimes = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    calendar = \"calendar_example\",\n    distance = 123,\n    dataFreshness = \"dataFreshness_example\",\n    itemsPerSchedule = 123,\n    disableGeojson = true,\n    directionType = \"directionType_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TrafficReportApi/","title":"TrafficReportApi","text":"Method HTTP request getCoverageLonLatTrafficReports GET coverage/{lon};{lat}/traffic_reports getCoverageLonLatUriTrafficReports GET coverage/{lon};{lat}/{uri}/traffic_reports getCoverageRegionTrafficReports GET coverage/{region}/traffic_reports getCoverageRegionUriTrafficReports GET coverage/{region}/{uri}/traffic_reports"},{"location":"expert/android/api/TrafficReportApi/#getcoveragelonlattrafficreports","title":"getCoverageLonLatTrafficReports","text":""},{"location":"expert/android/api/TrafficReportApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 10] startPage Int The current page [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] disableGeojson Boolean remove geojson from the response [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] since LocalDateTime use disruptions valid after this date [optional] until LocalDateTime use disruptions valid before this date [optional]"},{"location":"expert/android/api/TrafficReportApi/#return","title":"ReturnExample","text":"<p>TrafficReports</p> <pre><code>ExpertSdk.getInstance().trafficReportApi.getCoverageLonLatTrafficReports(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    distance = 123,\n    disableGeojson = true,\n    language = \"language_example\",\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TrafficReportApi/#getcoveragelonlaturitrafficreports","title":"getCoverageLonLatUriTrafficReports","text":""},{"location":"expert/android/api/TrafficReportApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 10] startPage Int The current page [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] disableGeojson Boolean remove geojson from the response [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] since LocalDateTime use disruptions valid after this date [optional] until LocalDateTime use disruptions valid before this date [optional]"},{"location":"expert/android/api/TrafficReportApi/#return_1","title":"ReturnExample","text":"<p>TrafficReports</p> <pre><code>ExpertSdk.getInstance().trafficReportApi.getCoverageLonLatUriTrafficReports(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    distance = 123,\n    disableGeojson = true,\n    language = \"language_example\",\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TrafficReportApi/#getcoverageregiontrafficreports","title":"getCoverageRegionTrafficReports","text":""},{"location":"expert/android/api/TrafficReportApi/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 10] startPage Int The current page [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] disableGeojson Boolean remove geojson from the response [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] since LocalDateTime use disruptions valid after this date [optional] until LocalDateTime use disruptions valid before this date [optional]"},{"location":"expert/android/api/TrafficReportApi/#return_2","title":"ReturnExample","text":"<p>TrafficReports</p> <pre><code>ExpertSdk.getInstance().trafficReportApi.getCoverageRegionTrafficReports(\n    region = \"region_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    distance = 123,\n    disableGeojson = true,\n    language = \"language_example\",\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TrafficReportApi/#getcoverageregionuritrafficreports","title":"getCoverageRegionUriTrafficReports","text":""},{"location":"expert/android/api/TrafficReportApi/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 10] startPage Int The current page [optional] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] disableGeojson Boolean remove geojson from the response [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES] since LocalDateTime use disruptions valid after this date [optional] until LocalDateTime use disruptions valid before this date [optional]"},{"location":"expert/android/api/TrafficReportApi/#return_3","title":"ReturnExample","text":"<p>TrafficReports</p> <pre><code>ExpertSdk.getInstance().trafficReportApi.getCoverageRegionUriTrafficReports(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    startPage = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    distance = 123,\n    disableGeojson = true,\n    language = \"language_example\",\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TripsApi/","title":"TripsApi","text":"Method HTTP request getCoverageLonLatTrips GET coverage/{lon};{lat}/trips getCoverageLonLatTripsId GET coverage/{lon};{lat}/trips/{id} getCoverageLonLatUriTrips GET coverage/{lon};{lat}/{uri}/trips getCoverageLonLatUriTripsId GET coverage/{lon};{lat}/{uri}/trips/{id} getCoverageRegionTrips GET coverage/{region}/trips getCoverageRegionTripsId GET coverage/{region}/trips/{id} getCoverageRegionUriTrips GET coverage/{region}/{uri}/trips getCoverageRegionUriTripsId GET coverage/{region}/{uri}/trips/{id}"},{"location":"expert/android/api/TripsApi/#getcoveragelonlattrips","title":"getCoverageLonLatTrips","text":""},{"location":"expert/android/api/TripsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/TripsApi/#return","title":"ReturnExample","text":"<p>Trips</p> <pre><code>ExpertSdk.getInstance().tripsApi.getCoverageLonLatTrips(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TripsApi/#getcoveragelonlattripsid","title":"getCoverageLonLatTripsId","text":""},{"location":"expert/android/api/TripsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/TripsApi/#return_1","title":"ReturnExample","text":"<p>Trips</p> <pre><code>ExpertSdk.getInstance().tripsApi.getCoverageLonLatTripsId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TripsApi/#getcoveragelonlaturitrips","title":"getCoverageLonLatUriTrips","text":""},{"location":"expert/android/api/TripsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/TripsApi/#return_2","title":"ReturnExample","text":"<p>Trips</p> <pre><code>ExpertSdk.getInstance().tripsApi.getCoverageLonLatUriTrips(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TripsApi/#getcoveragelonlaturitripsid","title":"getCoverageLonLatUriTripsId","text":""},{"location":"expert/android/api/TripsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/TripsApi/#return_3","title":"ReturnExample","text":"<p>Trips</p> <pre><code>ExpertSdk.getInstance().tripsApi.getCoverageLonLatUriTripsId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TripsApi/#getcoverageregiontrips","title":"getCoverageRegionTrips","text":""},{"location":"expert/android/api/TripsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/TripsApi/#return_4","title":"ReturnExample","text":"<p>Trips</p> <pre><code>ExpertSdk.getInstance().tripsApi.getCoverageRegionTrips(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TripsApi/#getcoverageregiontripsid","title":"getCoverageRegionTripsId","text":""},{"location":"expert/android/api/TripsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/TripsApi/#return_5","title":"ReturnExample","text":"<p>Trips</p> <pre><code>ExpertSdk.getInstance().tripsApi.getCoverageRegionTripsId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TripsApi/#getcoverageregionuritrips","title":"getCoverageRegionUriTrips","text":""},{"location":"expert/android/api/TripsApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/TripsApi/#return_6","title":"ReturnExample","text":"<p>Trips</p> <pre><code>ExpertSdk.getInstance().tripsApi.getCoverageRegionUriTrips(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/TripsApi/#getcoverageregionuritripsid","title":"getCoverageRegionUriTripsId","text":""},{"location":"expert/android/api/TripsApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/TripsApi/#return_7","title":"ReturnExample","text":"<p>Trips</p> <pre><code>ExpertSdk.getInstance().tripsApi.getCoverageRegionUriTripsId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehicleJourneysApi/","title":"VehicleJourneysApi","text":"Method HTTP request getCoverageLonLatUriVehicleJourneys GET coverage/{lon};{lat}/{uri}/vehicle_journeys getCoverageLonLatUriVehicleJourneysId GET coverage/{lon};{lat}/{uri}/vehicle_journeys/{id} getCoverageLonLatVehicleJourneys GET coverage/{lon};{lat}/vehicle_journeys getCoverageLonLatVehicleJourneysId GET coverage/{lon};{lat}/vehicle_journeys/{id} getCoverageRegionUriVehicleJourneys GET coverage/{region}/{uri}/vehicle_journeys getCoverageRegionUriVehicleJourneysId GET coverage/{region}/{uri}/vehicle_journeys/{id} getCoverageRegionVehicleJourneys GET coverage/{region}/vehicle_journeys getCoverageRegionVehicleJourneysId GET coverage/{region}/vehicle_journeys/{id} getVehicleJourneys GET vehicle_journeys"},{"location":"expert/android/api/VehicleJourneysApi/#getcoveragelonlaturivehiclejourneys","title":"getCoverageLonLatUriVehicleJourneys","text":""},{"location":"expert/android/api/VehicleJourneysApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/VehicleJourneysApi/#return","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>ExpertSdk.getInstance().vehicleJourneysApi.getCoverageLonLatUriVehicleJourneys(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehicleJourneysApi/#getcoveragelonlaturivehiclejourneysid","title":"getCoverageLonLatUriVehicleJourneysId","text":""},{"location":"expert/android/api/VehicleJourneysApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/VehicleJourneysApi/#return_1","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>ExpertSdk.getInstance().vehicleJourneysApi.getCoverageLonLatUriVehicleJourneysId(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehicleJourneysApi/#getcoveragelonlatvehiclejourneys","title":"getCoverageLonLatVehicleJourneys","text":""},{"location":"expert/android/api/VehicleJourneysApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/VehicleJourneysApi/#return_2","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>ExpertSdk.getInstance().vehicleJourneysApi.getCoverageLonLatVehicleJourneys(\n    lon = 0.0,\n    lat = 0.0,\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehicleJourneysApi/#getcoveragelonlatvehiclejourneysid","title":"getCoverageLonLatVehicleJourneysId","text":""},{"location":"expert/android/api/VehicleJourneysApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/VehicleJourneysApi/#return_3","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>ExpertSdk.getInstance().vehicleJourneysApi.getCoverageLonLatVehicleJourneysId(\n    lon = 0.0,\n    lat = 0.0,\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehicleJourneysApi/#getcoverageregionurivehiclejourneys","title":"getCoverageRegionUriVehicleJourneys","text":""},{"location":"expert/android/api/VehicleJourneysApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/VehicleJourneysApi/#return_4","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>ExpertSdk.getInstance().vehicleJourneysApi.getCoverageRegionUriVehicleJourneys(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehicleJourneysApi/#getcoverageregionurivehiclejourneysid","title":"getCoverageRegionUriVehicleJourneysId","text":""},{"location":"expert/android/api/VehicleJourneysApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/VehicleJourneysApi/#return_5","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>ExpertSdk.getInstance().vehicleJourneysApi.getCoverageRegionUriVehicleJourneysId(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehicleJourneysApi/#getcoverageregionvehiclejourneys","title":"getCoverageRegionVehicleJourneys","text":""},{"location":"expert/android/api/VehicleJourneysApi/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/VehicleJourneysApi/#return_6","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>ExpertSdk.getInstance().vehicleJourneysApi.getCoverageRegionVehicleJourneys(\n    region = \"region_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehicleJourneysApi/#getcoverageregionvehiclejourneysid","title":"getCoverageRegionVehicleJourneysId","text":""},{"location":"expert/android/api/VehicleJourneysApi/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/VehicleJourneysApi/#return_7","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>ExpertSdk.getInstance().vehicleJourneysApi.getCoverageRegionVehicleJourneysId(\n    region = \"region_example\",\n    id = \"id_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    externalCode = \"externalCode_example\",\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehicleJourneysApi/#getvehiclejourneys","title":"getVehicleJourneys","text":""},{"location":"expert/android/api/VehicleJourneysApi/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId List DEPRECATED, replaced by <code>forbidden_uris[]</code> [optional] forbiddenUris List forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: all, with_stops, zonal, scheduled] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using <code>&amp;data_freshness=base_schedule</code> will return all original vehicle_journeys onlywhereas using <code>&amp;data_freshness=realtime</code> will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since LocalDateTime filters objects not valid before this date [optional] until LocalDateTime filters objects not valid after this date [optional] disableGeojson Boolean remove geojson from the response [optional] disableDisruption Boolean remove disruptions from the response [optional] filter String The filter parameter [optional] tags List If filled, will restrain the search within the given disruption tags [optional] language String Here, select a specific language for disruption message [optional] [enum: nl-NL, en-US, en-GB, fr-FR, de-DE, hi-IN, it-IT, ja-JP, pt-PT, ru-RU, es-ES]"},{"location":"expert/android/api/VehicleJourneysApi/#return_8","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>ExpertSdk.getInstance().vehicleJourneysApi.getVehicleJourneys(\n    externalCode = \"externalCode_example\",\n    startPage = 123,\n    count = 123,\n    depth = 123,\n    forbiddenId = listOf(),\n    forbiddenUris = listOf(),\n    headsign = \"headsign_example\",\n    odtLevel = \"odtLevel_example\",\n    dataFreshness = \"dataFreshness_example\",\n    distance = 123,\n    since = LocalDateTime.now(),\n    until = LocalDateTime.now(),\n    disableGeojson = true,\n    disableDisruption = true,\n    filter = \"filter_example\",\n    tags = listOf(),\n    language = \"language_example\"\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehiclePositionsApi/","title":"VehiclePositionsApi","text":"Method HTTP request getCoordLonLatVehiclePositions GET coord/{lon};{lat}/vehicle_positions getCoordsLonLatVehiclePositions GET coords/{lon};{lat}/vehicle_positions getCoverageLonLatUriVehiclePositions GET coverage/{lon};{lat}/{uri}/vehicle_positions getCoverageLonLatVehiclePositions GET coverage/{lon};{lat}/vehicle_positions getCoverageRegionUriVehiclePositions GET coverage/{region}/{uri}/vehicle_positions getCoverageRegionVehiclePositions GET coverage/{region}/vehicle_positions"},{"location":"expert/android/api/VehiclePositionsApi/#getcoordlonlatvehiclepositions","title":"getCoordLonLatVehiclePositions","text":""},{"location":"expert/android/api/VehiclePositionsApi/#parameters","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/VehiclePositionsApi/#return","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>ExpertSdk.getInstance().vehiclePositionsApi.getCoordLonLatVehiclePositions(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehiclePositionsApi/#getcoordslonlatvehiclepositions","title":"getCoordsLonLatVehiclePositions","text":""},{"location":"expert/android/api/VehiclePositionsApi/#parameters_1","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/VehiclePositionsApi/#return_1","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>ExpertSdk.getInstance().vehiclePositionsApi.getCoordsLonLatVehiclePositions(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehiclePositionsApi/#getcoveragelonlaturivehiclepositions","title":"getCoverageLonLatUriVehiclePositions","text":""},{"location":"expert/android/api/VehiclePositionsApi/#parameters_2","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/VehiclePositionsApi/#return_2","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>ExpertSdk.getInstance().vehiclePositionsApi.getCoverageLonLatUriVehiclePositions(\n    lon = 0.0,\n    lat = 0.0,\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehiclePositionsApi/#getcoveragelonlatvehiclepositions","title":"getCoverageLonLatVehiclePositions","text":""},{"location":"expert/android/api/VehiclePositionsApi/#parameters_3","title":"Parameters","text":"Name Type Note lon Double The longitude of where the coord you want to query lat Double The latitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/VehiclePositionsApi/#return_3","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>ExpertSdk.getInstance().vehiclePositionsApi.getCoverageLonLatVehiclePositions(\n    lon = 0.0,\n    lat = 0.0,\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehiclePositionsApi/#getcoverageregionurivehiclepositions","title":"getCoverageRegionUriVehiclePositions","text":""},{"location":"expert/android/api/VehiclePositionsApi/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/VehiclePositionsApi/#return_4","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>ExpertSdk.getInstance().vehiclePositionsApi.getCoverageRegionUriVehiclePositions(\n    region = \"region_example\",\n    uri = \"uri_example\",\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/api/VehiclePositionsApi/#getcoverageregionvehiclepositions","title":"getCoverageRegionVehiclePositions","text":""},{"location":"expert/android/api/VehiclePositionsApi/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris List forbidden uris [optional]"},{"location":"expert/android/api/VehiclePositionsApi/#return_5","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>ExpertSdk.getInstance().vehiclePositionsApi.getCoverageRegionVehiclePositions(\n    region = \"region_example\",\n    depth = 123,\n    count = 123,\n    filter = \"filter_example\",\n    startPage = 123,\n    forbiddenUris = listOf()\n)\n\nif (response.isSuccessful &amp;&amp; response.body() != null) {  \n    // Success\n    val content = response.body()  \n} else {  \n    // Error\n} \n</code></pre>"},{"location":"expert/android/model/AccessPoint/","title":"AccessPoint","text":""},{"location":"expert/android/model/AccessPoint/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object coord Coord [optional] accessPointCode String [optional] embeddedType EmbeddedType"},{"location":"expert/android/model/AccessPoint/#embeddedtype","title":"EmbeddedType","text":"Name Value PT_ACCESS_POINT \"pt_access_point\" POI_ACCESS_POINT \"poi_access_point\""},{"location":"expert/android/model/AccessPoints/","title":"AccessPoints","text":""},{"location":"expert/android/model/AccessPoints/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] accessPoints List warnings List"},{"location":"expert/android/model/Address/","title":"Address","text":""},{"location":"expert/android/model/Address/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object houseNumber Int coord Coord [optional] label String [optional] administrativeRegions List [optional]"},{"location":"expert/android/model/Admin/","title":"Admin","text":""},{"location":"expert/android/model/Admin/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object level Int [optional] zipCode String label String [optional] insee String [optional] coord Coord [optional]"},{"location":"expert/android/model/AirPollutants/","title":"AirPollutants","text":""},{"location":"expert/android/model/AirPollutants/#properties","title":"Properties","text":"Name Type Note unit String [optional] values PollutantValue [optional]"},{"location":"expert/android/model/Amount/","title":"Amount","text":""},{"location":"expert/android/model/Amount/#properties","title":"Properties","text":"Name Type Note value Float [optional] unit String [optional]"},{"location":"expert/android/model/ApplicationPattern/","title":"ApplicationPattern","text":""},{"location":"expert/android/model/ApplicationPattern/#properties","title":"Properties","text":"Name Type Note weekPattern WeekPattern [optional] applicationPeriod PeriodDate [optional] timeSlots List [optional]"},{"location":"expert/android/model/Arrivals/","title":"Arrivals","text":""},{"location":"expert/android/model/Arrivals/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] exceptions List [optional] arrivals List"},{"location":"expert/android/model/BetaEndpoints/","title":"BetaEndpoints","text":""},{"location":"expert/android/model/BetaEndpoints/#properties","title":"Properties","text":"Name Type Note id String message String"},{"location":"expert/android/model/BookingRule/","title":"BookingRule","text":""},{"location":"expert/android/model/BookingRule/#properties","title":"Properties","text":"Name Type Note name String infoUrl String message String phoneNumber String bookingUrl String appliesOn List [optional]"},{"location":"expert/android/model/BookingRule/#applieson","title":"AppliesOn","text":"Name Value FROM \"from\" TO \"to\""},{"location":"expert/android/model/CO2/","title":"CO2","text":""},{"location":"expert/android/model/CO2/#properties","title":"Properties","text":"Name Type Note co2Emission Amount [optional] airPollutants AirPollutants [optional]"},{"location":"expert/android/model/CO2EmissionRate/","title":"CO2EmissionRate","text":""},{"location":"expert/android/model/CO2EmissionRate/#properties","title":"Properties","text":"Name Type Note value Float [optional] unit String [optional]"},{"location":"expert/android/model/Calendar/","title":"Calendar","text":""},{"location":"expert/android/model/Calendar/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object [optional] name String Name of the object [optional] weekPattern WeekPattern [optional] validityPattern ValidityPattern [optional] exceptions List [optional] activePeriods List [optional]"},{"location":"expert/android/model/CalendarException/","title":"CalendarException","text":""},{"location":"expert/android/model/CalendarException/#properties","title":"Properties","text":"Name Type Note datetime String [optional] type String [optional]"},{"location":"expert/android/model/CalendarPeriod/","title":"CalendarPeriod","text":""},{"location":"expert/android/model/CalendarPeriod/#properties","title":"Properties","text":"Name Type Note begin String [optional] end String [optional]"},{"location":"expert/android/model/Calendars/","title":"Calendars","text":""},{"location":"expert/android/model/Calendars/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] calendars List"},{"location":"expert/android/model/CarPark/","title":"CarPark","text":""},{"location":"expert/android/model/CarPark/#properties","title":"Properties","text":"Name Type Note available Int [optional] occupied Int [optional] availablePRM Int [optional] occupiedPRM Int [optional] totalPlaces Int [optional] availableRidesharing Int [optional] occupiedRidesharing Int [optional] availableElectricVehicle Int [optional] occupiedElectricVehicle Int [optional] state String [optional] availability Boolean"},{"location":"expert/android/model/Cause/","title":"Cause","text":""},{"location":"expert/android/model/Cause/#properties","title":"Properties","text":"Name Type Note label String [optional]"},{"location":"expert/android/model/CellLatSchema/","title":"CellLatSchema","text":""},{"location":"expert/android/model/CellLatSchema/#properties","title":"Properties","text":"Name Type Note minLat Float [optional] maxLat Float [optional] centerLat Float [optional]"},{"location":"expert/android/model/CellLonSchema/","title":"CellLonSchema","text":""},{"location":"expert/android/model/CellLonSchema/#properties","title":"Properties","text":"Name Type Note centerLon Float [optional] maxLon Float [optional] minLon Float [optional]"},{"location":"expert/android/model/Channel/","title":"Channel","text":""},{"location":"expert/android/model/Channel/#properties","title":"Properties","text":"Name Type Note contentType String id String name String types List [optional]"},{"location":"expert/android/model/Channel/#types","title":"Types","text":"Name Value WEB \"web\" SMS \"sms\" EMAIL \"email\" MOBILE \"mobile\" NOTIFICATION \"notification\" TWITTER \"twitter\" FACEBOOK \"facebook\" UNKNOWN_TYPE \"unknown_type\" TITLE \"title\" BEACON \"beacon\" PIDS \"pids\""},{"location":"expert/android/model/Code/","title":"Code","text":""},{"location":"expert/android/model/Code/#properties","title":"Properties","text":"Name Type Note type String [optional] value String [optional]"},{"location":"expert/android/model/Comment/","title":"Comment","text":""},{"location":"expert/android/model/Comment/#properties","title":"Properties","text":"Name Type Note value String [optional] type String [optional]"},{"location":"expert/android/model/CommercialMode/","title":"CommercialMode","text":""},{"location":"expert/android/model/CommercialMode/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object"},{"location":"expert/android/model/CommercialModes/","title":"CommercialModes","text":""},{"location":"expert/android/model/CommercialModes/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] commercialModes List [optional]"},{"location":"expert/android/model/Companie/","title":"Companie","text":""},{"location":"expert/android/model/Companie/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object codes List<code>"},{"location":"expert/android/model/Companies/","title":"Companies","text":""},{"location":"expert/android/model/Companies/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] companies List [optional]"},{"location":"expert/android/model/Context/","title":"Context","text":""},{"location":"expert/android/model/Context/#properties","title":"Properties","text":"Name Type Note carDirectPath CO2 [optional] currentDatetime String The datetime of the request (considered as \\\"now\\\") [optional] timezone String Timezone of any datetime in the response, default value Africa/Abidjan (UTC) [optional]"},{"location":"expert/android/model/Contributor/","title":"Contributor","text":""},{"location":"expert/android/model/Contributor/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object website String [optional] license String [optional]"},{"location":"expert/android/model/Contributors/","title":"Contributors","text":""},{"location":"expert/android/model/Contributors/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] contributors List [optional]"},{"location":"expert/android/model/Coord/","title":"Coord","text":""},{"location":"expert/android/model/Coord/#properties","title":"Properties","text":"Name Type Note lon String lat String"},{"location":"expert/android/model/Cost/","title":"Cost","text":""},{"location":"expert/android/model/Cost/#properties","title":"Properties","text":"Name Type Note value String currency String [optional]"},{"location":"expert/android/model/Coverage/","title":"Coverage","text":""},{"location":"expert/android/model/Coverage/#properties","title":"Properties","text":"Name Type Note id String Identifier of the coverage startProductionDate String Beginning of the production period. We only have data on this production period [optional] endProductionDate String End of the production period. We only have data on this production period [optional] lastLoadAt String Datetime of the last data loading [optional] name String Name of the coverage status String [optional] shape String GeoJSON of the shape of the coverage error CoverageError [optional] datasetCreatedAt String Creation date of the dataset [optional]"},{"location":"expert/android/model/CoverageError/","title":"CoverageError","text":""},{"location":"expert/android/model/CoverageError/#properties","title":"Properties","text":"Name Type Note code String [optional] value String [optional]"},{"location":"expert/android/model/Coverages/","title":"Coverages","text":""},{"location":"expert/android/model/Coverages/#properties","title":"Properties","text":"Name Type Note regions List links List [optional] context Context [optional]"},{"location":"expert/android/model/CurrentAvailability/","title":"CurrentAvailability","text":""},{"location":"expert/android/model/CurrentAvailability/#properties","title":"Properties","text":"Name Type Note status Status [optional] periods List [optional] updatedAt String [optional] cause Cause [optional] effect Effect [optional]"},{"location":"expert/android/model/CurrentAvailability/#status","title":"Status","text":"Name Value UNKNOWN \"unknown\" AVAILABLE \"available\" UNAVAILABLE \"unavailable\""},{"location":"expert/android/model/Dataset/","title":"Dataset","text":""},{"location":"expert/android/model/Dataset/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object description String [optional] startValidationDate String Start of the validity period for the dataset [optional] endValidationDate String End of the validity period for the dataset [optional] system String Type of dataset provided (GTFS, Chouette, ...) [optional] realtimeLevel String [optional] contributor Contributor Contributor providing the dataset [optional]"},{"location":"expert/android/model/Datasets/","title":"Datasets","text":""},{"location":"expert/android/model/Datasets/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] datasets List [optional] context Context [optional]"},{"location":"expert/android/model/DateTimeType/","title":"DateTimeType","text":""},{"location":"expert/android/model/DateTimeType/#properties","title":"Properties","text":"Name Type Note dateTime String baseDateTime String [optional] additionalInformations List links List dataFreshness String occupancy String [optional]"},{"location":"expert/android/model/Departures/","title":"Departures","text":""},{"location":"expert/android/model/Departures/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] exceptions List [optional] departures List"},{"location":"expert/android/model/DictAddresses/","title":"DictAddresses","text":""},{"location":"expert/android/model/DictAddresses/#properties","title":"Properties","text":"Name Type Note address Address [optional] context Context [optional] regions List message String [optional]"},{"location":"expert/android/model/Disruption/","title":"Disruption","text":""},{"location":"expert/android/model/Disruption/#properties","title":"Properties","text":"Name Type Note id String disruptionId String [optional] impactId String [optional] applicationPeriods List [optional] applicationPatterns List [optional] status Status [optional] updatedAt String [optional] tags List [optional] cause String category String [optional] severity Severity [optional] messages List [optional] impactedObjects List [optional] uri String [optional] disruptionUri String [optional] contributor String properties List [optional]"},{"location":"expert/android/model/Disruption/#status","title":"Status","text":"Name Value PAST \"past\" ACTIVE \"active\" FUTURE \"future\""},{"location":"expert/android/model/DisruptionProperty/","title":"DisruptionProperty","text":""},{"location":"expert/android/model/DisruptionProperty/#properties","title":"Properties","text":"Name Type Note key String [optional] type String [optional] value String [optional]"},{"location":"expert/android/model/Disruptions/","title":"Disruptions","text":""},{"location":"expert/android/model/Disruptions/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional]"},{"location":"expert/android/model/Distances/","title":"Distances","text":""},{"location":"expert/android/model/Distances/#properties","title":"Properties","text":"Name Type Note walking Int Total walking distance of the journey (meters) bike Int Total distance by bike of the journey (meters) car Int Total distance by car of the journey (meters) ridesharing Int Total distance by ridesharing of the journey (meters) taxi Int Total distance by taxi of the journey (meters)"},{"location":"expert/android/model/Durations/","title":"Durations","text":""},{"location":"expert/android/model/Durations/#properties","title":"Properties","text":"Name Type Note total Int Total duration of the journey (seconds) walking Int Total walking duration of the journey (seconds) bike Int Total duration by bike of the journey (seconds) car Int Total duration by car of the journey (seconds) ridesharing Int Total duration by ridesharing of the journey (seconds) taxi Int Total duration by taxi of the journey (seconds)"},{"location":"expert/android/model/DynamicSpeed/","title":"DynamicSpeed","text":""},{"location":"expert/android/model/DynamicSpeed/#properties","title":"Properties","text":"Name Type Note baseSpeed Float [optional] trafficSpeed Float [optional] geojsonOffset Int [optional]"},{"location":"expert/android/model/Effect/","title":"Effect","text":""},{"location":"expert/android/model/Effect/#properties","title":"Properties","text":"Name Type Note label String [optional]"},{"location":"expert/android/model/Elevation/","title":"Elevation","text":""},{"location":"expert/android/model/Elevation/#properties","title":"Properties","text":"Name Type Note distanceFromStart Int elevation Int geojsonOffset Int [optional]"},{"location":"expert/android/model/EquipmentDetails/","title":"EquipmentDetails","text":""},{"location":"expert/android/model/EquipmentDetails/#properties","title":"Properties","text":"Name Type Note id String [optional] name String [optional] embeddedType EmbeddedType [optional] currentAvailability CurrentAvailability [optional]"},{"location":"expert/android/model/EquipmentDetails/#embeddedtype","title":"EmbeddedType","text":"Name Value ESCALATOR \"escalator\" ELEVATOR \"elevator\""},{"location":"expert/android/model/EquipmentReport/","title":"EquipmentReport","text":""},{"location":"expert/android/model/EquipmentReport/#properties","title":"Properties","text":"Name Type Note line Line [optional] stopAreaEquipments List [optional]"},{"location":"expert/android/model/EquipmentReports/","title":"EquipmentReports","text":""},{"location":"expert/android/model/EquipmentReports/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] equipmentReports List warnings List"},{"location":"expert/android/model/Error/","title":"Error","text":""},{"location":"expert/android/model/Error/#properties","title":"Properties","text":"Name Type Note id String message String [optional]"},{"location":"expert/android/model/Exception/","title":"Exception","text":""},{"location":"expert/android/model/Exception/#properties","title":"Properties","text":"Name Type Note type String [optional] id String date String [optional]"},{"location":"expert/android/model/Fare/","title":"Fare","text":""},{"location":"expert/android/model/Fare/#properties","title":"Properties","text":"Name Type Note found Boolean [optional] total Cost [optional] links List"},{"location":"expert/android/model/FareZone/","title":"FareZone","text":""},{"location":"expert/android/model/FareZone/#properties","title":"Properties","text":"Name Type Note name String [optional]"},{"location":"expert/android/model/FeedPublisher/","title":"FeedPublisher","text":""},{"location":"expert/android/model/FeedPublisher/#properties","title":"Properties","text":"Name Type Note id String name String [optional] url String [optional] license String [optional]"},{"location":"expert/android/model/FreeFloatings/","title":"FreeFloatings","text":""},{"location":"expert/android/model/FreeFloatings/#properties","title":"Properties","text":"Name Type Note freeFloatings List pagination Any warnings List"},{"location":"expert/android/model/FreeFloatings_coord/","title":"FreeFloatingsCoord","text":""},{"location":"expert/android/model/FreeFloatings_coord/#properties","title":"Properties","text":"Name Type Note lat String lon String"},{"location":"expert/android/model/FreeFloatings_free_floatings/","title":"FreeFloatingsFreeFloatings","text":""},{"location":"expert/android/model/FreeFloatings_free_floatings/#properties","title":"Properties","text":"Name Type Note publicId String [optional] providerName String [optional] id String [optional] type Type [optional] propulsion String [optional] battery Int [optional] distance Int [optional] deeplink String [optional] coord FreeFloatingsCoord [optional]"},{"location":"expert/android/model/FreeFloatings_free_floatings/#type","title":"Type","text":"Name Value BIKE \"BIKE\" SCOOTER \"SCOOTER\" MOTORSCOOTER \"MOTORSCOOTER\" STATION \"STATION\" CAR \"CAR\" OTHER \"OTHER\""},{"location":"expert/android/model/GeoStatus/","title":"GeoStatus","text":""},{"location":"expert/android/model/GeoStatus/#properties","title":"Properties","text":"Name Type Note nbAddresses Int [optional] nbAdmins Int [optional] nbAdminsFromCities Int [optional] nbPois Int [optional] nbWays Int [optional] poiSources List streetNetworkSources List"},{"location":"expert/android/model/GeoStatus_1/","title":"GeoStatus1","text":""},{"location":"expert/android/model/GeoStatus_1/#properties","title":"Properties","text":"Name Type Note geoStatus GeoStatus context Context [optional]"},{"location":"expert/android/model/GraphicalIsrochone/","title":"GraphicalIsrochone","text":""},{"location":"expert/android/model/GraphicalIsrochone/#properties","title":"Properties","text":"Name Type Note geojson GraphicalIsrochoneGeojson [optional] maxDuration Int [optional] minDuration Int [optional] from Place [optional] to Place [optional] requestedDateTime String [optional] minDateTime String [optional] maxDateTime String [optional]"},{"location":"expert/android/model/GraphicalIsrochone_1/","title":"GraphicalIsrochone1","text":""},{"location":"expert/android/model/GraphicalIsrochone_1/#properties","title":"Properties","text":"Name Type Note error Error [optional] feedPublishers List links List isochrones List warnings List context Context [optional]"},{"location":"expert/android/model/GraphicalIsrochone_geojson/","title":"GraphicalIsrochoneGeojson","text":""},{"location":"expert/android/model/GraphicalIsrochone_geojson/#properties","title":"Properties","text":"Name Type Note coordinates List&gt;&gt;&gt; [optional]"},{"location":"expert/android/model/Header/","title":"Header","text":""},{"location":"expert/android/model/Header/#properties","title":"Properties","text":"Name Type Note additionalInformations List displayInformations VJDisplayInformation [optional] links List [optional]"},{"location":"expert/android/model/HeatMap/","title":"HeatMap","text":""},{"location":"expert/android/model/HeatMap/#properties","title":"Properties","text":"Name Type Note heatMatrix HeatMatrixSchema [optional] from Place [optional] to Place [optional] requestedDateTime String [optional]"},{"location":"expert/android/model/HeatMap_1/","title":"HeatMap1","text":""},{"location":"expert/android/model/HeatMap_1/#properties","title":"Properties","text":"Name Type Note error Error [optional] feedPublishers List links List heatMaps List warnings List context Context [optional]"},{"location":"expert/android/model/HeatMatrixSchema/","title":"HeatMatrixSchema","text":""},{"location":"expert/android/model/HeatMatrixSchema/#properties","title":"Properties","text":"Name Type Note lineHeaders List lines List"},{"location":"expert/android/model/Impacted/","title":"Impacted","text":""},{"location":"expert/android/model/Impacted/#properties","title":"Properties","text":"Name Type Note ptObject PtObject [optional] impactedStops List [optional] impactedSection ImpactedSection [optional] impactedRailSection ImpactedSection [optional]"},{"location":"expert/android/model/ImpactedSection/","title":"ImpactedSection","text":""},{"location":"expert/android/model/ImpactedSection/#properties","title":"Properties","text":"Name Type Note from PtObject [optional] to PtObject [optional] routes List [optional]"},{"location":"expert/android/model/ImpactedStop/","title":"ImpactedStop","text":""},{"location":"expert/android/model/ImpactedStop/#properties","title":"Properties","text":"Name Type Note stopPoint StopPoint [optional] baseArrivalTime String [optional] baseDepartureTime String [optional] amendedArrivalTime String [optional] amendedDepartureTime String [optional] cause String stopTimeEffect StopTimeEffect [optional] departureStatus String [optional] arrivalStatus String [optional] isDetour Boolean"},{"location":"expert/android/model/ImpactedStop/#stoptimeeffect","title":"StopTimeEffect","text":"Name Value DELAYED \"delayed\" ADDED \"added\" DELETED \"deleted\" UNCHANGED \"unchanged\""},{"location":"expert/android/model/IndividualInformation/","title":"IndividualInformation","text":""},{"location":"expert/android/model/IndividualInformation/#properties","title":"Properties","text":"Name Type Note alias String image String [optional] gender Gender [optional] rating IndividualRating [optional]"},{"location":"expert/android/model/IndividualInformation/#gender","title":"Gender","text":"Name Value FEMALE \"female\" MALE \"male\""},{"location":"expert/android/model/IndividualRating/","title":"IndividualRating","text":""},{"location":"expert/android/model/IndividualRating/#properties","title":"Properties","text":"Name Type Note value Float count Int [optional] scaleMin Float [optional] scaleMax Float [optional]"},{"location":"expert/android/model/Journey/","title":"Journey","text":""},{"location":"expert/android/model/Journey/#properties","title":"Properties","text":"Name Type Note duration Int Duration of the journey (seconds) nbTransfers Int Number of transfers along the journey departureDateTime String Departure date and time of the journey [optional] arrivalDateTime String Arrival date and time of the journey [optional] requestedDateTime String [optional] to Place [optional] from Place [optional] type String Used to qualify the journey (can be \\\"best\\\", \\\"comfort\\\", \\\"non_pt_walk\\\", ... status String Status from the whole journey taking into account the most disturbing information retrieved on PT object used (can be \\\"NO_SERVICE\\\", \\\"SIGNIFICANT_DELAYS\\\", ...). A base-schedule journey using a stop-time that is deleted in realtime will have a NO_SERVICE status (no matter the effect of the disruption causing it). tags List co2Emission Amount airPollutants AirPollutants [optional] lowEmissionZone LowEmissionZone [optional] durations Durations [optional] distances Distances [optional] fare Fare calendars List [optional] sections List [optional] debug JourneyDebug [optional] links List [optional]"},{"location":"expert/android/model/JourneyDebug/","title":"JourneyDebug","text":""},{"location":"expert/android/model/JourneyDebug/#properties","title":"Properties","text":"Name Type Note streetnetworkDuration Int Total duration of streetnetwork use (seconds) transferDuration Int Total duration of transfers (seconds) minWaitingDuration Int Minimum on all waiting durations (seconds) nbVjExtentions Int Number of stay-in nbSections Int Number of sections internalId String [optional]"},{"location":"expert/android/model/JourneyPattern/","title":"JourneyPattern","text":""},{"location":"expert/android/model/JourneyPattern/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object journeyPatternPoints List [optional] route Route [optional]"},{"location":"expert/android/model/JourneyPatternPoint/","title":"JourneyPatternPoint","text":""},{"location":"expert/android/model/JourneyPatternPoint/#properties","title":"Properties","text":"Name Type Note id String stopPoint StopPoint [optional]"},{"location":"expert/android/model/JourneyPatternPoints/","title":"JourneyPatternPoints","text":""},{"location":"expert/android/model/JourneyPatternPoints/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] journeyPatternPoints List [optional]"},{"location":"expert/android/model/JourneyPatterns/","title":"JourneyPatterns","text":""},{"location":"expert/android/model/JourneyPatterns/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] journeyPatterns List [optional]"},{"location":"expert/android/model/Journeys/","title":"Journeys","text":""},{"location":"expert/android/model/Journeys/#properties","title":"Properties","text":"Name Type Note error Error [optional] feedPublishers List links List journeys List [optional] tickets List disruptions List terminus List context Context [optional] notes List [optional] exceptions List [optional]"},{"location":"expert/android/model/Line/","title":"Line","text":""},{"location":"expert/android/model/Line/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object code String color String [optional] textColor String [optional] comments List [optional] comment String [optional] codes List<code> [optional] physicalModes List [optional] commercialMode CommercialMode [optional] routes List [optional] network Network [optional] openingTime String [optional] closingTime String [optional] properties List [optional] geojson MultiLineStringSchema [optional] links List lineGroups List [optional]"},{"location":"expert/android/model/LineGroup/","title":"LineGroup","text":""},{"location":"expert/android/model/LineGroup/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object lines List [optional] mainLine Line [optional] comments List"},{"location":"expert/android/model/LineGroups/","title":"LineGroups","text":""},{"location":"expert/android/model/LineGroups/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] lineGroups List [optional]"},{"location":"expert/android/model/LineHeadersSchema/","title":"LineHeadersSchema","text":""},{"location":"expert/android/model/LineHeadersSchema/#properties","title":"Properties","text":"Name Type Note cellLat CellLatSchema"},{"location":"expert/android/model/LineReport/","title":"LineReport","text":""},{"location":"expert/android/model/LineReport/#properties","title":"Properties","text":"Name Type Note line Line [optional] ptObjects List"},{"location":"expert/android/model/LineReports/","title":"LineReports","text":""},{"location":"expert/android/model/LineReports/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] lineReports List warnings List"},{"location":"expert/android/model/Lines/","title":"Lines","text":""},{"location":"expert/android/model/Lines/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] lines List [optional]"},{"location":"expert/android/model/LinesSchema/","title":"LinesSchema","text":""},{"location":"expert/android/model/LinesSchema/#properties","title":"Properties","text":"Name Type Note duration List [optional] cellLon CellLonSchema"},{"location":"expert/android/model/LinkSchema/","title":"LinkSchema","text":""},{"location":"expert/android/model/LinkSchema/#properties","title":"Properties","text":"Name Type Note id String [optional] title String [optional] rel String [optional] templated Boolean [optional] `internal` Boolean [optional] type String [optional] href String [optional] value String [optional] category String [optional] commentType String [optional]"},{"location":"expert/android/model/LowEmissionZone/","title":"LowEmissionZone","text":""},{"location":"expert/android/model/LowEmissionZone/#properties","title":"Properties","text":"Name Type Note onPath Boolean [optional]"},{"location":"expert/android/model/Message/","title":"Message","text":""},{"location":"expert/android/model/Message/#properties","title":"Properties","text":"Name Type Note text String [optional] channel Channel [optional]"},{"location":"expert/android/model/MultiLineStringSchema/","title":"MultiLineStringSchema","text":""},{"location":"expert/android/model/MultiLineStringSchema/#properties","title":"Properties","text":"Name Type Note type String [optional] coordinates List&gt;&gt; [optional]"},{"location":"expert/android/model/Network/","title":"Network","text":""},{"location":"expert/android/model/Network/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object links List codes List<code> [optional]"},{"location":"expert/android/model/Networks/","title":"Networks","text":""},{"location":"expert/android/model/Networks/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] networks List [optional]"},{"location":"expert/android/model/Note/","title":"Note","text":""},{"location":"expert/android/model/Note/#properties","title":"Properties","text":"Name Type Note type String [optional] id String value String [optional] category Category [optional] commentType String [optional]"},{"location":"expert/android/model/Note/#category","title":"Category","text":"Name Value COMMENT \"comment\" TERMINUS \"terminus\""},{"location":"expert/android/model/Obstacles/","title":"Obstacles","text":""},{"location":"expert/android/model/Obstacles/#properties","title":"Properties","text":"Name Type Note obstacles List pagination Any warnings List"},{"location":"expert/android/model/Obstacles_obstacles/","title":"ObstaclesObstacles","text":""},{"location":"expert/android/model/Obstacles_obstacles/#properties","title":"Properties","text":"Name Type Note id String [optional] type String [optional] coord FreeFloatingsCoord [optional] photo String [optional] distance Int [optional]"},{"location":"expert/android/model/Pagination/","title":"Pagination","text":""},{"location":"expert/android/model/Pagination/#properties","title":"Properties","text":"Name Type Note totalResult Int startPage Int itemsPerPage Int itemsOnPage Int"},{"location":"expert/android/model/Passage/","title":"Passage","text":""},{"location":"expert/android/model/Passage/#properties","title":"Properties","text":"Name Type Note route Route [optional] stopPoint StopPoint [optional] stopDateTime StopDateTime [optional] displayInformations PassageDisplayInformation [optional] links List [optional]"},{"location":"expert/android/model/PassageDisplayInformation/","title":"PassageDisplayInformation","text":""},{"location":"expert/android/model/PassageDisplayInformation/#properties","title":"Properties","text":"Name Type Note commercialMode String [optional] network String [optional] direction String label String [optional] color String [optional] code String [optional] headsign String name String [optional] links List textColor String [optional] tripShortName String [optional] description String [optional] physicalMode String [optional] equipments List headsigns List [optional]"},{"location":"expert/android/model/PassageDisplayInformation/#equipments","title":"Equipments","text":"Name Value WHEELCHAIR_ACCESSIBILITY \"has_wheelchair_accessibility\" BIKE_ACCEPTED \"has_bike_accepted\" AIR_CONDITIONED \"has_air_conditioned\" VISUAL_ANNOUNCEMENT \"has_visual_announcement\" AUDIBLE_ANNOUNCEMENT \"has_audible_announcement\" APPROPRIATE_ESCORT \"has_appropriate_escort\" APPROPRIATE_SIGNAGE \"has_appropriate_signage\" SCHOOL_VEHICLE \"has_school_vehicle\" WHEELCHAIR_BOARDING \"has_wheelchair_boarding\" SHELTERED \"has_sheltered\" ELEVATOR \"has_elevator\" ESCALATOR \"has_escalator\" BIKE_DEPOT \"has_bike_depot\""},{"location":"expert/android/model/Path/","title":"Path","text":""},{"location":"expert/android/model/Path/#properties","title":"Properties","text":"Name Type Note id Int [optional] length Int name String duration Int direction Int instruction String [optional] instructionStartCoordinate Coord [optional] viaUri String [optional]"},{"location":"expert/android/model/PathWay/","title":"PathWay","text":""},{"location":"expert/android/model/PathWay/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object accessPoint AccessPoint [optional] isEntrance Boolean [optional] isExit Boolean [optional] length Int [optional] traversalTime Int [optional] pathwayMode Int [optional] stairCount Int [optional] maxSlope Int [optional] minWidth Int [optional] signpostedAs String [optional] reversedSignpostedAs String [optional]"},{"location":"expert/android/model/Period/","title":"Period","text":""},{"location":"expert/android/model/Period/#properties","title":"Properties","text":"Name Type Note begin String [optional] end String [optional]"},{"location":"expert/android/model/PeriodDate/","title":"PeriodDate","text":""},{"location":"expert/android/model/PeriodDate/#properties","title":"Properties","text":"Name Type Note begin String [optional] end String [optional]"},{"location":"expert/android/model/PeriodTime/","title":"PeriodTime","text":""},{"location":"expert/android/model/PeriodTime/#properties","title":"Properties","text":"Name Type Note begin String [optional] end String [optional]"},{"location":"expert/android/model/PhysicalMode/","title":"PhysicalMode","text":""},{"location":"expert/android/model/PhysicalMode/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object co2EmissionRate CO2EmissionRate co2 emission rate [optional]"},{"location":"expert/android/model/PhysicalModes/","title":"PhysicalModes","text":""},{"location":"expert/android/model/PhysicalModes/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] physicalModes List [optional]"},{"location":"expert/android/model/Place/","title":"Place","text":""},{"location":"expert/android/model/Place/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object quality Int [optional] stopArea StopArea [optional] stopPoint StopPoint [optional] administrativeRegion Admin [optional] embeddedType EmbeddedType address Address [optional] poi Poi [optional] accessPoint PathWay [optional] distance String Distance to the object in meters [optional]"},{"location":"expert/android/model/Place/#embeddedtype","title":"EmbeddedType","text":"Name Value LINE \"line\" JOURNEY_PATTERN \"journey_pattern\" VEHICLE_JOURNEY \"vehicle_journey\" STOP_POINT \"stop_point\" STOP_AREA \"stop_area\" NETWORK \"network\" PHYSICAL_MODE \"physical_mode\" COMMERCIAL_MODE \"commercial_mode\" CONNECTION \"connection\" JOURNEY_PATTERN_POINT \"journey_pattern_point\" COMPANY \"company\" ROUTE \"route\" POI \"poi\" CONTRIBUTOR \"contributor\" ADDRESS \"address\" POITYPE \"poitype\" ADMINISTRATIVE_REGION \"administrative_region\" CALENDAR \"calendar\" LINE_GROUP \"line_group\" IMPACT \"impact\" DATASET \"dataset\" TRIP \"trip\" ACCESS_POINT \"access_point\""},{"location":"expert/android/model/PlaceNearby/","title":"PlaceNearby","text":""},{"location":"expert/android/model/PlaceNearby/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object quality Int [optional] stopArea StopArea [optional] stopPoint StopPoint [optional] administrativeRegion Admin [optional] embeddedType EmbeddedType address Address [optional] poi Poi [optional] accessPoint PathWay [optional] distance String Distance to the object in meters [optional]"},{"location":"expert/android/model/PlaceNearby/#embeddedtype","title":"EmbeddedType","text":"Name Value LINE \"line\" JOURNEY_PATTERN \"journey_pattern\" VEHICLE_JOURNEY \"vehicle_journey\" STOP_POINT \"stop_point\" STOP_AREA \"stop_area\" NETWORK \"network\" PHYSICAL_MODE \"physical_mode\" COMMERCIAL_MODE \"commercial_mode\" CONNECTION \"connection\" JOURNEY_PATTERN_POINT \"journey_pattern_point\" COMPANY \"company\" ROUTE \"route\" POI \"poi\" CONTRIBUTOR \"contributor\" ADDRESS \"address\" POITYPE \"poitype\" ADMINISTRATIVE_REGION \"administrative_region\" CALENDAR \"calendar\" LINE_GROUP \"line_group\" IMPACT \"impact\" DATASET \"dataset\" TRIP \"trip\" ACCESS_POINT \"access_point\""},{"location":"expert/android/model/Places/","title":"Places","text":""},{"location":"expert/android/model/Places/#properties","title":"Properties","text":"Name Type Note error Error [optional] feedPublishers List disruptions List places List [optional] context Context [optional] links List [optional]"},{"location":"expert/android/model/PlacesNearby/","title":"PlacesNearby","text":""},{"location":"expert/android/model/PlacesNearby/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] placesNearby List [optional]"},{"location":"expert/android/model/Poi/","title":"Poi","text":""},{"location":"expert/android/model/Poi/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object coord Coord [optional] links List [optional] label String [optional] administrativeRegions List [optional] poiType PoiType [optional] properties Map [optional] address Address [optional] stands Stands [optional] carPark CarPark [optional]"},{"location":"expert/android/model/PoiType/","title":"PoiType","text":""},{"location":"expert/android/model/PoiType/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object"},{"location":"expert/android/model/PoiTypes/","title":"PoiTypes","text":""},{"location":"expert/android/model/PoiTypes/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] poiTypes List [optional]"},{"location":"expert/android/model/Pois/","title":"Pois","text":""},{"location":"expert/android/model/Pois/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] pois List [optional]"},{"location":"expert/android/model/PollutantValue/","title":"PollutantValue","text":""},{"location":"expert/android/model/PollutantValue/#properties","title":"Properties","text":"Name Type Note nox Float [optional] pm Float [optional]"},{"location":"expert/android/model/Property/","title":"Property","text":""},{"location":"expert/android/model/Property/#properties","title":"Properties","text":"Name Type Note name String [optional] value String [optional]"},{"location":"expert/android/model/PtObject/","title":"PtObject","text":""},{"location":"expert/android/model/PtObject/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object quality Int [optional] stopArea StopArea [optional] stopPoint StopPoint [optional] poi Poi [optional] line Line [optional] network Network [optional] route Route [optional] commercialMode CommercialMode [optional] trip Trip [optional] embeddedType EmbeddedType"},{"location":"expert/android/model/PtObject/#embeddedtype","title":"EmbeddedType","text":"Name Value LINE \"line\" JOURNEY_PATTERN \"journey_pattern\" VEHICLE_JOURNEY \"vehicle_journey\" STOP_POINT \"stop_point\" STOP_AREA \"stop_area\" NETWORK \"network\" PHYSICAL_MODE \"physical_mode\" COMMERCIAL_MODE \"commercial_mode\" CONNECTION \"connection\" JOURNEY_PATTERN_POINT \"journey_pattern_point\" COMPANY \"company\" ROUTE \"route\" POI \"poi\" CONTRIBUTOR \"contributor\" ADDRESS \"address\" POITYPE \"poitype\" ADMINISTRATIVE_REGION \"administrative_region\" CALENDAR \"calendar\" LINE_GROUP \"line_group\" IMPACT \"impact\" DATASET \"dataset\" TRIP \"trip\" ACCESS_POINT \"access_point\""},{"location":"expert/android/model/PtObjects/","title":"PtObjects","text":""},{"location":"expert/android/model/PtObjects/#properties","title":"Properties","text":"Name Type Note error Error [optional] feedPublishers List disruptions List ptObjects List [optional] links List [optional] context Context [optional]"},{"location":"expert/android/model/RidesharingInformation/","title":"RidesharingInformation","text":""},{"location":"expert/android/model/RidesharingInformation/#properties","title":"Properties","text":"Name Type Note `operator` String network String driver IndividualInformation [optional] seats SeatsDescription [optional]"},{"location":"expert/android/model/Route/","title":"Route","text":""},{"location":"expert/android/model/Route/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object isFrequence IsFrequence [optional] directionType String physicalModes List [optional] comments List [optional] codes List<code> [optional] direction Place [optional] geojson MultiLineStringSchema [optional] links List line Line [optional] stopPoints List [optional]"},{"location":"expert/android/model/Route/#isfrequence","title":"IsFrequence","text":"Name Value FALSE \"False\""},{"location":"expert/android/model/RouteDisplayInformation/","title":"RouteDisplayInformation","text":""},{"location":"expert/android/model/RouteDisplayInformation/#properties","title":"Properties","text":"Name Type Note commercialMode String [optional] network String [optional] direction String label String [optional] color String [optional] code String [optional] headsign String name String [optional] links List textColor String [optional] tripShortName String"},{"location":"expert/android/model/RouteSchedule/","title":"RouteSchedule","text":""},{"location":"expert/android/model/RouteSchedule/#properties","title":"Properties","text":"Name Type Note table Table [optional] displayInformations RouteDisplayInformation [optional] geojson MultiLineStringSchema [optional] additionalInformations String links List [optional]"},{"location":"expert/android/model/RouteSchedules/","title":"RouteSchedules","text":""},{"location":"expert/android/model/RouteSchedules/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] exceptions List [optional] routeSchedules List"},{"location":"expert/android/model/Routes/","title":"Routes","text":""},{"location":"expert/android/model/Routes/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] routes List [optional]"},{"location":"expert/android/model/Row/","title":"Row","text":""},{"location":"expert/android/model/Row/#properties","title":"Properties","text":"Name Type Note stopPoint StopPoint [optional] dateTimes List"},{"location":"expert/android/model/SeatsDescription/","title":"SeatsDescription","text":""},{"location":"expert/android/model/SeatsDescription/#properties","title":"Properties","text":"Name Type Note total Int [optional] available Int [optional]"},{"location":"expert/android/model/Section/","title":"Section","text":""},{"location":"expert/android/model/Section/#properties","title":"Properties","text":"Name Type Note id String duration Int Duration of the section (seconds) co2Emission Amount airPollutants AirPollutants [optional] lowEmissionZone LowEmissionZone [optional] transferType TransferType [optional] departureDateTime String Departure date and time of the section [optional] arrivalDateTime String Arrival date and time of the section [optional] baseDepartureDateTime String Base-schedule departure date and time of the section [optional] baseArrivalDateTime String Base-schedule arrival date and time of the section [optional] dataFreshness DataFreshness [optional] to Place [optional] from Place [optional] additionalInformations List [optional] geojson SectionGeoJsonSchema GeoJSON of the shape of the section [optional] mode Mode [optional] type Type [optional] displayInformations VJDisplayInformation [optional] links List stopDateTimes List [optional] path List [optional] ridesharingInformations RidesharingInformation [optional] ridesharingJourneys List [optional] bestBoardingPositions List [optional] cycleLaneLength Int [optional] elevations List [optional] dynamicSpeeds List [optional] vias List [optional] streetInformations List [optional] bookingRule BookingRule [optional]"},{"location":"expert/android/model/Section/#transfertype","title":"TransferType","text":"Name Value WALKING \"walking\" STAY_IN \"stay_in\""},{"location":"expert/android/model/Section/#datafreshness","title":"DataFreshness","text":"Name Value BASE_SCHEDULE \"base_schedule\" ADAPTED_SCHEDULE \"adapted_schedule\" REALTIME \"realtime\""},{"location":"expert/android/model/Section/#additionalinformations","title":"AdditionalInformations","text":"Name Value ODT_WITH_ZONE \"odt_with_zone\" ODT_WITH_STOP_POINT \"odt_with_stop_point\" ODT_WITH_STOP_TIME \"odt_with_stop_time\" HAS_DATETIME_ESTIMATED \"has_datetime_estimated\" REGULAR \"regular\" STAY_IN \"stay_in\""},{"location":"expert/android/model/Section/#mode","title":"Mode","text":"Name Value WALKING \"walking\" BIKE \"bike\" CAR \"car\" BSS \"bss\" RIDESHARING \"ridesharing\" CARNOPARK \"carnopark\" TAXI \"taxi\""},{"location":"expert/android/model/Section/#type","title":"Type","text":"Name Value PUBLIC_TRANSPORT \"public_transport\" STREET_NETWORK \"street_network\" WAITING \"waiting\" TRANSFER \"transfer\" BOARDING \"boarding\" LANDING \"landing\" BSS_RENT \"bss_rent\" BSS_PUT_BACK \"bss_put_back\" CROW_FLY \"crow_fly\" PARK \"park\" LEAVE_PARKING \"leave_parking\" ALIGHTING \"alighting\" RIDESHARING \"ridesharing\" ON_DEMAND_TRANSPORT \"on_demand_transport\""},{"location":"expert/android/model/Section/#bestboardingpositions","title":"BestBoardingPositions","text":"Name Value FRONT \"front\" MIDDLE \"middle\" BACK \"back\""},{"location":"expert/android/model/SectionGeoJsonSchema/","title":"SectionGeoJsonSchema","text":""},{"location":"expert/android/model/SectionGeoJsonSchema/#properties","title":"Properties","text":"Name Type Note type String [optional] properties List [optional] coordinates List&gt; [optional]"},{"location":"expert/android/model/SectionGeoJsonSchema_properties/","title":"SectionGeoJsonSchemaProperties","text":""},{"location":"expert/android/model/SectionGeoJsonSchema_properties/#properties","title":"Properties","text":"Name Type Note length Double [optional]"},{"location":"expert/android/model/Severity/","title":"Severity","text":""},{"location":"expert/android/model/Severity/#properties","title":"Properties","text":"Name Type Note name String [optional] effect Effect [optional] color String [optional] priority Int [optional]"},{"location":"expert/android/model/Severity/#effect","title":"Effect","text":"Name Value NO_SERVICE \"NO_SERVICE\" REDUCED_SERVICE \"REDUCED_SERVICE\" SIGNIFICANT_DELAYS \"SIGNIFICANT_DELAYS\" DETOUR \"DETOUR\" ADDITIONAL_SERVICE \"ADDITIONAL_SERVICE\" MODIFIED_SERVICE \"MODIFIED_SERVICE\" OTHER_EFFECT \"OTHER_EFFECT\" UNKNOWN_EFFECT \"UNKNOWN_EFFECT\" STOP_MOVED \"STOP_MOVED\""},{"location":"expert/android/model/Stands/","title":"Stands","text":""},{"location":"expert/android/model/Stands/#properties","title":"Properties","text":"Name Type Note availablePlaces Int [optional] availableBikes Int [optional] totalStands Int [optional] status Status [optional]"},{"location":"expert/android/model/Stands/#status","title":"Status","text":"Name Value UNAVAILABLE \"unavailable\" CLOSED \"closed\" OPEN \"open\""},{"location":"expert/android/model/StopArea/","title":"StopArea","text":""},{"location":"expert/android/model/StopArea/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object comments List [optional] comment String [optional] codes List<code> [optional] timezone String [optional] label String Label of the stop area. The name is directly taken from the data whereas the label is  something we compute for better traveler information. If you don't know what to display, display the label.  [optional] coord Coord [optional] links List commercialModes List [optional] physicalModes List [optional] administrativeRegions List [optional] stopPoints List [optional] lines List [optional]"},{"location":"expert/android/model/StopAreaEquipments/","title":"StopAreaEquipments","text":""},{"location":"expert/android/model/StopAreaEquipments/#properties","title":"Properties","text":"Name Type Note stopArea StopArea [optional] equipmentDetails List [optional]"},{"location":"expert/android/model/StopAreas/","title":"StopAreas","text":""},{"location":"expert/android/model/StopAreas/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] stopAreas List [optional]"},{"location":"expert/android/model/StopDateTime/","title":"StopDateTime","text":""},{"location":"expert/android/model/StopDateTime/#properties","title":"Properties","text":"Name Type Note departureDateTime String [optional] baseDepartureDateTime String [optional] arrivalDateTime String [optional] baseArrivalDateTime String [optional] stopPoint StopPoint [optional] additionalInformations List links List dataFreshness DataFreshness [optional] departureOccupancy DepartureOccupancy [optional]"},{"location":"expert/android/model/StopDateTime/#additionalinformations","title":"AdditionalInformations","text":"Name Value PICK_UP_ONLY \"pick_up_only\" DROP_OFF_ONLY \"drop_off_only\" ON_DEMAND_TRANSPORT \"on_demand_transport\" DATE_TIME_ESTIMATED \"date_time_estimated\" SKIPPED_STOP \"skipped_stop\""},{"location":"expert/android/model/StopDateTime/#datafreshness","title":"DataFreshness","text":"Name Value BASE_SCHEDULE \"base_schedule\" ADAPTED_SCHEDULE \"adapted_schedule\" REALTIME \"realtime\""},{"location":"expert/android/model/StopDateTime/#departureoccupancy","title":"DepartureOccupancy","text":"Name Value EMPTY \"empty\" MANY_SEATS_AVAILABLE \"many_seats_available\" FEW_SEATS_AVAILABLE \"few_seats_available\" STANDING_ROOM_ONLY \"standing_room_only\" CRUSHED_STANDING_ROOM_ONLY \"crushed_standing_room_only\" FULL \"full\" NOT_ACCEPTING_PASSENGERS \"not_accepting_passengers\""},{"location":"expert/android/model/StopPoint/","title":"StopPoint","text":""},{"location":"expert/android/model/StopPoint/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object comments List [optional] comment String [optional] codes List<code> [optional] label String [optional] coord Coord [optional] links List commercialModes List [optional] physicalModes List [optional] administrativeRegions List [optional] stopArea StopArea [optional] equipments List address Address [optional] fareZone FareZone [optional] equipmentDetails List [optional] lines List [optional] accessPoints List [optional]"},{"location":"expert/android/model/StopPoint/#equipments","title":"Equipments","text":"Name Value WHEELCHAIR_ACCESSIBILITY \"has_wheelchair_accessibility\" BIKE_ACCEPTED \"has_bike_accepted\" AIR_CONDITIONED \"has_air_conditioned\" VISUAL_ANNOUNCEMENT \"has_visual_announcement\" AUDIBLE_ANNOUNCEMENT \"has_audible_announcement\" APPROPRIATE_ESCORT \"has_appropriate_escort\" APPROPRIATE_SIGNAGE \"has_appropriate_signage\" SCHOOL_VEHICLE \"has_school_vehicle\" WHEELCHAIR_BOARDING \"has_wheelchair_boarding\" SHELTERED \"has_sheltered\" ELEVATOR \"has_elevator\" ESCALATOR \"has_escalator\" BIKE_DEPOT \"has_bike_depot\""},{"location":"expert/android/model/StopPoints/","title":"StopPoints","text":""},{"location":"expert/android/model/StopPoints/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] stopPoints List [optional]"},{"location":"expert/android/model/StopSchedule/","title":"StopSchedule","text":""},{"location":"expert/android/model/StopSchedule/#properties","title":"Properties","text":"Name Type Note stopPoint StopPoint [optional] route Route [optional] additionalInformations String displayInformations RouteDisplayInformation [optional] dateTimes List links List [optional] firstDatetime DateTimeType [optional] lastDatetime DateTimeType [optional]"},{"location":"expert/android/model/StopSchedules/","title":"StopSchedules","text":""},{"location":"expert/android/model/StopSchedules/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] exceptions List [optional] stopSchedules List"},{"location":"expert/android/model/StopTime/","title":"StopTime","text":""},{"location":"expert/android/model/StopTime/#properties","title":"Properties","text":"Name Type Note arrivalTime String [optional] utcArrivalTime String [optional] departureTime String [optional] utcDepartureTime String [optional] headsign String [optional] journeyPatternPoint JourneyPatternPoint [optional] stopPoint StopPoint [optional] pickupAllowed Boolean [optional] dropOffAllowed Boolean [optional] skippedStop Boolean [optional]"},{"location":"expert/android/model/StreetInformation/","title":"StreetInformation","text":""},{"location":"expert/android/model/StreetInformation/#properties","title":"Properties","text":"Name Type Note geojsonOffset Int [optional] cyclePathType String [optional] length Float [optional]"},{"location":"expert/android/model/Table/","title":"Table","text":""},{"location":"expert/android/model/Table/#properties","title":"Properties","text":"Name Type Note rows List headers List"},{"location":"expert/android/model/TerminusSchedule/","title":"TerminusSchedule","text":""},{"location":"expert/android/model/TerminusSchedule/#properties","title":"Properties","text":"Name Type Note stopPoint StopPoint [optional] route Route [optional] additionalInformations String displayInformations RouteDisplayInformation [optional] dateTimes List links List [optional] firstDatetime DateTimeType [optional] lastDatetime DateTimeType [optional]"},{"location":"expert/android/model/TerminusSchedules/","title":"TerminusSchedules","text":""},{"location":"expert/android/model/TerminusSchedules/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] exceptions List [optional] terminusSchedules List"},{"location":"expert/android/model/Ticket/","title":"Ticket","text":""},{"location":"expert/android/model/Ticket/#properties","title":"Properties","text":"Name Type Note id String Identifier of the ticket name String Name of the ticket comment String [optional] found Boolean [optional] cost Cost links List [optional] sourceId String Product identifier of the ticket in the input data"},{"location":"expert/android/model/TrafficReport/","title":"TrafficReport","text":""},{"location":"expert/android/model/TrafficReport/#properties","title":"Properties","text":"Name Type Note network Network [optional] lines List [optional] stopAreas List [optional] vehicleJourneys List [optional]"},{"location":"expert/android/model/TrafficReports/","title":"TrafficReports","text":""},{"location":"expert/android/model/TrafficReports/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] trafficReports List"},{"location":"expert/android/model/Trip/","title":"Trip","text":""},{"location":"expert/android/model/Trip/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object"},{"location":"expert/android/model/Trips/","title":"Trips","text":""},{"location":"expert/android/model/Trips/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] trips List [optional]"},{"location":"expert/android/model/VJDisplayInformation/","title":"VJDisplayInformation","text":""},{"location":"expert/android/model/VJDisplayInformation/#properties","title":"Properties","text":"Name Type Note commercialMode String [optional] network String [optional] direction String label String [optional] color String [optional] code String [optional] headsign String name String [optional] links List textColor String [optional] tripShortName String [optional] description String [optional] physicalMode String [optional] equipments List headsigns List [optional]"},{"location":"expert/android/model/VJDisplayInformation/#equipments","title":"Equipments","text":"Name Value WHEELCHAIR_ACCESSIBILITY \"has_wheelchair_accessibility\" BIKE_ACCEPTED \"has_bike_accepted\" AIR_CONDITIONED \"has_air_conditioned\" VISUAL_ANNOUNCEMENT \"has_visual_announcement\" AUDIBLE_ANNOUNCEMENT \"has_audible_announcement\" APPROPRIATE_ESCORT \"has_appropriate_escort\" APPROPRIATE_SIGNAGE \"has_appropriate_signage\" SCHOOL_VEHICLE \"has_school_vehicle\" WHEELCHAIR_BOARDING \"has_wheelchair_boarding\" SHELTERED \"has_sheltered\" ELEVATOR \"has_elevator\" ESCALATOR \"has_escalator\" BIKE_DEPOT \"has_bike_depot\""},{"location":"expert/android/model/ValidityPattern/","title":"ValidityPattern","text":""},{"location":"expert/android/model/ValidityPattern/#properties","title":"Properties","text":"Name Type Note beginningDate String [optional] days String [optional]"},{"location":"expert/android/model/VehicleJourney/","title":"VehicleJourney","text":""},{"location":"expert/android/model/VehicleJourney/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object journeyPattern JourneyPattern [optional] stopTimes List [optional] comments List [optional] comment String [optional] codes List<code> [optional] validityPattern ValidityPattern [optional] calendars List [optional] trip Trip [optional] disruptions List startTime String [optional] endTime String [optional] headwaySecs Int [optional] headsign String [optional]"},{"location":"expert/android/model/VehicleJourneyPositions/","title":"VehicleJourneyPositions","text":""},{"location":"expert/android/model/VehicleJourneyPositions/#properties","title":"Properties","text":"Name Type Note vehicleJourney VehicleJourney [optional] coord Coord [optional] bearing Int [optional] speed Int [optional] dataFreshness String [optional] occupancy String [optional] feedCreatedAt String [optional]"},{"location":"expert/android/model/VehicleJourneys/","title":"VehicleJourneys","text":""},{"location":"expert/android/model/VehicleJourneys/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] vehicleJourneys List [optional]"},{"location":"expert/android/model/VehiclePositions/","title":"VehiclePositions","text":""},{"location":"expert/android/model/VehiclePositions/#properties","title":"Properties","text":"Name Type Note line Line [optional] vehicleJourneyPositions List [optional]"},{"location":"expert/android/model/VehiclePositions_1/","title":"VehiclePositions1","text":""},{"location":"expert/android/model/VehiclePositions_1/#properties","title":"Properties","text":"Name Type Note pagination Pagination error Error [optional] feedPublishers List disruptions List notes List [optional] links List [optional] context Context [optional] vehiclePositions List"},{"location":"expert/android/model/WeekPattern/","title":"WeekPattern","text":""},{"location":"expert/android/model/WeekPattern/#properties","title":"Properties","text":"Name Type Note monday Boolean [optional] tuesday Boolean [optional] wednesday Boolean [optional] thursday Boolean [optional] friday Boolean [optional] saturday Boolean [optional] sunday Boolean [optional]"},{"location":"expert/android/releases/3.2.0/","title":"Expert Android 3.2.0 Changelog","text":"\ud83d\uddd3 03 Aug 2022"},{"location":"expert/android/releases/3.2.0/#features","title":"Features","text":"<ul> <li>Add Access Point API</li> <li>Add Vehicle Position API</li> <li>Add Free Floating Nearby API</li> </ul>"},{"location":"expert/android/releases/3.2.0/#tasks","title":"Tasks","text":"<ul> <li>Replace http URL with https</li> </ul>"},{"location":"expert/android/releases/3.2.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/CanalTP/navitia/releases/tag/v15.11.1</p>"},{"location":"expert/android/releases/3.2.1/","title":"Expert Android 3.2.1 Changelog","text":"\ud83d\uddd3 28 Sept 2022"},{"location":"expert/android/releases/3.2.1/#tasks","title":"Tasks","text":"<ul> <li>Replace <code>DateTime</code> by <code>LocalDateTime</code></li> </ul>"},{"location":"expert/android/releases/3.2.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.6.21</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.2.2</code></li> <li><code>org.jfrog.buildinfo:build-info-extractor-gradle</code> &gt; <code>4.28.2</code></li> <li><code>kotlinCoroutinesVersion</code> &gt; <code>1.6.3</code></li> <li><code>compileSdk</code> &gt; <code>33</code></li> <li><code>buildToolsVersion</code> &gt; <code>33.0.0</code></li> <li><code>targetSdk</code> &gt; <code>33</code></li> </ul>"},{"location":"expert/android/releases/3.2.1/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/CanalTP/navitia/releases/tag/v15.11.1</p>"},{"location":"expert/android/releases/3.2.2/","title":"Expert Android 3.2.2 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"expert/android/releases/3.2.2/#fixes","title":"Fixes","text":"<ul> <li>Fix <code>VehicleJourneyPositions.speed</code> type</li> <li>Fix <code>FreeFloatings.pagination</code> nullability</li> </ul>"},{"location":"expert/android/releases/3.2.2/#tasks","title":"Tasks","text":"<ul> <li>Use <code>kts</code> for <code>build.gradle</code> file</li> <li>Replace <code>Gson</code> by <code>kotlin-serialization</code></li> </ul>"},{"location":"expert/android/releases/3.2.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle-wrapper</code> &gt; <code>7.4</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.3.1</code></li> <li><code>com.squareup.okhttp3:okhttp</code> &gt; <code>5.0.0-alpha.10</code></li> <li><code>com.squareup.okhttp3:logging-interceptor</code> &gt; <code>5.0.0-alpha.10</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.4.1</code></li> </ul>"},{"location":"expert/android/releases/3.2.2/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/CanalTP/navitia/releases/tag/v15.11.1</p>"},{"location":"expert/android/releases/3.3.0/","title":"Expert Android 3.3.0 Changelog","text":"\ud83d\uddd3 23 Aug 2023"},{"location":"expert/android/releases/3.3.0/#features","title":"Features","text":"<ul> <li>Update Graphical Isochrone API</li> <li>Update Heat Map API</li> <li>Update Journey API</li> </ul>"},{"location":"expert/android/releases/3.3.0/#fixes","title":"Fixes","text":"<ul> <li>handle optional object in Navitia response </li> </ul>"},{"location":"expert/android/releases/3.3.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/CanalTP/navitia/releases/tag/v15.36.0</p>"},{"location":"expert/android/releases/3.4.0/","title":"Expert Android 3.4.0 Changelog","text":"\ud83d\uddd3 14 Nov 2023"},{"location":"expert/android/releases/3.4.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/hove-io/navitia/releases/tag/v15.45.0</p>"},{"location":"expert/android/releases/3.4.1/","title":"Expert Android 3.4.1 Changelog","text":"\ud83d\uddd3 11 Jan 2024"},{"location":"expert/android/releases/3.4.1/#tasks","title":"Tasks","text":"<ul> <li>Add <code>ExperimentalSerializationApi</code> opt-in for <code>ApiClient</code></li> <li>Add proguard rules for Crashytics</li> <li>Add proguard rules for <code>java.io.Serializable</code></li> </ul>"},{"location":"expert/android/releases/3.5.0/","title":"Expert Android 3.5.0 Changelog","text":"\ud83d\uddd3 30 Jan 2024"},{"location":"expert/android/releases/3.5.0/#features","title":"Features","text":"<ul> <li>Add Obstacles Nearby API</li> <li>Update Journeys API</li> <li>Update <code>CarPark</code> model</li> </ul>"},{"location":"expert/android/releases/3.5.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.5.1</code></li> </ul>"},{"location":"expert/android/releases/3.5.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/hove-io/navitia/releases/tag/v15.45.0</p>"},{"location":"expert/android/releases/3.5.1/","title":"Expert Android 3.5.1 Changelog","text":"\ud83d\uddd3 24 Jun 2024"},{"location":"expert/android/releases/3.5.1/#fixes","title":"Fixes","text":"<ul> <li>Show http logs only in <code>DEBUG</code></li> </ul>"},{"location":"expert/android/releases/3.5.2/","title":"Expert Android 3.5.2 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"expert/android/releases/3.5.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.9.25</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.2</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.3</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.3</code></li> </ul>"},{"location":"expert/android/releases/3.6.0/","title":"Expert Android 3.6.0 Changelog","text":"\ud83d\uddd3 13 Feb 2025"},{"location":"expert/android/releases/3.6.0/#api","title":"API","text":"<ul> <li>Add <code>language</code> query parameter to <code>CommericalModesApi</code>, <code>CompaniesApi</code>, <code>ContributorsApi</code>, <code>DatasetsApi</code>, <code>DisruptionsApi</code>, <code>JourneyPatternPointsApi</code>, <code>JourneyPatternsApi</code>, <code>LineGroupsApi</code>, <code>LineReportsApi</code>, <code>LinesApi</code>, <code>NetworksApi</code>, <code>PhysicalModesApi</code>, <code>PoisApi</code>, <code>PoiTypesApi</code>, <code>RoutesApi</code>, <code>StopAreasApi</code>, <code>StopPointsApi</code>, <code>TrafficReportApi</code>, <code>TripsApi</code> and <code>VehicleJourneysApi</code></li> <li>Update <code>from_datetime</code> query parameter type from<code>RouteSchedulesApi</code></li> </ul>"},{"location":"expert/android/releases/3.6.0/#models","title":"Models","text":"<ul> <li>Add <code>BookingRule</code></li> <li>Remove <code>CarParkPrice</code></li> <li>Update <code>Channel.Type</code></li> <li>Update <code>Poi</code></li> <li>Update <code>PtObject</code></li> <li>Update <code>RouteDisplayInformation</code></li> <li>Update <code>VehicleJourneyPositions</code></li> </ul>"},{"location":"expert/android/releases/3.6.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.10.2</code></li> <li><code>kotlinVersion</code> &gt; <code>2.1.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.8.0</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>buildToolsVersion</code> &gt; <code>35.0.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.6.3</code></li> </ul>"},{"location":"expert/android/releases/3.6.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/hove-io/navitia/releases/tag/v15.75.4</p>"},{"location":"expert/android/releases/3.7.0/","title":"Expert Android 3.7.0 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"expert/android/releases/3.7.0/#api","title":"API","text":"<ul> <li>Add <code>park_mode</code> and <code>on_street_bike_parking_duration</code> query parameters to <code>GraphicalIsochroneApi</code>, <code>HeatMapApi</code> and <code>JourneysApi</code></li> </ul>"},{"location":"expert/android/releases/3.7.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/hove-io/navitia/releases/tag/v15.82.1</p>"},{"location":"expert/android/releases/3.7.1/","title":"Expert Android 3.7.1 Changelog","text":"\ud83d\uddd3 23 Apr 2025"},{"location":"expert/android/releases/3.7.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.11.1</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.9.1</code></li> </ul>"},{"location":"expert/ios/","title":"Expert iOS","text":""},{"location":"expert/ios/#setup","title":"\ud83d\udcbb Setup","text":"<p>In your project, add the following lines to your podfile:</p> <pre><code>source 'https://github.com/CanalTP/Podspecs.git' # Expert podspec URL\n\ntarget 'YOUR_PROJECT_SCHEME' do\n  pod 'NavitiaSDK', '2.9.1' # Expert Pod definition\nend\n</code></pre> <p>Using your CLI, run <code>pod install</code> in your project directory.</p>"},{"location":"expert/ios/#implementation","title":"\ud83d\udc68\u200d\ud83d\udcbb Implementation","text":"<p>This module is set up by calling <code>Expert.shared.initialize()</code>.</p> <p>This method takes the following parameters:</p> Parameter Type Required Description Default <code>token</code> <code>String</code> \u2713 Navitia API access token \u2717 <code>env</code> <code>ExpertEnvironment</code> \u2717 Navitia API environment <code>ExpertEnvironment.prod</code> <code>debugEnabled</code> <code>Bool</code> \u2717 Log Navitia responses <code>false</code> <pre><code>Expert.shared.initialize(token: token,\n                         environment: .prod,\n                         debugEnabled: true)\n</code></pre>"},{"location":"expert/ios/#launching","title":"\ud83d\ude80 Launching","text":"<p>You can now call any endpoint from <code>Expert.shared</code> and its variety of functions with a completion block that will help you request Navitia. As an example:</p> <pre><code>Expert.shared.physicalModesApi.getCoverageRegionPhysicalModes(region: \"YOUR_COVERAGE\")  { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n}\n</code></pre>"},{"location":"expert/ios/apis/","title":"Available APIs","text":"API AccessPointsAPI AddressesAPI CalendarsAPI CommercialModesAPI CompaniesAPI ContributorsAPI CoordAPI CoordsAPI CoverageAPI DatasetsAPI DisruptionsAPI EquipmentReportsAPI FreeFloatingsNearbyAPI GeoStatusAPI GraphicalIsochroneAPI HeatMapAPI JourneyPatternPointsAPI JourneyPatternsAPI JourneysAPI LineGroupsAPI LineReportsAPI LinesAPI NetworksAPI NextArrivalsAPI NextDeparturesAPI PhysicalModesAPI PlaceUriAPI PlacesAPI PlacesNearbyAPI PoiTypesAPI PoisAPI PtobjectsAPI RouteSchedulesAPI RoutesAPI StopAreasAPI StopPointsAPI StopSchedulesAPI TerminusSchedulesAPI TrafficReportAPI TripsAPI VehicleJourneysAPI VehiclePositionsAPI"},{"location":"expert/ios/changelogs/","title":"Expert iOS Changelogs","text":"<ul> <li>v2.9.1 (09 May 2025)</li> <li>v2.9.0 (24 Mar 2025)</li> <li>v2.8.0 (24 Feb 2025)</li> <li>v2.7.3 (12 Feb 2025)</li> <li>v2.7.2 (25 Jun 2024)</li> <li>v2.7.1 (27 Mar 2024)</li> <li>v2.7.0 (30 Jan 2024)</li> <li>v2.6.0 (27 Dec 2023)</li> <li>v2.5.0 (14 Nov 2023)</li> <li>v2.4.0 (23 Aug 2023)</li> <li>v2.3.4 (10 Jan 2023)</li> <li>v2.3.3 (05 Jan 2023)</li> <li>v2.3.2 (20 Oct 2022)</li> <li>v2.2.0 (03 Aug 2022)</li> </ul>"},{"location":"expert/ios/models/","title":"Available Models","text":"Model AccessPoint AccessPoints Address Admin Amount ApplicationPattern Arrivals BetaEndpoints CO2 Calendar CalendarException CalendarPeriod Calendars CarPark Cause CellLatSchema CellLonSchema Channel Code Comment CommercialMode CommercialModes Companie Companies Context Contributor Contributors Coord Cost Coverage CoverageError Coverages CurrentAvailability Dataset Datasets DateTimeType Departures DictAddresses Disruption DisruptionProperty Disruptions Distances Durations DynamicSpeed Effect Elevation EquipmentDetails EquipmentReport EquipmentReports Exception Fare FareZone FeedPublisher FreeFloatings FreeFloatingsCoord FreeFloatingsFreeFloatings GeoStatus GeoStatus1 GraphicalIsrochone GraphicalIsrochone1 GraphicalIsrochoneGeojson Header HeatMap HeatMap1 HeatMatrixSchema Impacted ImpactedSection ImpactedStop IndividualInformation IndividualRating Journey JourneyDebug JourneyPattern JourneyPatternPoint JourneyPatternPoints JourneyPatterns Journeys Line LineGroup LineGroups LineHeadersSchema LineReport LineReports Lines LinesSchema LinkSchema Message ModelError MultiLineStringSchema Network Networks Note Pagination Passage PassageDisplayInformation Path PathWay Period PeriodDate PeriodTime PhysicalMode PhysicalModes Place PlaceNearby Places PlacesNearby Poi PoiType PoiTypes Pois Property PtObject PtObjects RidesharingInformation Route RouteDisplayInformation RouteSchedule RouteSchedules Routes Row SeatsDescription Section SectionGeoJsonSchema SectionGeoJsonSchemaProperties Severity Stands StopArea StopAreaEquipments StopAreas StopDateTime StopPoint StopPoints StopSchedule StopSchedules StopTime StreetInformation Table TerminusSchedule TerminusSchedules Ticket TrafficReport TrafficReports Trip Trips VJDisplayInformation ValidityPattern VehicleJourney VehicleJourneyPositions VehicleJourneys VehiclePositions VehiclePositions1 WeekPattern"},{"location":"expert/ios/api/AccessPointsAPI/","title":"AccessPointsAPI","text":"Method HTTP request getCoordLonLatAccessPoints GET /coord/{lon};{lat}/access_points getCoordsLonLatAccessPoints GET /coords/{lon};{lat}/access_points getCoverageLonLatAccessPoints GET /coverage/{lon};{lat}/access_points getCoverageLonLatUriAccessPoints GET /coverage/{lon};{lat}/{uri}/access_points getCoverageRegionAccessPoints GET /coverage/{region}/access_points getCoverageRegionUriAccessPoints GET /coverage/{region}/{uri}/access_points"},{"location":"expert/ios/api/AccessPointsAPI/#getcoordlonlataccesspoints","title":"getCoordLonLatAccessPoints","text":""},{"location":"expert/ios/api/AccessPointsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/AccessPointsAPI/#return","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>Expert.shared.accessPointsApi.getCoordLonLatAccessPoints(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 25, \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AccessPointsAPI/#getcoordslonlataccesspoints","title":"getCoordsLonLatAccessPoints","text":""},{"location":"expert/ios/api/AccessPointsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/AccessPointsAPI/#return_1","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>Expert.shared.accessPointsApi.getCoordsLonLatAccessPoints(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 25, \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AccessPointsAPI/#getcoveragelonlataccesspoints","title":"getCoverageLonLatAccessPoints","text":""},{"location":"expert/ios/api/AccessPointsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/AccessPointsAPI/#return_2","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>Expert.shared.accessPointsApi.getCoverageLonLatAccessPoints(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 25, \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AccessPointsAPI/#getcoveragelonlaturiaccesspoints","title":"getCoverageLonLatUriAccessPoints","text":""},{"location":"expert/ios/api/AccessPointsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/AccessPointsAPI/#return_3","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>Expert.shared.accessPointsApi.getCoverageLonLatUriAccessPoints(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    depth: 1, \n    count: 25, \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AccessPointsAPI/#getcoverageregionaccesspoints","title":"getCoverageRegionAccessPoints","text":""},{"location":"expert/ios/api/AccessPointsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/AccessPointsAPI/#return_4","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>Expert.shared.accessPointsApi.getCoverageRegionAccessPoints(\n    region: \"region_example\", \n    depth: 1, \n    count: 25, \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AccessPointsAPI/#getcoverageregionuriaccesspoints","title":"getCoverageRegionUriAccessPoints","text":""},{"location":"expert/ios/api/AccessPointsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/AccessPointsAPI/#return_5","title":"ReturnExample","text":"<p>AccessPoints</p> <pre><code>Expert.shared.accessPointsApi.getCoverageRegionUriAccessPoints(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    depth: 1, \n    count: 25, \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AddressesAPI/","title":"AddressesAPI","text":"Method HTTP request getCoverageLonLatAddresses GET /coverage/{lon};{lat}/addresses getCoverageLonLatAddressesId GET /coverage/{lon};{lat}/addresses/{id} getCoverageLonLatUriAddresses GET /coverage/{lon};{lat}/{uri}/addresses getCoverageLonLatUriAddressesId GET /coverage/{lon};{lat}/{uri}/addresses/{id} getCoverageRegionAddresses GET /coverage/{region}/addresses getCoverageRegionAddressesId GET /coverage/{region}/addresses/{id} getCoverageRegionUriAddresses GET /coverage/{region}/{uri}/addresses getCoverageRegionUriAddressesId GET /coverage/{region}/{uri}/addresses/{id}"},{"location":"expert/ios/api/AddressesAPI/#getcoveragelonlataddresses","title":"getCoverageLonLatAddresses","text":""},{"location":"expert/ios/api/AddressesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query"},{"location":"expert/ios/api/AddressesAPI/#return","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.addressesApi.getCoverageLonLatAddresses(\n    lat: 3.4, \n    lon: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AddressesAPI/#getcoveragelonlataddressesid","title":"getCoverageLonLatAddressesId","text":""},{"location":"expert/ios/api/AddressesAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query"},{"location":"expert/ios/api/AddressesAPI/#return_1","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.addressesApi.getCoverageLonLatAddressesId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AddressesAPI/#getcoveragelonlaturiaddresses","title":"getCoverageLonLatUriAddresses","text":""},{"location":"expert/ios/api/AddressesAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri"},{"location":"expert/ios/api/AddressesAPI/#return_2","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.addressesApi.getCoverageLonLatUriAddresses(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AddressesAPI/#getcoveragelonlaturiaddressesid","title":"getCoverageLonLatUriAddressesId","text":""},{"location":"expert/ios/api/AddressesAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/ios/api/AddressesAPI/#return_3","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.addressesApi.getCoverageLonLatUriAddressesId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AddressesAPI/#getcoverageregionaddresses","title":"getCoverageRegionAddresses","text":""},{"location":"expert/ios/api/AddressesAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query"},{"location":"expert/ios/api/AddressesAPI/#return_4","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.addressesApi.getCoverageRegionAddresses(\n    region: \"region_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AddressesAPI/#getcoverageregionaddressesid","title":"getCoverageRegionAddressesId","text":""},{"location":"expert/ios/api/AddressesAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query"},{"location":"expert/ios/api/AddressesAPI/#return_5","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.addressesApi.getCoverageRegionAddressesId(\n    region: \"region_example\", \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AddressesAPI/#getcoverageregionuriaddresses","title":"getCoverageRegionUriAddresses","text":""},{"location":"expert/ios/api/AddressesAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri"},{"location":"expert/ios/api/AddressesAPI/#return_6","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.addressesApi.getCoverageRegionUriAddresses(\n    region: \"region_example\", \n    uri: \"uri_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/AddressesAPI/#getcoverageregionuriaddressesid","title":"getCoverageRegionUriAddressesId","text":""},{"location":"expert/ios/api/AddressesAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/ios/api/AddressesAPI/#return_7","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.addressesApi.getCoverageRegionUriAddressesId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CalendarsAPI/","title":"CalendarsAPI","text":"Method HTTP request getCoverageLonLatCalendars GET /coverage/{lon};{lat}/calendars getCoverageLonLatCalendarsId GET /coverage/{lon};{lat}/calendars/{id} getCoverageLonLatUriCalendars GET /coverage/{lon};{lat}/{uri}/calendars getCoverageRegionCalendars GET /coverage/{region}/calendars getCoverageRegionCalendarsId GET /coverage/{region}/calendars/{id} getCoverageRegionUriCalendars GET /coverage/{region}/{uri}/calendars"},{"location":"expert/ios/api/CalendarsAPI/#getcoveragelonlatcalendars","title":"getCoverageLonLatCalendars","text":""},{"location":"expert/ios/api/CalendarsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/ios/api/CalendarsAPI/#return","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>Expert.shared.calendarsApi.getCoverageLonLatCalendars(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 10, \n    startPage: 56, \n    startDate: \"startDate_example\", \n    endDate: \"endDate_example\", \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    distance: 200\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CalendarsAPI/#getcoveragelonlatcalendarsid","title":"getCoverageLonLatCalendarsId","text":""},{"location":"expert/ios/api/CalendarsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/ios/api/CalendarsAPI/#return_1","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>Expert.shared.calendarsApi.getCoverageLonLatCalendarsId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    depth: 1, \n    count: 10, \n    startPage: 56, \n    startDate: \"startDate_example\", \n    endDate: \"endDate_example\", \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    distance: 200\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CalendarsAPI/#getcoveragelonlaturicalendars","title":"getCoverageLonLatUriCalendars","text":""},{"location":"expert/ios/api/CalendarsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/ios/api/CalendarsAPI/#return_2","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>Expert.shared.calendarsApi.getCoverageLonLatUriCalendars(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    depth: 1, \n    count: 10, \n    startPage: 56, \n    startDate: \"startDate_example\", \n    endDate: \"endDate_example\", \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    distance: 200\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CalendarsAPI/#getcoverageregioncalendars","title":"getCoverageRegionCalendars","text":""},{"location":"expert/ios/api/CalendarsAPI/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/ios/api/CalendarsAPI/#return_3","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>Expert.shared.calendarsApi.getCoverageRegionCalendars(\n    region: \"region_example\", \n    depth: 1, \n    count: 10, \n    startPage: 56, \n    startDate: \"startDate_example\", \n    endDate: \"endDate_example\", \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    distance: 200\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CalendarsAPI/#getcoverageregioncalendarsid","title":"getCoverageRegionCalendarsId","text":""},{"location":"expert/ios/api/CalendarsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/ios/api/CalendarsAPI/#return_4","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>Expert.shared.calendarsApi.getCoverageRegionCalendarsId(\n    region: \"region_example\", \n    id: \"id_example\", \n    depth: 1, \n    count: 10, \n    startPage: 56, \n    startDate: \"startDate_example\", \n    endDate: \"endDate_example\", \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    distance: 200\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CalendarsAPI/#getcoverageregionuricalendars","title":"getCoverageRegionUriCalendars","text":""},{"location":"expert/ios/api/CalendarsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of calendars per page [optional] [default to 10] startPage Int The current page [optional] startDate String Start date [optional] endDate String End date [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200]"},{"location":"expert/ios/api/CalendarsAPI/#return_5","title":"ReturnExample","text":"<p>Calendars</p> <pre><code>Expert.shared.calendarsApi.getCoverageRegionUriCalendars(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    depth: 1, \n    count: 10, \n    startPage: 56, \n    startDate: \"startDate_example\", \n    endDate: \"endDate_example\", \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    distance: 200\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CommercialModesAPI/","title":"CommercialModesAPI","text":"Method HTTP request getCoverageLonLatCommercialModes GET /coverage/{lon};{lat}/commercial_modes getCoverageLonLatCommercialModesId GET /coverage/{lon};{lat}/commercial_modes/{id} getCoverageLonLatUriCommercialModes GET /coverage/{lon};{lat}/{uri}/commercial_modes getCoverageLonLatUriCommercialModesId GET /coverage/{lon};{lat}/{uri}/commercial_modes/{id} getCoverageRegionCommercialModes GET /coverage/{region}/commercial_modes getCoverageRegionCommercialModesId GET /coverage/{region}/commercial_modes/{id} getCoverageRegionUriCommercialModes GET /coverage/{region}/{uri}/commercial_modes getCoverageRegionUriCommercialModesId GET /coverage/{region}/{uri}/commercial_modes/{id}"},{"location":"expert/ios/api/CommercialModesAPI/#getcoveragelonlatcommercialmodes","title":"getCoverageLonLatCommercialModes","text":""},{"location":"expert/ios/api/CommercialModesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CommercialModesAPI/#return","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>Expert.shared.commercialModesApi.getCoverageLonLatCommercialModes(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CommercialModesAPI/#getcoveragelonlatcommercialmodesid","title":"getCoverageLonLatCommercialModesId","text":""},{"location":"expert/ios/api/CommercialModesAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CommercialModesAPI/#return_1","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>Expert.shared.commercialModesApi.getCoverageLonLatCommercialModesId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CommercialModesAPI/#getcoveragelonlaturicommercialmodes","title":"getCoverageLonLatUriCommercialModes","text":""},{"location":"expert/ios/api/CommercialModesAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CommercialModesAPI/#return_2","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>Expert.shared.commercialModesApi.getCoverageLonLatUriCommercialModes(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CommercialModesAPI/#getcoveragelonlaturicommercialmodesid","title":"getCoverageLonLatUriCommercialModesId","text":""},{"location":"expert/ios/api/CommercialModesAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CommercialModesAPI/#return_3","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>Expert.shared.commercialModesApi.getCoverageLonLatUriCommercialModesId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CommercialModesAPI/#getcoverageregioncommercialmodes","title":"getCoverageRegionCommercialModes","text":""},{"location":"expert/ios/api/CommercialModesAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CommercialModesAPI/#return_4","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>Expert.shared.commercialModesApi.getCoverageRegionCommercialModes(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CommercialModesAPI/#getcoverageregioncommercialmodesid","title":"getCoverageRegionCommercialModesId","text":""},{"location":"expert/ios/api/CommercialModesAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CommercialModesAPI/#return_5","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>Expert.shared.commercialModesApi.getCoverageRegionCommercialModesId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CommercialModesAPI/#getcoverageregionuricommercialmodes","title":"getCoverageRegionUriCommercialModes","text":""},{"location":"expert/ios/api/CommercialModesAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CommercialModesAPI/#return_6","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>Expert.shared.commercialModesApi.getCoverageRegionUriCommercialModes(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CommercialModesAPI/#getcoverageregionuricommercialmodesid","title":"getCoverageRegionUriCommercialModesId","text":""},{"location":"expert/ios/api/CommercialModesAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CommercialModesAPI/#return_7","title":"ReturnExample","text":"<p>CommercialModes</p> <pre><code>Expert.shared.commercialModesApi.getCoverageRegionUriCommercialModesId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CompaniesAPI/","title":"CompaniesAPI","text":"Method HTTP request getCoverageLonLatCompanies GET /coverage/{lon};{lat}/companies getCoverageLonLatCompaniesId GET /coverage/{lon};{lat}/companies/{id} getCoverageLonLatUriCompanies GET /coverage/{lon};{lat}/{uri}/companies getCoverageLonLatUriCompaniesId GET /coverage/{lon};{lat}/{uri}/companies/{id} getCoverageRegionCompanies GET /coverage/{region}/companies getCoverageRegionCompaniesId GET /coverage/{region}/companies/{id} getCoverageRegionUriCompanies GET /coverage/{region}/{uri}/companies getCoverageRegionUriCompaniesId GET /coverage/{region}/{uri}/companies/{id}"},{"location":"expert/ios/api/CompaniesAPI/#getcoveragelonlatcompanies","title":"getCoverageLonLatCompanies","text":""},{"location":"expert/ios/api/CompaniesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CompaniesAPI/#return","title":"ReturnExample","text":"<p>Companies</p> <pre><code>Expert.shared.companiesApi.getCoverageLonLatCompanies(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CompaniesAPI/#getcoveragelonlatcompaniesid","title":"getCoverageLonLatCompaniesId","text":""},{"location":"expert/ios/api/CompaniesAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CompaniesAPI/#return_1","title":"ReturnExample","text":"<p>Companies</p> <pre><code>Expert.shared.companiesApi.getCoverageLonLatCompaniesId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CompaniesAPI/#getcoveragelonlaturicompanies","title":"getCoverageLonLatUriCompanies","text":""},{"location":"expert/ios/api/CompaniesAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CompaniesAPI/#return_2","title":"ReturnExample","text":"<p>Companies</p> <pre><code>Expert.shared.companiesApi.getCoverageLonLatUriCompanies(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CompaniesAPI/#getcoveragelonlaturicompaniesid","title":"getCoverageLonLatUriCompaniesId","text":""},{"location":"expert/ios/api/CompaniesAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CompaniesAPI/#return_3","title":"ReturnExample","text":"<p>Companies</p> <pre><code>Expert.shared.companiesApi.getCoverageLonLatUriCompaniesId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CompaniesAPI/#getcoverageregioncompanies","title":"getCoverageRegionCompanies","text":""},{"location":"expert/ios/api/CompaniesAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CompaniesAPI/#return_4","title":"ReturnExample","text":"<p>Companies</p> <pre><code>Expert.shared.companiesApi.getCoverageRegionCompanies(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CompaniesAPI/#getcoverageregioncompaniesid","title":"getCoverageRegionCompaniesId","text":""},{"location":"expert/ios/api/CompaniesAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CompaniesAPI/#return_5","title":"ReturnExample","text":"<p>Companies</p> <pre><code>Expert.shared.companiesApi.getCoverageRegionCompaniesId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CompaniesAPI/#getcoverageregionuricompanies","title":"getCoverageRegionUriCompanies","text":""},{"location":"expert/ios/api/CompaniesAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CompaniesAPI/#return_6","title":"ReturnExample","text":"<p>Companies</p> <pre><code>Expert.shared.companiesApi.getCoverageRegionUriCompanies(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CompaniesAPI/#getcoverageregionuricompaniesid","title":"getCoverageRegionUriCompaniesId","text":""},{"location":"expert/ios/api/CompaniesAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/CompaniesAPI/#return_7","title":"ReturnExample","text":"<p>Companies</p> <pre><code>Expert.shared.companiesApi.getCoverageRegionUriCompaniesId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/ContributorsAPI/","title":"ContributorsAPI","text":"Method HTTP request getCoverageLonLatContributors GET /coverage/{lon};{lat}/contributors getCoverageLonLatContributorsId GET /coverage/{lon};{lat}/contributors/{id} getCoverageLonLatUriContributors GET /coverage/{lon};{lat}/{uri}/contributors getCoverageLonLatUriContributorsId GET /coverage/{lon};{lat}/{uri}/contributors/{id} getCoverageRegionContributors GET /coverage/{region}/contributors getCoverageRegionContributorsId GET /coverage/{region}/contributors/{id} getCoverageRegionUriContributors GET /coverage/{region}/{uri}/contributors getCoverageRegionUriContributorsId GET /coverage/{region}/{uri}/contributors/{id}"},{"location":"expert/ios/api/ContributorsAPI/#getcoveragelonlatcontributors","title":"getCoverageLonLatContributors","text":""},{"location":"expert/ios/api/ContributorsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/ContributorsAPI/#return","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>Expert.shared.contributorsApi.getCoverageLonLatContributors(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/ContributorsAPI/#getcoveragelonlatcontributorsid","title":"getCoverageLonLatContributorsId","text":""},{"location":"expert/ios/api/ContributorsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/ContributorsAPI/#return_1","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>Expert.shared.contributorsApi.getCoverageLonLatContributorsId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/ContributorsAPI/#getcoveragelonlaturicontributors","title":"getCoverageLonLatUriContributors","text":""},{"location":"expert/ios/api/ContributorsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/ContributorsAPI/#return_2","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>Expert.shared.contributorsApi.getCoverageLonLatUriContributors(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/ContributorsAPI/#getcoveragelonlaturicontributorsid","title":"getCoverageLonLatUriContributorsId","text":""},{"location":"expert/ios/api/ContributorsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/ContributorsAPI/#return_3","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>Expert.shared.contributorsApi.getCoverageLonLatUriContributorsId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/ContributorsAPI/#getcoverageregioncontributors","title":"getCoverageRegionContributors","text":""},{"location":"expert/ios/api/ContributorsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/ContributorsAPI/#return_4","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>Expert.shared.contributorsApi.getCoverageRegionContributors(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/ContributorsAPI/#getcoverageregioncontributorsid","title":"getCoverageRegionContributorsId","text":""},{"location":"expert/ios/api/ContributorsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/ContributorsAPI/#return_5","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>Expert.shared.contributorsApi.getCoverageRegionContributorsId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/ContributorsAPI/#getcoverageregionuricontributors","title":"getCoverageRegionUriContributors","text":""},{"location":"expert/ios/api/ContributorsAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/ContributorsAPI/#return_6","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>Expert.shared.contributorsApi.getCoverageRegionUriContributors(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/ContributorsAPI/#getcoverageregionuricontributorsid","title":"getCoverageRegionUriContributorsId","text":""},{"location":"expert/ios/api/ContributorsAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/ContributorsAPI/#return_7","title":"ReturnExample","text":"<p>Contributors</p> <pre><code>Expert.shared.contributorsApi.getCoverageRegionUriContributorsId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordAPI/","title":"CoordAPI","text":"Method HTTP request getCoordLonLat GET /coord/{lon};{lat}/ getCoordsLonLat GET /coords/{lon};{lat}/ getCoverageRegionCoordLonLatAddresses GET /coverage/{region}/coord/{lon};{lat}/addresses getCoverageRegionCoordsLonLatAddresses GET /coverage/{region}/coords/{lon};{lat}/addresses"},{"location":"expert/ios/api/CoordAPI/#getcoordlonlat","title":"getCoordLonLat","text":""},{"location":"expert/ios/api/CoordAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query"},{"location":"expert/ios/api/CoordAPI/#return","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordApi.getCoordLonLat(\n    lat: 3.4, \n    lon: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordAPI/#getcoordslonlat","title":"getCoordsLonLat","text":""},{"location":"expert/ios/api/CoordAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query"},{"location":"expert/ios/api/CoordAPI/#return_1","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordApi.getCoordsLonLat(\n    lat: 3.4, \n    lon: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordAPI/#getcoverageregioncoordlonlataddresses","title":"getCoverageRegionCoordLonLatAddresses","text":""},{"location":"expert/ios/api/CoordAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query region String The region you want to query lon Double The longitude of where the coord you want to query"},{"location":"expert/ios/api/CoordAPI/#return_2","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordApi.getCoverageRegionCoordLonLatAddresses(\n    lat: 3.4, \n    region: \"region_example\", \n    lon: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordAPI/#getcoverageregioncoordslonlataddresses","title":"getCoverageRegionCoordsLonLatAddresses","text":""},{"location":"expert/ios/api/CoordAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query region String The region you want to query lon Double The longitude of where the coord you want to query"},{"location":"expert/ios/api/CoordAPI/#return_3","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordApi.getCoverageRegionCoordsLonLatAddresses(\n    lat: 3.4, \n    region: \"region_example\", \n    lon: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/","title":"CoordsAPI","text":"Method HTTP request getCoverageLonLatCoord GET /coverage/{lon};{lat}/coord getCoverageLonLatCoordId GET /coverage/{lon};{lat}/coord/{id} getCoverageLonLatCoords GET /coverage/{lon};{lat}/coords getCoverageLonLatCoordsId GET /coverage/{lon};{lat}/coords/{id} getCoverageLonLatUriCoord GET /coverage/{lon};{lat}/{uri}/coord getCoverageLonLatUriCoordId GET /coverage/{lon};{lat}/{uri}/coord/{id} getCoverageLonLatUriCoords GET /coverage/{lon};{lat}/{uri}/coords getCoverageLonLatUriCoordsId GET /coverage/{lon};{lat}/{uri}/coords/{id} getCoverageRegionCoord GET /coverage/{region}/coord getCoverageRegionCoordId GET /coverage/{region}/coord/{id} getCoverageRegionCoords GET /coverage/{region}/coords getCoverageRegionCoordsId GET /coverage/{region}/coords/{id} getCoverageRegionUriCoord GET /coverage/{region}/{uri}/coord getCoverageRegionUriCoordId GET /coverage/{region}/{uri}/coord/{id} getCoverageRegionUriCoords GET /coverage/{region}/{uri}/coords getCoverageRegionUriCoordsId GET /coverage/{region}/{uri}/coords/{id}"},{"location":"expert/ios/api/CoordsAPI/#getcoveragelonlatcoord","title":"getCoverageLonLatCoord","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query"},{"location":"expert/ios/api/CoordsAPI/#return","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageLonLatCoord(\n    lat: 3.4, \n    lon: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoveragelonlatcoordid","title":"getCoverageLonLatCoordId","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_1","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageLonLatCoordId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoveragelonlatcoords","title":"getCoverageLonLatCoords","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_2","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageLonLatCoords(\n    lat: 3.4, \n    lon: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoveragelonlatcoordsid","title":"getCoverageLonLatCoordsId","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_3","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageLonLatCoordsId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoveragelonlaturicoord","title":"getCoverageLonLatUriCoord","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_4","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri"},{"location":"expert/ios/api/CoordsAPI/#return_4","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageLonLatUriCoord(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoveragelonlaturicoordid","title":"getCoverageLonLatUriCoordId","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_5","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_5","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageLonLatUriCoordId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoveragelonlaturicoords","title":"getCoverageLonLatUriCoords","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_6","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri"},{"location":"expert/ios/api/CoordsAPI/#return_6","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageLonLatUriCoords(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoveragelonlaturicoordsid","title":"getCoverageLonLatUriCoordsId","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_7","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_7","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageLonLatUriCoordsId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoverageregioncoord","title":"getCoverageRegionCoord","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_8","title":"Parameters","text":"Name Type Note region String The region you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_8","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageRegionCoord(\n    region: \"region_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoverageregioncoordid","title":"getCoverageRegionCoordId","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_9","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_9","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageRegionCoordId(\n    region: \"region_example\", \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoverageregioncoords","title":"getCoverageRegionCoords","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_10","title":"Parameters","text":"Name Type Note region String The region you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_10","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageRegionCoords(\n    region: \"region_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoverageregioncoordsid","title":"getCoverageRegionCoordsId","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_11","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_11","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageRegionCoordsId(\n    region: \"region_example\", \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoverageregionuricoord","title":"getCoverageRegionUriCoord","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_12","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri"},{"location":"expert/ios/api/CoordsAPI/#return_12","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageRegionUriCoord(\n    region: \"region_example\", \n    uri: \"uri_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoverageregionuricoordid","title":"getCoverageRegionUriCoordId","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_13","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_13","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageRegionUriCoordId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoverageregionuricoords","title":"getCoverageRegionUriCoords","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_14","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri"},{"location":"expert/ios/api/CoordsAPI/#return_14","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageRegionUriCoords(\n    region: \"region_example\", \n    uri: \"uri_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoordsAPI/#getcoverageregionuricoordsid","title":"getCoverageRegionUriCoordsId","text":""},{"location":"expert/ios/api/CoordsAPI/#parameters_15","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query"},{"location":"expert/ios/api/CoordsAPI/#return_15","title":"ReturnExample","text":"<p>DictAddresses</p> <pre><code>Expert.shared.coordsApi.getCoverageRegionUriCoordsId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoverageAPI/","title":"CoverageAPI","text":"Method HTTP request getCoverage GET /coverage/ getCoverageLonLat GET /coverage/{lon};{lat}/ getCoverageRegion GET /coverage/{region}/"},{"location":"expert/ios/api/CoverageAPI/#getcoverage","title":"getCoverage","text":""},{"location":"expert/ios/api/CoverageAPI/#parameters","title":"Parameters","text":"Name Type Note disableGeojson Bool hide the coverage geojson to reduce response size [optional]"},{"location":"expert/ios/api/CoverageAPI/#return","title":"ReturnExample","text":"<p>Coverages</p> <pre><code>Expert.shared.coverageApi.getCoverage(\n    disableGeojson: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoverageAPI/#getcoveragelonlat","title":"getCoverageLonLat","text":""},{"location":"expert/ios/api/CoverageAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query disableGeojson Bool hide the coverage geojson to reduce response size [optional]"},{"location":"expert/ios/api/CoverageAPI/#return_1","title":"ReturnExample","text":"<p>Coverages</p> <pre><code>Expert.shared.coverageApi.getCoverageLonLat(\n    lat: 3.4, \n    lon: 3.4, \n    disableGeojson: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/CoverageAPI/#getcoverageregion","title":"getCoverageRegion","text":""},{"location":"expert/ios/api/CoverageAPI/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query disableGeojson Bool hide the coverage geojson to reduce response size [optional]"},{"location":"expert/ios/api/CoverageAPI/#return_2","title":"ReturnExample","text":"<p>Coverages</p> <pre><code>Expert.shared.coverageApi.getCoverageRegion(\n    region: \"region_example\", \n    disableGeojson: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DatasetsAPI/","title":"DatasetsAPI","text":"Method HTTP request getCoverageLonLatDatasets GET /coverage/{lon};{lat}/datasets getCoverageLonLatDatasetsId GET /coverage/{lon};{lat}/datasets/{id} getCoverageLonLatUriDatasets GET /coverage/{lon};{lat}/{uri}/datasets getCoverageLonLatUriDatasetsId GET /coverage/{lon};{lat}/{uri}/datasets/{id} getCoverageRegionDatasets GET /coverage/{region}/datasets getCoverageRegionDatasetsId GET /coverage/{region}/datasets/{id} getCoverageRegionUriDatasets GET /coverage/{region}/{uri}/datasets getCoverageRegionUriDatasetsId GET /coverage/{region}/{uri}/datasets/{id}"},{"location":"expert/ios/api/DatasetsAPI/#getcoveragelonlatdatasets","title":"getCoverageLonLatDatasets","text":""},{"location":"expert/ios/api/DatasetsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/DatasetsAPI/#return","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>Expert.shared.datasetsApi.getCoverageLonLatDatasets(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DatasetsAPI/#getcoveragelonlatdatasetsid","title":"getCoverageLonLatDatasetsId","text":""},{"location":"expert/ios/api/DatasetsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/DatasetsAPI/#return_1","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>Expert.shared.datasetsApi.getCoverageLonLatDatasetsId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DatasetsAPI/#getcoveragelonlaturidatasets","title":"getCoverageLonLatUriDatasets","text":""},{"location":"expert/ios/api/DatasetsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/DatasetsAPI/#return_2","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>Expert.shared.datasetsApi.getCoverageLonLatUriDatasets(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DatasetsAPI/#getcoveragelonlaturidatasetsid","title":"getCoverageLonLatUriDatasetsId","text":""},{"location":"expert/ios/api/DatasetsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/DatasetsAPI/#return_3","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>Expert.shared.datasetsApi.getCoverageLonLatUriDatasetsId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DatasetsAPI/#getcoverageregiondatasets","title":"getCoverageRegionDatasets","text":""},{"location":"expert/ios/api/DatasetsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/DatasetsAPI/#return_4","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>Expert.shared.datasetsApi.getCoverageRegionDatasets(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DatasetsAPI/#getcoverageregiondatasetsid","title":"getCoverageRegionDatasetsId","text":""},{"location":"expert/ios/api/DatasetsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/DatasetsAPI/#return_5","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>Expert.shared.datasetsApi.getCoverageRegionDatasetsId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DatasetsAPI/#getcoverageregionuridatasets","title":"getCoverageRegionUriDatasets","text":""},{"location":"expert/ios/api/DatasetsAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/DatasetsAPI/#return_6","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>Expert.shared.datasetsApi.getCoverageRegionUriDatasets(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DatasetsAPI/#getcoverageregionuridatasetsid","title":"getCoverageRegionUriDatasetsId","text":""},{"location":"expert/ios/api/DatasetsAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/DatasetsAPI/#return_7","title":"ReturnExample","text":"<p>Datasets</p> <pre><code>Expert.shared.datasetsApi.getCoverageRegionUriDatasetsId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DisruptionsAPI/","title":"DisruptionsAPI","text":"Method HTTP request getCoverageLonLatDisruptions GET /coverage/{lon};{lat}/disruptions getCoverageLonLatDisruptionsId GET /coverage/{lon};{lat}/disruptions/{id} getCoverageLonLatUriDisruptions GET /coverage/{lon};{lat}/{uri}/disruptions getCoverageLonLatUriDisruptionsId GET /coverage/{lon};{lat}/{uri}/disruptions/{id} getCoverageRegionDisruptions GET /coverage/{region}/disruptions getCoverageRegionDisruptionsId GET /coverage/{region}/disruptions/{id} getCoverageRegionUriDisruptions GET /coverage/{region}/{uri}/disruptions getCoverageRegionUriDisruptionsId GET /coverage/{region}/{uri}/disruptions/{id}"},{"location":"expert/ios/api/DisruptionsAPI/#getcoveragelonlatdisruptions","title":"getCoverageLonLatDisruptions","text":""},{"location":"expert/ios/api/DisruptionsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/DisruptionsAPI/#return","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>Expert.shared.disruptionsApi.getCoverageLonLatDisruptions(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DisruptionsAPI/#getcoveragelonlatdisruptionsid","title":"getCoverageLonLatDisruptionsId","text":""},{"location":"expert/ios/api/DisruptionsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/DisruptionsAPI/#return_1","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>Expert.shared.disruptionsApi.getCoverageLonLatDisruptionsId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DisruptionsAPI/#getcoveragelonlaturidisruptions","title":"getCoverageLonLatUriDisruptions","text":""},{"location":"expert/ios/api/DisruptionsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/DisruptionsAPI/#return_2","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>Expert.shared.disruptionsApi.getCoverageLonLatUriDisruptions(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DisruptionsAPI/#getcoveragelonlaturidisruptionsid","title":"getCoverageLonLatUriDisruptionsId","text":""},{"location":"expert/ios/api/DisruptionsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/DisruptionsAPI/#return_3","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>Expert.shared.disruptionsApi.getCoverageLonLatUriDisruptionsId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DisruptionsAPI/#getcoverageregiondisruptions","title":"getCoverageRegionDisruptions","text":""},{"location":"expert/ios/api/DisruptionsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/DisruptionsAPI/#return_4","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>Expert.shared.disruptionsApi.getCoverageRegionDisruptions(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DisruptionsAPI/#getcoverageregiondisruptionsid","title":"getCoverageRegionDisruptionsId","text":""},{"location":"expert/ios/api/DisruptionsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/DisruptionsAPI/#return_5","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>Expert.shared.disruptionsApi.getCoverageRegionDisruptionsId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DisruptionsAPI/#getcoverageregionuridisruptions","title":"getCoverageRegionUriDisruptions","text":""},{"location":"expert/ios/api/DisruptionsAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/DisruptionsAPI/#return_6","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>Expert.shared.disruptionsApi.getCoverageRegionUriDisruptions(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/DisruptionsAPI/#getcoverageregionuridisruptionsid","title":"getCoverageRegionUriDisruptionsId","text":""},{"location":"expert/ios/api/DisruptionsAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/DisruptionsAPI/#return_7","title":"ReturnExample","text":"<p>Disruptions</p> <pre><code>Expert.shared.disruptionsApi.getCoverageRegionUriDisruptionsId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/EquipmentReportsAPI/","title":"EquipmentReportsAPI","text":"Method HTTP request getCoordLonLatEquipmentReports GET /coord/{lon};{lat}/equipment_reports getCoordsLonLatEquipmentReports GET /coords/{lon};{lat}/equipment_reports getCoverageLonLatEquipmentReports GET /coverage/{lon};{lat}/equipment_reports getCoverageLonLatUriEquipmentReports GET /coverage/{lon};{lat}/{uri}/equipment_reports getCoverageRegionEquipmentReports GET /coverage/{region}/equipment_reports getCoverageRegionUriEquipmentReports GET /coverage/{region}/{uri}/equipment_reports"},{"location":"expert/ios/api/EquipmentReportsAPI/#getcoordlonlatequipmentreports","title":"getCoordLonLatEquipmentReports","text":""},{"location":"expert/ios/api/EquipmentReportsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/EquipmentReportsAPI/#return","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>Expert.shared.equipmentReportsApi.getCoordLonLatEquipmentReports(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/EquipmentReportsAPI/#getcoordslonlatequipmentreports","title":"getCoordsLonLatEquipmentReports","text":""},{"location":"expert/ios/api/EquipmentReportsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/EquipmentReportsAPI/#return_1","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>Expert.shared.equipmentReportsApi.getCoordsLonLatEquipmentReports(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/EquipmentReportsAPI/#getcoveragelonlatequipmentreports","title":"getCoverageLonLatEquipmentReports","text":""},{"location":"expert/ios/api/EquipmentReportsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/EquipmentReportsAPI/#return_2","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>Expert.shared.equipmentReportsApi.getCoverageLonLatEquipmentReports(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/EquipmentReportsAPI/#getcoveragelonlaturiequipmentreports","title":"getCoverageLonLatUriEquipmentReports","text":""},{"location":"expert/ios/api/EquipmentReportsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/EquipmentReportsAPI/#return_3","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>Expert.shared.equipmentReportsApi.getCoverageLonLatUriEquipmentReports(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/EquipmentReportsAPI/#getcoverageregionequipmentreports","title":"getCoverageRegionEquipmentReports","text":""},{"location":"expert/ios/api/EquipmentReportsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/EquipmentReportsAPI/#return_4","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>Expert.shared.equipmentReportsApi.getCoverageRegionEquipmentReports(\n    region: \"region_example\", \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/EquipmentReportsAPI/#getcoverageregionuriequipmentreports","title":"getCoverageRegionUriEquipmentReports","text":""},{"location":"expert/ios/api/EquipmentReportsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/EquipmentReportsAPI/#return_5","title":"ReturnExample","text":"<p>EquipmentReports</p> <pre><code>Expert.shared.equipmentReportsApi.getCoverageRegionUriEquipmentReports(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/","title":"FreeFloatingsNearbyAPI","text":"Method HTTP request getCoordLonLatFreefloatingsNearby GET /coord/{lon};{lat}/freefloatings_nearby getCoordsLonLatFreefloatingsNearby GET /coords/{lon};{lat}/freefloatings_nearby getCoverageLonLatFreefloatingsNearby GET /coverage/{lon};{lat}/freefloatings_nearby getCoverageLonLatUriFreefloatingsNearby GET /coverage/{lon};{lat}/{uri}/freefloatings_nearby getCoverageRegionFreefloatingsNearby GET /coverage/{region}/freefloatings_nearby getCoverageRegionUriFreefloatingsNearby GET /coverage/{region}/{uri}/freefloatings_nearby"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#getcoordlonlatfreefloatingsnearby","title":"getCoordLonLatFreefloatingsNearby","text":""},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query type [String] Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#return","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>Expert.shared.freeFloatingsNearbyApi.getCoordLonLatFreefloatingsNearby(\n    lat: 3.4, \n    lon: 3.4, \n    type: [\"type_example\"], \n    distance: 500, \n    count: 10, \n    coord: \"coord_example\", \n    startPage: 56\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#getcoordslonlatfreefloatingsnearby","title":"getCoordsLonLatFreefloatingsNearby","text":""},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query type [String] Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#return_1","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>Expert.shared.freeFloatingsNearbyApi.getCoordsLonLatFreefloatingsNearby(\n    lat: 3.4, \n    lon: 3.4, \n    type: [\"type_example\"], \n    distance: 500, \n    count: 10, \n    coord: \"coord_example\", \n    startPage: 56\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#getcoveragelonlatfreefloatingsnearby","title":"getCoverageLonLatFreefloatingsNearby","text":""},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query type [String] Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#return_2","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>Expert.shared.freeFloatingsNearbyApi.getCoverageLonLatFreefloatingsNearby(\n    lat: 3.4, \n    lon: 3.4, \n    type: [\"type_example\"], \n    distance: 500, \n    count: 10, \n    coord: \"coord_example\", \n    startPage: 56\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#getcoveragelonlaturifreefloatingsnearby","title":"getCoverageLonLatUriFreefloatingsNearby","text":""},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri type [String] Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#return_3","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>Expert.shared.freeFloatingsNearbyApi.getCoverageLonLatUriFreefloatingsNearby(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    type: [\"type_example\"], \n    distance: 500, \n    count: 10, \n    coord: \"coord_example\", \n    startPage: 56\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#getcoverageregionfreefloatingsnearby","title":"getCoverageRegionFreefloatingsNearby","text":""},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query type [String] Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#return_4","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>Expert.shared.freeFloatingsNearbyApi.getCoverageRegionFreefloatingsNearby(\n    region: \"region_example\", \n    type: [\"type_example\"], \n    distance: 500, \n    count: 10, \n    coord: \"coord_example\", \n    startPage: 56\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#getcoverageregionurifreefloatingsnearby","title":"getCoverageRegionUriFreefloatingsNearby","text":""},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri type [String] Type of free-floating objects to return [optional] [enum: BIKE, SCOOTER, MOTORSCOOTER, STATION, CAR, OTHER] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] coord String Coordinates longitude;latitude used to search the objects around this coordinate [optional] startPage Int The current page [optional]"},{"location":"expert/ios/api/FreeFloatingsNearbyAPI/#return_5","title":"ReturnExample","text":"<p>FreeFloatings</p> <pre><code>Expert.shared.freeFloatingsNearbyApi.getCoverageRegionUriFreefloatingsNearby(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    type: [\"type_example\"], \n    distance: 500, \n    count: 10, \n    coord: \"coord_example\", \n    startPage: 56\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/GeoStatusAPI/","title":"GeoStatusAPI","text":"Method HTTP request getCoverageLonLatGeoStatus GET /coverage/{lon};{lat}/_geo_status getCoverageRegionGeoStatus GET /coverage/{region}/_geo_status"},{"location":"expert/ios/api/GeoStatusAPI/#getcoveragelonlatgeostatus","title":"getCoverageLonLatGeoStatus","text":""},{"location":"expert/ios/api/GeoStatusAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query"},{"location":"expert/ios/api/GeoStatusAPI/#return","title":"ReturnExample","text":"<p>GeoStatus1</p> <pre><code>Expert.shared.geoStatusApi.getCoverageLonLatGeoStatus(\n    lat: 3.4, \n    lon: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/GeoStatusAPI/#getcoverageregiongeostatus","title":"getCoverageRegionGeoStatus","text":""},{"location":"expert/ios/api/GeoStatusAPI/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query"},{"location":"expert/ios/api/GeoStatusAPI/#return_1","title":"ReturnExample","text":"<p>GeoStatus1</p> <pre><code>Expert.shared.geoStatusApi.getCoverageRegionGeoStatus(\n    region: \"region_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/GraphicalIsochroneAPI/","title":"GraphicalIsochroneAPI","text":"Method HTTP request getCoverageLonLatIsochrones GET /coverage/{lon};{lat}/isochrones getCoverageRegionIsochrones GET /coverage/{region}/isochrones"},{"location":"expert/ios/api/GraphicalIsochroneAPI/#getcoveragelonlatisochrones","title":"getCoverageLonLatIsochrones","text":""},{"location":"expert/ios/api/GraphicalIsochroneAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime Date Date and time to go/arrive (see `datetime_represents`). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode [String] Force the first section mode if the first section is not a public transport one. `bss` stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing `bss` implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: `first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike` [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] lastSectionMode [String] Same as first_section_mode but for the last section. [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris [String] If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId [String] If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for `allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus`, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Bool DEPRECATED, replaced by `data_freshness`. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: `disruption_active=true` &lt;=&gt; `data_freshness=realtime` [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter `&amp;data_freshness=base_schedule` you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a `realtime` request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer `realtime` for traveler information as it will also contain adapted information schedule.  * 'realtime' - Use all realtime information [optional] [enum: base_schedule, adapted_schedule, realtime] maxDuration Int Maximum duration of journeys in seconds (from `datetime` parameter). More usefull when computing an isochrone (only `from` or `to` is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Bool If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set `forbidden_uris[]`! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (`first_section_mode[]` and `last_section_mode[]`) and set them yourself. [optional] [enum: cyclist, luggage, wheelchair, standard, motorist, fast_walker, slow_walker] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode [String] Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] partnerServices [String] Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] minDuration Int Minimum travel duration [optional] boundaryDuration [Int] To provide multiple duration parameters [optional]"},{"location":"expert/ios/api/GraphicalIsochroneAPI/#return","title":"ReturnExample","text":"<p>GraphicalIsrochone1</p> <pre><code>Expert.shared.graphicalIsochroneApi.getCoverageLonLatIsochrones(\n    lat: 3.4, \n    lon: 3.4, \n    from: \"from_example\", \n    to: \"to_example\", \n    datetime: Date(), \n    datetimeRepresents: \"departure\", \n    maxNbTransfers: 56, \n    minNbTransfers: 56, \n    firstSectionMode: [\"firstSectionMode_example\"], \n    lastSectionMode: [\"lastSectionMode_example\"], \n    maxDurationToPt: 56, \n    maxWalkingDurationToPt: 56, \n    maxBikeDurationToPt: 56, \n    maxBssDurationToPt: 56, \n    maxCarDurationToPt: 56, \n    maxRidesharingDurationToPt: 56, \n    maxCarNoParkDurationToPt: 56, \n    maxTaxiDurationToPt: 56, \n    walkingSpeed: 3.4, \n    bikeSpeed: 3.4, \n    bssSpeed: 3.4, \n    carSpeed: 3.4, \n    ridesharingSpeed: 3.4, \n    carNoParkSpeed: 3.4, \n    taxiSpeed: 3.4, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    allowedId: [\"allowedId_example\"], \n    disruptionActive: true, \n    dataFreshness: \"dataFreshness_example\", \n    maxDuration: 56, \n    wheelchair: true, \n    travelerType: \"travelerType_example\", \n    directPath: \"indifferent\", \n    freeRadiusFrom: 56, \n    freeRadiusTo: 56, \n    directPathMode: [\"directPathMode_example\"], \n    partnerServices: [\"partnerServices_example\"], \n    additionalTimeAfterFirstSectionTaxi: 56, \n    additionalTimeBeforeLastSectionTaxi: 56, \n    minDuration: 56, \n    boundaryDuration: [56]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/GraphicalIsochroneAPI/#getcoverageregionisochrones","title":"getCoverageRegionIsochrones","text":""},{"location":"expert/ios/api/GraphicalIsochroneAPI/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime Date Date and time to go/arrive (see `datetime_represents`). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode [String] Force the first section mode if the first section is not a public transport one. `bss` stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing `bss` implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: `first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike` [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] lastSectionMode [String] Same as first_section_mode but for the last section. [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris [String] If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId [String] If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for `allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus`, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Bool DEPRECATED, replaced by `data_freshness`. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: `disruption_active=true` &lt;=&gt; `data_freshness=realtime` [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter `&amp;data_freshness=base_schedule` you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a `realtime` request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer `realtime` for traveler information as it will also contain adapted information schedule.  * 'realtime' - Use all realtime information [optional] [enum: base_schedule, adapted_schedule, realtime] maxDuration Int Maximum duration of journeys in seconds (from `datetime` parameter). More usefull when computing an isochrone (only `from` or `to` is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Bool If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set `forbidden_uris[]`! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (`first_section_mode[]` and `last_section_mode[]`) and set them yourself. [optional] [enum: cyclist, luggage, wheelchair, standard, motorist, fast_walker, slow_walker] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode [String] Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] partnerServices [String] Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] minDuration Int Minimum travel duration [optional] boundaryDuration [Int] To provide multiple duration parameters [optional]"},{"location":"expert/ios/api/GraphicalIsochroneAPI/#return_1","title":"ReturnExample","text":"<p>GraphicalIsrochone1</p> <pre><code>Expert.shared.graphicalIsochroneApi.getCoverageRegionIsochrones(\n    region: \"region_example\", \n    from: \"from_example\", \n    to: \"to_example\", \n    datetime: Date(), \n    datetimeRepresents: \"departure\", \n    maxNbTransfers: 56, \n    minNbTransfers: 56, \n    firstSectionMode: [\"firstSectionMode_example\"], \n    lastSectionMode: [\"lastSectionMode_example\"], \n    maxDurationToPt: 56, \n    maxWalkingDurationToPt: 56, \n    maxBikeDurationToPt: 56, \n    maxBssDurationToPt: 56, \n    maxCarDurationToPt: 56, \n    maxRidesharingDurationToPt: 56, \n    maxCarNoParkDurationToPt: 56, \n    maxTaxiDurationToPt: 56, \n    walkingSpeed: 3.4, \n    bikeSpeed: 3.4, \n    bssSpeed: 3.4, \n    carSpeed: 3.4, \n    ridesharingSpeed: 3.4, \n    carNoParkSpeed: 3.4, \n    taxiSpeed: 3.4, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    allowedId: [\"allowedId_example\"], \n    disruptionActive: true, \n    dataFreshness: \"dataFreshness_example\", \n    maxDuration: 56, \n    wheelchair: true, \n    travelerType: \"travelerType_example\", \n    directPath: \"indifferent\", \n    freeRadiusFrom: 56, \n    freeRadiusTo: 56, \n    directPathMode: [\"directPathMode_example\"], \n    partnerServices: [\"partnerServices_example\"], \n    additionalTimeAfterFirstSectionTaxi: 56, \n    additionalTimeBeforeLastSectionTaxi: 56, \n    minDuration: 56, \n    boundaryDuration: [56]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/HeatMapAPI/","title":"HeatMapAPI","text":"Method HTTP request getCoverageLonLatHeatMaps GET /coverage/{lon};{lat}/heat_maps getCoverageRegionHeatMaps GET /coverage/{region}/heat_maps"},{"location":"expert/ios/api/HeatMapAPI/#getcoveragelonlatheatmaps","title":"getCoverageLonLatHeatMaps","text":""},{"location":"expert/ios/api/HeatMapAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime Date Date and time to go/arrive (see `datetime_represents`). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode [String] Force the first section mode if the first section is not a public transport one. `bss` stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing `bss` implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: `first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike` [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] lastSectionMode [String] Same as first_section_mode but for the last section. [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris [String] If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId [String] If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for `allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus`, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Bool DEPRECATED, replaced by `data_freshness`. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: `disruption_active=true` &lt;=&gt; `data_freshness=realtime` [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter `&amp;data_freshness=base_schedule` you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a `realtime` request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer `realtime` for traveler information as it will also contain adapted information schedule.  * 'realtime' - Use all realtime information [optional] [enum: base_schedule, adapted_schedule, realtime] maxDuration Int Maximum duration of journeys in seconds (from `datetime` parameter). More usefull when computing an isochrone (only `from` or `to` is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Bool If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set `forbidden_uris[]`! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (`first_section_mode[]` and `last_section_mode[]`) and set them yourself. [optional] [enum: cyclist, luggage, wheelchair, standard, motorist, fast_walker, slow_walker] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode [String] Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] partnerServices [String] Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] resolution Int Sampling resolution [optional] [default to 500]"},{"location":"expert/ios/api/HeatMapAPI/#return","title":"ReturnExample","text":"<p>HeatMap1</p> <pre><code>Expert.shared.heatMapApi.getCoverageLonLatHeatMaps(\n    lat: 3.4, \n    lon: 3.4, \n    from: \"from_example\", \n    to: \"to_example\", \n    datetime: Date(), \n    datetimeRepresents: \"departure\", \n    maxNbTransfers: 56, \n    minNbTransfers: 56, \n    firstSectionMode: [\"firstSectionMode_example\"], \n    lastSectionMode: [\"lastSectionMode_example\"], \n    maxDurationToPt: 56, \n    maxWalkingDurationToPt: 56, \n    maxBikeDurationToPt: 56, \n    maxBssDurationToPt: 56, \n    maxCarDurationToPt: 56, \n    maxRidesharingDurationToPt: 56, \n    maxCarNoParkDurationToPt: 56, \n    maxTaxiDurationToPt: 56, \n    walkingSpeed: 3.4, \n    bikeSpeed: 3.4, \n    bssSpeed: 3.4, \n    carSpeed: 3.4, \n    ridesharingSpeed: 3.4, \n    carNoParkSpeed: 3.4, \n    taxiSpeed: 3.4, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    allowedId: [\"allowedId_example\"], \n    disruptionActive: true, \n    dataFreshness: \"dataFreshness_example\", \n    maxDuration: 56, \n    wheelchair: true, \n    travelerType: \"travelerType_example\", \n    directPath: \"indifferent\", \n    freeRadiusFrom: 56, \n    freeRadiusTo: 56, \n    directPathMode: [\"directPathMode_example\"], \n    partnerServices: [\"partnerServices_example\"], \n    additionalTimeAfterFirstSectionTaxi: 56, \n    additionalTimeBeforeLastSectionTaxi: 56, \n    resolution: 500\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/HeatMapAPI/#getcoverageregionheatmaps","title":"getCoverageRegionHeatMaps","text":""},{"location":"expert/ios/api/HeatMapAPI/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime Date Date and time to go/arrive (see `datetime_represents`). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode [String] Force the first section mode if the first section is not a public transport one. `bss` stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing `bss` implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: `first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike` [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] lastSectionMode [String] Same as first_section_mode but for the last section. [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris [String] If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId [String] If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for `allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus`, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Bool DEPRECATED, replaced by `data_freshness`. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: `disruption_active=true` &lt;=&gt; `data_freshness=realtime` [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter `&amp;data_freshness=base_schedule` you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a `realtime` request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer `realtime` for traveler information as it will also contain adapted information schedule.  * 'realtime' - Use all realtime information [optional] [enum: base_schedule, adapted_schedule, realtime] maxDuration Int Maximum duration of journeys in seconds (from `datetime` parameter). More usefull when computing an isochrone (only `from` or `to` is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Bool If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set `forbidden_uris[]`! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (`first_section_mode[]` and `last_section_mode[]`) and set them yourself. [optional] [enum: cyclist, luggage, wheelchair, standard, motorist, fast_walker, slow_walker] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode [String] Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] partnerServices [String] Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] resolution Int Sampling resolution [optional] [default to 500]"},{"location":"expert/ios/api/HeatMapAPI/#return_1","title":"ReturnExample","text":"<p>HeatMap1</p> <pre><code>Expert.shared.heatMapApi.getCoverageRegionHeatMaps(\n    region: \"region_example\", \n    from: \"from_example\", \n    to: \"to_example\", \n    datetime: Date(), \n    datetimeRepresents: \"departure\", \n    maxNbTransfers: 56, \n    minNbTransfers: 56, \n    firstSectionMode: [\"firstSectionMode_example\"], \n    lastSectionMode: [\"lastSectionMode_example\"], \n    maxDurationToPt: 56, \n    maxWalkingDurationToPt: 56, \n    maxBikeDurationToPt: 56, \n    maxBssDurationToPt: 56, \n    maxCarDurationToPt: 56, \n    maxRidesharingDurationToPt: 56, \n    maxCarNoParkDurationToPt: 56, \n    maxTaxiDurationToPt: 56, \n    walkingSpeed: 3.4, \n    bikeSpeed: 3.4, \n    bssSpeed: 3.4, \n    carSpeed: 3.4, \n    ridesharingSpeed: 3.4, \n    carNoParkSpeed: 3.4, \n    taxiSpeed: 3.4, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    allowedId: [\"allowedId_example\"], \n    disruptionActive: true, \n    dataFreshness: \"dataFreshness_example\", \n    maxDuration: 56, \n    wheelchair: true, \n    travelerType: \"travelerType_example\", \n    directPath: \"indifferent\", \n    freeRadiusFrom: 56, \n    freeRadiusTo: 56, \n    directPathMode: [\"directPathMode_example\"], \n    partnerServices: [\"partnerServices_example\"], \n    additionalTimeAfterFirstSectionTaxi: 56, \n    additionalTimeBeforeLastSectionTaxi: 56, \n    resolution: 500\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternPointsAPI/","title":"JourneyPatternPointsAPI","text":"Method HTTP request getCoverageLonLatJourneyPatternPoints GET /coverage/{lon};{lat}/journey_pattern_points getCoverageLonLatJourneyPatternPointsId GET /coverage/{lon};{lat}/journey_pattern_points/{id} getCoverageLonLatUriJourneyPatternPoints GET /coverage/{lon};{lat}/{uri}/journey_pattern_points getCoverageLonLatUriJourneyPatternPointsId GET /coverage/{lon};{lat}/{uri}/journey_pattern_points/{id} getCoverageRegionJourneyPatternPoints GET /coverage/{region}/journey_pattern_points getCoverageRegionJourneyPatternPointsId GET /coverage/{region}/journey_pattern_points/{id} getCoverageRegionUriJourneyPatternPoints GET /coverage/{region}/{uri}/journey_pattern_points getCoverageRegionUriJourneyPatternPointsId GET /coverage/{region}/{uri}/journey_pattern_points/{id}"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#getcoveragelonlatjourneypatternpoints","title":"getCoverageLonLatJourneyPatternPoints","text":""},{"location":"expert/ios/api/JourneyPatternPointsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#return","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>Expert.shared.journeyPatternPointsApi.getCoverageLonLatJourneyPatternPoints(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#getcoveragelonlatjourneypatternpointsid","title":"getCoverageLonLatJourneyPatternPointsId","text":""},{"location":"expert/ios/api/JourneyPatternPointsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#return_1","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>Expert.shared.journeyPatternPointsApi.getCoverageLonLatJourneyPatternPointsId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#getcoveragelonlaturijourneypatternpoints","title":"getCoverageLonLatUriJourneyPatternPoints","text":""},{"location":"expert/ios/api/JourneyPatternPointsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#return_2","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>Expert.shared.journeyPatternPointsApi.getCoverageLonLatUriJourneyPatternPoints(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#getcoveragelonlaturijourneypatternpointsid","title":"getCoverageLonLatUriJourneyPatternPointsId","text":""},{"location":"expert/ios/api/JourneyPatternPointsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#return_3","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>Expert.shared.journeyPatternPointsApi.getCoverageLonLatUriJourneyPatternPointsId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#getcoverageregionjourneypatternpoints","title":"getCoverageRegionJourneyPatternPoints","text":""},{"location":"expert/ios/api/JourneyPatternPointsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#return_4","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>Expert.shared.journeyPatternPointsApi.getCoverageRegionJourneyPatternPoints(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#getcoverageregionjourneypatternpointsid","title":"getCoverageRegionJourneyPatternPointsId","text":""},{"location":"expert/ios/api/JourneyPatternPointsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#return_5","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>Expert.shared.journeyPatternPointsApi.getCoverageRegionJourneyPatternPointsId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#getcoverageregionurijourneypatternpoints","title":"getCoverageRegionUriJourneyPatternPoints","text":""},{"location":"expert/ios/api/JourneyPatternPointsAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#return_6","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>Expert.shared.journeyPatternPointsApi.getCoverageRegionUriJourneyPatternPoints(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#getcoverageregionurijourneypatternpointsid","title":"getCoverageRegionUriJourneyPatternPointsId","text":""},{"location":"expert/ios/api/JourneyPatternPointsAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternPointsAPI/#return_7","title":"ReturnExample","text":"<p>JourneyPatternPoints</p> <pre><code>Expert.shared.journeyPatternPointsApi.getCoverageRegionUriJourneyPatternPointsId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternsAPI/","title":"JourneyPatternsAPI","text":"Method HTTP request getCoverageLonLatJourneyPatterns GET /coverage/{lon};{lat}/journey_patterns getCoverageLonLatJourneyPatternsId GET /coverage/{lon};{lat}/journey_patterns/{id} getCoverageLonLatUriJourneyPatterns GET /coverage/{lon};{lat}/{uri}/journey_patterns getCoverageLonLatUriJourneyPatternsId GET /coverage/{lon};{lat}/{uri}/journey_patterns/{id} getCoverageRegionJourneyPatterns GET /coverage/{region}/journey_patterns getCoverageRegionJourneyPatternsId GET /coverage/{region}/journey_patterns/{id} getCoverageRegionUriJourneyPatterns GET /coverage/{region}/{uri}/journey_patterns getCoverageRegionUriJourneyPatternsId GET /coverage/{region}/{uri}/journey_patterns/{id}"},{"location":"expert/ios/api/JourneyPatternsAPI/#getcoveragelonlatjourneypatterns","title":"getCoverageLonLatJourneyPatterns","text":""},{"location":"expert/ios/api/JourneyPatternsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternsAPI/#return","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>Expert.shared.journeyPatternsApi.getCoverageLonLatJourneyPatterns(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternsAPI/#getcoveragelonlatjourneypatternsid","title":"getCoverageLonLatJourneyPatternsId","text":""},{"location":"expert/ios/api/JourneyPatternsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternsAPI/#return_1","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>Expert.shared.journeyPatternsApi.getCoverageLonLatJourneyPatternsId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternsAPI/#getcoveragelonlaturijourneypatterns","title":"getCoverageLonLatUriJourneyPatterns","text":""},{"location":"expert/ios/api/JourneyPatternsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternsAPI/#return_2","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>Expert.shared.journeyPatternsApi.getCoverageLonLatUriJourneyPatterns(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternsAPI/#getcoveragelonlaturijourneypatternsid","title":"getCoverageLonLatUriJourneyPatternsId","text":""},{"location":"expert/ios/api/JourneyPatternsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternsAPI/#return_3","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>Expert.shared.journeyPatternsApi.getCoverageLonLatUriJourneyPatternsId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternsAPI/#getcoverageregionjourneypatterns","title":"getCoverageRegionJourneyPatterns","text":""},{"location":"expert/ios/api/JourneyPatternsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternsAPI/#return_4","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>Expert.shared.journeyPatternsApi.getCoverageRegionJourneyPatterns(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternsAPI/#getcoverageregionjourneypatternsid","title":"getCoverageRegionJourneyPatternsId","text":""},{"location":"expert/ios/api/JourneyPatternsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternsAPI/#return_5","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>Expert.shared.journeyPatternsApi.getCoverageRegionJourneyPatternsId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternsAPI/#getcoverageregionurijourneypatterns","title":"getCoverageRegionUriJourneyPatterns","text":""},{"location":"expert/ios/api/JourneyPatternsAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternsAPI/#return_6","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>Expert.shared.journeyPatternsApi.getCoverageRegionUriJourneyPatterns(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneyPatternsAPI/#getcoverageregionurijourneypatternsid","title":"getCoverageRegionUriJourneyPatternsId","text":""},{"location":"expert/ios/api/JourneyPatternsAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/JourneyPatternsAPI/#return_7","title":"ReturnExample","text":"<p>JourneyPatterns</p> <pre><code>Expert.shared.journeyPatternsApi.getCoverageRegionUriJourneyPatternsId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneysAPI/","title":"JourneysAPI","text":"Method HTTP request getCoverageLonLatJourneys GET /coverage/{lon};{lat}/journeys getCoverageRegionJourneys GET /coverage/{region}/journeys getJourneys GET /journeys"},{"location":"expert/ios/api/JourneysAPI/#getcoveragelonlatjourneys","title":"getCoverageLonLatJourneys","text":""},{"location":"expert/ios/api/JourneysAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime Date Date and time to go/arrive (see `datetime_represents`). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode [String] Force the first section mode if the first section is not a public transport one. `bss` stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing `bss` implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: `first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike` [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] lastSectionMode [String] Same as first_section_mode but for the last section. [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris [String] If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId [String] If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for `allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus`, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Bool DEPRECATED, replaced by `data_freshness`. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: `disruption_active=true` &lt;=&gt; `data_freshness=realtime` [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter `&amp;data_freshness=base_schedule` you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a `realtime` request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer `realtime` for traveler information as it will also contain adapted information schedule.  * 'realtime' - Use all realtime information [optional] [enum: base_schedule, adapted_schedule, realtime] maxDuration Int Maximum duration of journeys in seconds (from `datetime` parameter). More usefull when computing an isochrone (only `from` or `to` is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Bool If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set `forbidden_uris[]`! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (`first_section_mode[]` and `last_section_mode[]`) and set them yourself. [optional] [enum: cyclist, luggage, wheelchair, standard, motorist, fast_walker, slow_walker] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode [String] Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] partnerServices [String] Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] count Int Fixed number of different journeys [optional] isJourneySchedules Bool True when '/journeys' is called to computethe same journey schedules and it'll override some specific parameters [optional] minNbJourneys Int Minimum number of different suggested journeys, must be &gt;= 0 [optional] maxNbJourneys Int Maximum number of different suggested journeys, must be &gt; 0 [optional] bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of response [optional] [enum: bss_stands, car_park, , none] timeframeDuration Int Minimum timeframe to search journeys. For example 'timeframe_duration=3600' will search for all interesting journeys departing within the next hour. Nota 1: Navitia can return journeys after that timeframe as it's actually a minimum. Nota 2: 'max_nb_journeys' parameter has priority over 'timeframe_duration' parameter. [optional] equipmentDetails Bool enhance response with accessibility equipement details [optional] [default to True] maxTaxiDirectPathDuration Int limit duration of direct path in taxi, used ONLY in distributed scenario [optional] maxWalkingDirectPathDuration Int limit duration of direct path in walking, used ONLY in distributed scenario [optional] maxCarNoParkDirectPathDuration Int limit duration of direct path in car_no_park, used ONLY in distributed scenario [optional] maxCarDirectPathDuration Int limit duration of direct path in car, used ONLY in distributed scenario [optional] maxRidesharingDirectPathDuration Int limit duration of direct path in ridesharing, used ONLY in distributed scenario [optional] maxBssDirectPathDuration Int limit duration of direct path in bss, used ONLY in distributed scenario [optional] maxBikeDirectPathDuration Int limit duration of direct path in bike, used ONLY in distributed scenario [optional] depth Int The depth of your object [optional] [default to 1] maxWaitingDuration Int A journey containing a waiting section with a duration greater or equal to  max_waiting_duration will be discarded. Units : seconds. Must be &gt; 0. Default value : 4h [optional]"},{"location":"expert/ios/api/JourneysAPI/#return","title":"ReturnExample","text":"<p>Journeys</p> <pre><code>Expert.shared.journeysApi.getCoverageLonLatJourneys(\n    lat: 3.4, \n    lon: 3.4, \n    from: \"from_example\", \n    to: \"to_example\", \n    datetime: Date(), \n    datetimeRepresents: \"departure\", \n    maxNbTransfers: 56, \n    minNbTransfers: 56, \n    firstSectionMode: [\"firstSectionMode_example\"], \n    lastSectionMode: [\"lastSectionMode_example\"], \n    maxDurationToPt: 56, \n    maxWalkingDurationToPt: 56, \n    maxBikeDurationToPt: 56, \n    maxBssDurationToPt: 56, \n    maxCarDurationToPt: 56, \n    maxRidesharingDurationToPt: 56, \n    maxCarNoParkDurationToPt: 56, \n    maxTaxiDurationToPt: 56, \n    walkingSpeed: 3.4, \n    bikeSpeed: 3.4, \n    bssSpeed: 3.4, \n    carSpeed: 3.4, \n    ridesharingSpeed: 3.4, \n    carNoParkSpeed: 3.4, \n    taxiSpeed: 3.4, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    allowedId: [\"allowedId_example\"], \n    disruptionActive: true, \n    dataFreshness: \"dataFreshness_example\", \n    maxDuration: 56, \n    wheelchair: true, \n    travelerType: \"travelerType_example\", \n    directPath: \"indifferent\", \n    freeRadiusFrom: 56, \n    freeRadiusTo: 56, \n    directPathMode: [\"directPathMode_example\"], \n    partnerServices: [\"partnerServices_example\"], \n    additionalTimeAfterFirstSectionTaxi: 56, \n    additionalTimeBeforeLastSectionTaxi: 56, \n    count: 56, \n    isJourneySchedules: true, \n    minNbJourneys: 56, \n    maxNbJourneys: 56, \n    bssStands: true, \n    addPoiInfos: [\"addPoiInfos_example\"], \n    timeframeDuration: 56, \n    equipmentDetails: True, \n    maxTaxiDirectPathDuration: 56, \n    maxWalkingDirectPathDuration: 56, \n    maxCarNoParkDirectPathDuration: 56, \n    maxCarDirectPathDuration: 56, \n    maxRidesharingDirectPathDuration: 56, \n    maxBssDirectPathDuration: 56, \n    maxBikeDirectPathDuration: 56, \n    depth: 1, \n    maxWaitingDuration: 56\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneysAPI/#getcoverageregionjourneys","title":"getCoverageRegionJourneys","text":""},{"location":"expert/ios/api/JourneysAPI/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime Date Date and time to go/arrive (see `datetime_represents`). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode [String] Force the first section mode if the first section is not a public transport one. `bss` stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing `bss` implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: `first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike` [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] lastSectionMode [String] Same as first_section_mode but for the last section. [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris [String] If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId [String] If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for `allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus`, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Bool DEPRECATED, replaced by `data_freshness`. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: `disruption_active=true` &lt;=&gt; `data_freshness=realtime` [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter `&amp;data_freshness=base_schedule` you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a `realtime` request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer `realtime` for traveler information as it will also contain adapted information schedule.  * 'realtime' - Use all realtime information [optional] [enum: base_schedule, adapted_schedule, realtime] maxDuration Int Maximum duration of journeys in seconds (from `datetime` parameter). More usefull when computing an isochrone (only `from` or `to` is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Bool If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set `forbidden_uris[]`! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (`first_section_mode[]` and `last_section_mode[]`) and set them yourself. [optional] [enum: cyclist, luggage, wheelchair, standard, motorist, fast_walker, slow_walker] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode [String] Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] partnerServices [String] Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] count Int Fixed number of different journeys [optional] isJourneySchedules Bool True when '/journeys' is called to computethe same journey schedules and it'll override some specific parameters [optional] minNbJourneys Int Minimum number of different suggested journeys, must be &gt;= 0 [optional] maxNbJourneys Int Maximum number of different suggested journeys, must be &gt; 0 [optional] bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of response [optional] [enum: bss_stands, car_park, , none] timeframeDuration Int Minimum timeframe to search journeys. For example 'timeframe_duration=3600' will search for all interesting journeys departing within the next hour. Nota 1: Navitia can return journeys after that timeframe as it's actually a minimum. Nota 2: 'max_nb_journeys' parameter has priority over 'timeframe_duration' parameter. [optional] equipmentDetails Bool enhance response with accessibility equipement details [optional] [default to True] maxTaxiDirectPathDuration Int limit duration of direct path in taxi, used ONLY in distributed scenario [optional] maxWalkingDirectPathDuration Int limit duration of direct path in walking, used ONLY in distributed scenario [optional] maxCarNoParkDirectPathDuration Int limit duration of direct path in car_no_park, used ONLY in distributed scenario [optional] maxCarDirectPathDuration Int limit duration of direct path in car, used ONLY in distributed scenario [optional] maxRidesharingDirectPathDuration Int limit duration of direct path in ridesharing, used ONLY in distributed scenario [optional] maxBssDirectPathDuration Int limit duration of direct path in bss, used ONLY in distributed scenario [optional] maxBikeDirectPathDuration Int limit duration of direct path in bike, used ONLY in distributed scenario [optional] depth Int The depth of your object [optional] [default to 1] maxWaitingDuration Int A journey containing a waiting section with a duration greater or equal to  max_waiting_duration will be discarded. Units : seconds. Must be &gt; 0. Default value : 4h [optional]"},{"location":"expert/ios/api/JourneysAPI/#return_1","title":"ReturnExample","text":"<p>Journeys</p> <pre><code>Expert.shared.journeysApi.getCoverageRegionJourneys(\n    region: \"region_example\", \n    from: \"from_example\", \n    to: \"to_example\", \n    datetime: Date(), \n    datetimeRepresents: \"departure\", \n    maxNbTransfers: 56, \n    minNbTransfers: 56, \n    firstSectionMode: [\"firstSectionMode_example\"], \n    lastSectionMode: [\"lastSectionMode_example\"], \n    maxDurationToPt: 56, \n    maxWalkingDurationToPt: 56, \n    maxBikeDurationToPt: 56, \n    maxBssDurationToPt: 56, \n    maxCarDurationToPt: 56, \n    maxRidesharingDurationToPt: 56, \n    maxCarNoParkDurationToPt: 56, \n    maxTaxiDurationToPt: 56, \n    walkingSpeed: 3.4, \n    bikeSpeed: 3.4, \n    bssSpeed: 3.4, \n    carSpeed: 3.4, \n    ridesharingSpeed: 3.4, \n    carNoParkSpeed: 3.4, \n    taxiSpeed: 3.4, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    allowedId: [\"allowedId_example\"], \n    disruptionActive: true, \n    dataFreshness: \"dataFreshness_example\", \n    maxDuration: 56, \n    wheelchair: true, \n    travelerType: \"travelerType_example\", \n    directPath: \"indifferent\", \n    freeRadiusFrom: 56, \n    freeRadiusTo: 56, \n    directPathMode: [\"directPathMode_example\"], \n    partnerServices: [\"partnerServices_example\"], \n    additionalTimeAfterFirstSectionTaxi: 56, \n    additionalTimeBeforeLastSectionTaxi: 56, \n    count: 56, \n    isJourneySchedules: true, \n    minNbJourneys: 56, \n    maxNbJourneys: 56, \n    bssStands: true, \n    addPoiInfos: [\"addPoiInfos_example\"], \n    timeframeDuration: 56, \n    equipmentDetails: True, \n    maxTaxiDirectPathDuration: 56, \n    maxWalkingDirectPathDuration: 56, \n    maxCarNoParkDirectPathDuration: 56, \n    maxCarDirectPathDuration: 56, \n    maxRidesharingDirectPathDuration: 56, \n    maxBssDirectPathDuration: 56, \n    maxBikeDirectPathDuration: 56, \n    depth: 1, \n    maxWaitingDuration: 56\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/JourneysAPI/#getjourneys","title":"getJourneys","text":""},{"location":"expert/ios/api/JourneysAPI/#parameters_2","title":"Parameters","text":"Name Type Note from String The id of the departure of your journey. If not provided an isochrone is computed. [optional] to String The id of the arrival of your journey. If not provided an isochrone is computed. [optional] datetime Date Date and time to go/arrive (see `datetime_represents`). Note: the datetime must be in the coverage\u2019s publication period. [optional] datetimeRepresents String Determine how datetime is handled.  Possible values:  * 'departure' - Compute journeys starting after datetime  * 'arrival' - Compute journeys arriving before datetime [optional] [default to departure] [enum: arrival, departure] maxNbTransfers Int Maximum number of transfers in each journey [optional] minNbTransfers Int Minimum number of transfers in each journey [optional] firstSectionMode [String] Force the first section mode if the first section is not a public transport one. `bss` stands for bike sharing system. Note 1: It\u2019s an array, you can give multiple modes. Note 2: Choosing `bss` implicitly allows the walking mode since you might have to walk to the bss station. Note 3: The parameter is inclusive, not exclusive, so if you want to forbid a mode, you need to add all the other modes. Eg: If you never want to use a car, you need: `first_section_mode[]=walking&amp;first_section_mode[]=bss&amp;first_section_mode[]=bike&amp;last_section_mode[]=walking&amp;last_section_mode[]=bss&amp;last_section_mode[]=bike` [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] lastSectionMode [String] Same as first_section_mode but for the last section. [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] maxDurationToPt Int Maximum allowed duration to reach the public transport (same limit used before and after public transport). Use this to limit the walking/biking part. Unit is seconds [optional] maxWalkingDurationToPt Int Maximal duration of walking on public transport in second [optional] maxBikeDurationToPt Int Maximal duration of bike on public transport in second [optional] maxBssDurationToPt Int Maximal duration of bss on public transport in second [optional] maxCarDurationToPt Int Maximal duration of car on public transport in second [optional] maxRidesharingDurationToPt Int Maximal duration of ridesharing on public transport in second [optional] maxCarNoParkDurationToPt Int Maximal duration of car no park on public transport in second [optional] maxTaxiDurationToPt Int Maximal duration of taxi on public transport in second, only available in distributed scenario [optional] walkingSpeed Float Walking speed for the fallback sections. Speed unit must be in meter/second [optional] bikeSpeed Float Biking speed for the fallback sections. Speed unit must be in meter/second [optional] bssSpeed Float Speed while using a bike from a bike sharing system for the fallback sections. Speed unit must be in meter/second [optional] carSpeed Float Driving speed for the fallback sections. Speed unit must be in meter/second [optional] ridesharingSpeed Float ridesharing speed for the fallback sections. Speed unit must be in meter/second [optional] carNoParkSpeed Float Driving speed without car park for the fallback sections. Speed unit must be in meter/second [optional] taxiSpeed Float taxi speed speed for the fallback sections. Speed unit must be in meter/second [optional] forbiddenUris [String] If you want to avoid lines, modes, networks, etc. Note: the forbidden_uris[] concern only the public transport objects. You can\u2019t for example forbid the use of the bike with them, you have to set the fallback modes for this (first_section_mode[] and last_section_mode[]) [optional] allowedId [String] If you want to use only a small subset of the public transport objects in your solution. Note: The constraint intersects with forbidden_uris[]. For example, if you ask for `allowed_id[]=line:A&amp;forbidden_uris[]=physical_mode:Bus`, only vehicles of the line A that are not buses will be used. [optional] disruptionActive Bool DEPRECATED, replaced by `data_freshness`. If true the algorithm takes the disruptions into account, and thus avoid disrupted public transport. Nota: `disruption_active=true` &lt;=&gt; `data_freshness=realtime` [optional] dataFreshness String Define the freshness of data to use to compute journeys. When using the following parameter `&amp;data_freshness=base_schedule` you can get disrupted journeys in the response. You can then display the disruption message to the traveler and make a `realtime` request to get a new undisrupted solution.  Possible values:  * 'base_schedule' - Use theoric schedule information  * 'adapted_schedule' - Use of adapted schedule information (like strike adjusting, etc.). Prefer `realtime` for traveler information as it will also contain adapted information schedule.  * 'realtime' - Use all realtime information [optional] [enum: base_schedule, adapted_schedule, realtime] maxDuration Int Maximum duration of journeys in seconds (from `datetime` parameter). More usefull when computing an isochrone (only `from` or `to` is provided). On a classic journey (from-to), it will mostly speedup Navitia: You may have journeys a bit longer than that value (you would have to filter them). [optional] wheelchair Bool If true the traveler is considered to be using a wheelchair, thus only accessible public transport are used. Be warned: many data are currently too faint to provide acceptable answers with this parameter on. [optional] travelerType String Define speeds and accessibility values for different kind of people. Each profile also automatically determines appropriate first and last section modes to the covered area. Note: this means that you might get car, bike, etc. fallback routes even if you set `forbidden_uris[]`! You can overload all parameters (especially speeds, distances, first and last modes) by setting all of them specifically. We advise that you don\u2019t rely on the traveler_type\u2019s fallback modes (`first_section_mode[]` and `last_section_mode[]`) and set them yourself. [optional] [enum: cyclist, luggage, wheelchair, standard, motorist, fast_walker, slow_walker] directPath String Specify if direct path should be suggested [optional] [default to indifferent] [enum: indifferent, only, none, only_with_alternatives] freeRadiusFrom Int Radius length (in meters) around the coordinates of departure in which the stop points are considered free to go (crowfly=0) [optional] freeRadiusTo Int Radius length (in meters) around the coordinates of arrival in which the stop points are considered free to go (crowfly=0) [optional] directPathMode [String] Force the direct-path modes.If this list is not empty, we only compute direct_path for modes in this listAnd filter all the direct_paths of modes in first_section_mode[] [optional] [enum: taxi, walking, car_no_park, car, ridesharing, bss, bike] partnerServices [String] Expose only the partner type into the response. [optional] [enum: ridesharing] additionalTimeAfterFirstSectionTaxi Int the additional time added to the taxi section, right after riding the taxi but before hopping on the public transit [optional] additionalTimeBeforeLastSectionTaxi Int the additional time added to the taxi section, right before riding the taxi but after hopping off the public transit [optional] count Int Fixed number of different journeys [optional] isJourneySchedules Bool True when '/journeys' is called to computethe same journey schedules and it'll override some specific parameters [optional] minNbJourneys Int Minimum number of different suggested journeys, must be &gt;= 0 [optional] maxNbJourneys Int Maximum number of different suggested journeys, must be &gt; 0 [optional] bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of response [optional] [enum: bss_stands, car_park, , none] timeframeDuration Int Minimum timeframe to search journeys. For example 'timeframe_duration=3600' will search for all interesting journeys departing within the next hour. Nota 1: Navitia can return journeys after that timeframe as it's actually a minimum. Nota 2: 'max_nb_journeys' parameter has priority over 'timeframe_duration' parameter. [optional] equipmentDetails Bool enhance response with accessibility equipement details [optional] [default to True] maxTaxiDirectPathDuration Int limit duration of direct path in taxi, used ONLY in distributed scenario [optional] maxWalkingDirectPathDuration Int limit duration of direct path in walking, used ONLY in distributed scenario [optional] maxCarNoParkDirectPathDuration Int limit duration of direct path in car_no_park, used ONLY in distributed scenario [optional] maxCarDirectPathDuration Int limit duration of direct path in car, used ONLY in distributed scenario [optional] maxRidesharingDirectPathDuration Int limit duration of direct path in ridesharing, used ONLY in distributed scenario [optional] maxBssDirectPathDuration Int limit duration of direct path in bss, used ONLY in distributed scenario [optional] maxBikeDirectPathDuration Int limit duration of direct path in bike, used ONLY in distributed scenario [optional] depth Int The depth of your object [optional] [default to 1] maxWaitingDuration Int A journey containing a waiting section with a duration greater or equal to  max_waiting_duration will be discarded. Units : seconds. Must be &gt; 0. Default value : 4h [optional]"},{"location":"expert/ios/api/JourneysAPI/#return_2","title":"ReturnExample","text":"<p>Journeys</p> <pre><code>Expert.shared.journeysApi.getJourneys(\n    from: \"from_example\", \n    to: \"to_example\", \n    datetime: Date(), \n    datetimeRepresents: \"departure\", \n    maxNbTransfers: 56, \n    minNbTransfers: 56, \n    firstSectionMode: [\"firstSectionMode_example\"], \n    lastSectionMode: [\"lastSectionMode_example\"], \n    maxDurationToPt: 56, \n    maxWalkingDurationToPt: 56, \n    maxBikeDurationToPt: 56, \n    maxBssDurationToPt: 56, \n    maxCarDurationToPt: 56, \n    maxRidesharingDurationToPt: 56, \n    maxCarNoParkDurationToPt: 56, \n    maxTaxiDurationToPt: 56, \n    walkingSpeed: 3.4, \n    bikeSpeed: 3.4, \n    bssSpeed: 3.4, \n    carSpeed: 3.4, \n    ridesharingSpeed: 3.4, \n    carNoParkSpeed: 3.4, \n    taxiSpeed: 3.4, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    allowedId: [\"allowedId_example\"], \n    disruptionActive: true, \n    dataFreshness: \"dataFreshness_example\", \n    maxDuration: 56, \n    wheelchair: true, \n    travelerType: \"travelerType_example\", \n    directPath: \"indifferent\", \n    freeRadiusFrom: 56, \n    freeRadiusTo: 56, \n    directPathMode: [\"directPathMode_example\"], \n    partnerServices: [\"partnerServices_example\"], \n    additionalTimeAfterFirstSectionTaxi: 56, \n    additionalTimeBeforeLastSectionTaxi: 56, \n    count: 56, \n    isJourneySchedules: true, \n    minNbJourneys: 56, \n    maxNbJourneys: 56, \n    bssStands: true, \n    addPoiInfos: [\"addPoiInfos_example\"], \n    timeframeDuration: 56, \n    equipmentDetails: True, \n    maxTaxiDirectPathDuration: 56, \n    maxWalkingDirectPathDuration: 56, \n    maxCarNoParkDirectPathDuration: 56, \n    maxCarDirectPathDuration: 56, \n    maxRidesharingDirectPathDuration: 56, \n    maxBssDirectPathDuration: 56, \n    maxBikeDirectPathDuration: 56, \n    depth: 1, \n    maxWaitingDuration: 56\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineGroupsAPI/","title":"LineGroupsAPI","text":"Method HTTP request getCoverageLonLatLineGroups GET /coverage/{lon};{lat}/line_groups getCoverageLonLatLineGroupsId GET /coverage/{lon};{lat}/line_groups/{id} getCoverageLonLatUriLineGroups GET /coverage/{lon};{lat}/{uri}/line_groups getCoverageLonLatUriLineGroupsId GET /coverage/{lon};{lat}/{uri}/line_groups/{id} getCoverageRegionLineGroups GET /coverage/{region}/line_groups getCoverageRegionLineGroupsId GET /coverage/{region}/line_groups/{id} getCoverageRegionUriLineGroups GET /coverage/{region}/{uri}/line_groups getCoverageRegionUriLineGroupsId GET /coverage/{region}/{uri}/line_groups/{id} getLineGroups GET /line_groups"},{"location":"expert/ios/api/LineGroupsAPI/#getcoveragelonlatlinegroups","title":"getCoverageLonLatLineGroups","text":""},{"location":"expert/ios/api/LineGroupsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LineGroupsAPI/#return","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>Expert.shared.lineGroupsApi.getCoverageLonLatLineGroups(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineGroupsAPI/#getcoveragelonlatlinegroupsid","title":"getCoverageLonLatLineGroupsId","text":""},{"location":"expert/ios/api/LineGroupsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LineGroupsAPI/#return_1","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>Expert.shared.lineGroupsApi.getCoverageLonLatLineGroupsId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineGroupsAPI/#getcoveragelonlaturilinegroups","title":"getCoverageLonLatUriLineGroups","text":""},{"location":"expert/ios/api/LineGroupsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LineGroupsAPI/#return_2","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>Expert.shared.lineGroupsApi.getCoverageLonLatUriLineGroups(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineGroupsAPI/#getcoveragelonlaturilinegroupsid","title":"getCoverageLonLatUriLineGroupsId","text":""},{"location":"expert/ios/api/LineGroupsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LineGroupsAPI/#return_3","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>Expert.shared.lineGroupsApi.getCoverageLonLatUriLineGroupsId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineGroupsAPI/#getcoverageregionlinegroups","title":"getCoverageRegionLineGroups","text":""},{"location":"expert/ios/api/LineGroupsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LineGroupsAPI/#return_4","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>Expert.shared.lineGroupsApi.getCoverageRegionLineGroups(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineGroupsAPI/#getcoverageregionlinegroupsid","title":"getCoverageRegionLineGroupsId","text":""},{"location":"expert/ios/api/LineGroupsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LineGroupsAPI/#return_5","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>Expert.shared.lineGroupsApi.getCoverageRegionLineGroupsId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineGroupsAPI/#getcoverageregionurilinegroups","title":"getCoverageRegionUriLineGroups","text":""},{"location":"expert/ios/api/LineGroupsAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LineGroupsAPI/#return_6","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>Expert.shared.lineGroupsApi.getCoverageRegionUriLineGroups(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineGroupsAPI/#getcoverageregionurilinegroupsid","title":"getCoverageRegionUriLineGroupsId","text":""},{"location":"expert/ios/api/LineGroupsAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LineGroupsAPI/#return_7","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>Expert.shared.lineGroupsApi.getCoverageRegionUriLineGroupsId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineGroupsAPI/#getlinegroups","title":"getLineGroups","text":""},{"location":"expert/ios/api/LineGroupsAPI/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LineGroupsAPI/#return_8","title":"ReturnExample","text":"<p>LineGroups</p> <pre><code>Expert.shared.lineGroupsApi.getLineGroups(\n    externalCode: \"externalCode_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineReportsAPI/","title":"LineReportsAPI","text":"Method HTTP request getCoverageLonLatLineReports GET /coverage/{lon};{lat}/line_reports getCoverageLonLatUriLineReports GET /coverage/{lon};{lat}/{uri}/line_reports getCoverageRegionLineReports GET /coverage/{region}/line_reports getCoverageRegionUriLineReports GET /coverage/{region}/{uri}/line_reports"},{"location":"expert/ios/api/LineReportsAPI/#getcoveragelonlatlinereports","title":"getCoverageLonLatLineReports","text":""},{"location":"expert/ios/api/LineReportsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional] disableGeojson Bool remove geojson from the response [optional] since Date use disruptions valid after this date [optional] until Date use disruptions valid before this date [optional] filterStatus [String] filter_status uris [optional] [enum: past, active, future]"},{"location":"expert/ios/api/LineReportsAPI/#return","title":"ReturnExample","text":"<p>LineReports</p> <pre><code>Expert.shared.lineReportsApi.getCoverageLonLatLineReports(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 25, \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    disableGeojson: true, \n    since: Date(), \n    until: Date(), \n    filterStatus: [\"filterStatus_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineReportsAPI/#getcoveragelonlaturilinereports","title":"getCoverageLonLatUriLineReports","text":""},{"location":"expert/ios/api/LineReportsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional] disableGeojson Bool remove geojson from the response [optional] since Date use disruptions valid after this date [optional] until Date use disruptions valid before this date [optional] filterStatus [String] filter_status uris [optional] [enum: past, active, future]"},{"location":"expert/ios/api/LineReportsAPI/#return_1","title":"ReturnExample","text":"<p>LineReports</p> <pre><code>Expert.shared.lineReportsApi.getCoverageLonLatUriLineReports(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    depth: 1, \n    count: 25, \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    disableGeojson: true, \n    since: Date(), \n    until: Date(), \n    filterStatus: [\"filterStatus_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineReportsAPI/#getcoverageregionlinereports","title":"getCoverageRegionLineReports","text":""},{"location":"expert/ios/api/LineReportsAPI/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional] disableGeojson Bool remove geojson from the response [optional] since Date use disruptions valid after this date [optional] until Date use disruptions valid before this date [optional] filterStatus [String] filter_status uris [optional] [enum: past, active, future]"},{"location":"expert/ios/api/LineReportsAPI/#return_2","title":"ReturnExample","text":"<p>LineReports</p> <pre><code>Expert.shared.lineReportsApi.getCoverageRegionLineReports(\n    region: \"region_example\", \n    depth: 1, \n    count: 25, \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    disableGeojson: true, \n    since: Date(), \n    until: Date(), \n    filterStatus: [\"filterStatus_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LineReportsAPI/#getcoverageregionurilinereports","title":"getCoverageRegionUriLineReports","text":""},{"location":"expert/ios/api/LineReportsAPI/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional] disableGeojson Bool remove geojson from the response [optional] since Date use disruptions valid after this date [optional] until Date use disruptions valid before this date [optional] filterStatus [String] filter_status uris [optional] [enum: past, active, future]"},{"location":"expert/ios/api/LineReportsAPI/#return_3","title":"ReturnExample","text":"<p>LineReports</p> <pre><code>Expert.shared.lineReportsApi.getCoverageRegionUriLineReports(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    depth: 1, \n    count: 25, \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"], \n    disableGeojson: true, \n    since: Date(), \n    until: Date(), \n    filterStatus: [\"filterStatus_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LinesAPI/","title":"LinesAPI","text":"Method HTTP request getCoverageLonLatLines GET /coverage/{lon};{lat}/lines getCoverageLonLatLinesId GET /coverage/{lon};{lat}/lines/{id} getCoverageLonLatUriLines GET /coverage/{lon};{lat}/{uri}/lines getCoverageLonLatUriLinesId GET /coverage/{lon};{lat}/{uri}/lines/{id} getCoverageRegionLines GET /coverage/{region}/lines getCoverageRegionLinesId GET /coverage/{region}/lines/{id} getCoverageRegionUriLines GET /coverage/{region}/{uri}/lines getCoverageRegionUriLinesId GET /coverage/{region}/{uri}/lines/{id} getLines GET /lines"},{"location":"expert/ios/api/LinesAPI/#getcoveragelonlatlines","title":"getCoverageLonLatLines","text":""},{"location":"expert/ios/api/LinesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LinesAPI/#return","title":"ReturnExample","text":"<p>Lines</p> <pre><code>Expert.shared.linesApi.getCoverageLonLatLines(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LinesAPI/#getcoveragelonlatlinesid","title":"getCoverageLonLatLinesId","text":""},{"location":"expert/ios/api/LinesAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LinesAPI/#return_1","title":"ReturnExample","text":"<p>Lines</p> <pre><code>Expert.shared.linesApi.getCoverageLonLatLinesId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LinesAPI/#getcoveragelonlaturilines","title":"getCoverageLonLatUriLines","text":""},{"location":"expert/ios/api/LinesAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LinesAPI/#return_2","title":"ReturnExample","text":"<p>Lines</p> <pre><code>Expert.shared.linesApi.getCoverageLonLatUriLines(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LinesAPI/#getcoveragelonlaturilinesid","title":"getCoverageLonLatUriLinesId","text":""},{"location":"expert/ios/api/LinesAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LinesAPI/#return_3","title":"ReturnExample","text":"<p>Lines</p> <pre><code>Expert.shared.linesApi.getCoverageLonLatUriLinesId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LinesAPI/#getcoverageregionlines","title":"getCoverageRegionLines","text":""},{"location":"expert/ios/api/LinesAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LinesAPI/#return_4","title":"ReturnExample","text":"<p>Lines</p> <pre><code>Expert.shared.linesApi.getCoverageRegionLines(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LinesAPI/#getcoverageregionlinesid","title":"getCoverageRegionLinesId","text":""},{"location":"expert/ios/api/LinesAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LinesAPI/#return_5","title":"ReturnExample","text":"<p>Lines</p> <pre><code>Expert.shared.linesApi.getCoverageRegionLinesId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LinesAPI/#getcoverageregionurilines","title":"getCoverageRegionUriLines","text":""},{"location":"expert/ios/api/LinesAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LinesAPI/#return_6","title":"ReturnExample","text":"<p>Lines</p> <pre><code>Expert.shared.linesApi.getCoverageRegionUriLines(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LinesAPI/#getcoverageregionurilinesid","title":"getCoverageRegionUriLinesId","text":""},{"location":"expert/ios/api/LinesAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LinesAPI/#return_7","title":"ReturnExample","text":"<p>Lines</p> <pre><code>Expert.shared.linesApi.getCoverageRegionUriLinesId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/LinesAPI/#getlines","title":"getLines","text":""},{"location":"expert/ios/api/LinesAPI/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/LinesAPI/#return_8","title":"ReturnExample","text":"<p>Lines</p> <pre><code>Expert.shared.linesApi.getLines(\n    externalCode: \"externalCode_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NetworksAPI/","title":"NetworksAPI","text":"Method HTTP request getCoverageLonLatNetworks GET /coverage/{lon};{lat}/networks getCoverageLonLatNetworksId GET /coverage/{lon};{lat}/networks/{id} getCoverageLonLatUriNetworks GET /coverage/{lon};{lat}/{uri}/networks getCoverageLonLatUriNetworksId GET /coverage/{lon};{lat}/{uri}/networks/{id} getCoverageRegionNetworks GET /coverage/{region}/networks getCoverageRegionNetworksId GET /coverage/{region}/networks/{id} getCoverageRegionUriNetworks GET /coverage/{region}/{uri}/networks getCoverageRegionUriNetworksId GET /coverage/{region}/{uri}/networks/{id} getNetworks GET /networks"},{"location":"expert/ios/api/NetworksAPI/#getcoveragelonlatnetworks","title":"getCoverageLonLatNetworks","text":""},{"location":"expert/ios/api/NetworksAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/NetworksAPI/#return","title":"ReturnExample","text":"<p>Networks</p> <pre><code>Expert.shared.networksApi.getCoverageLonLatNetworks(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NetworksAPI/#getcoveragelonlatnetworksid","title":"getCoverageLonLatNetworksId","text":""},{"location":"expert/ios/api/NetworksAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/NetworksAPI/#return_1","title":"ReturnExample","text":"<p>Networks</p> <pre><code>Expert.shared.networksApi.getCoverageLonLatNetworksId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NetworksAPI/#getcoveragelonlaturinetworks","title":"getCoverageLonLatUriNetworks","text":""},{"location":"expert/ios/api/NetworksAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/NetworksAPI/#return_2","title":"ReturnExample","text":"<p>Networks</p> <pre><code>Expert.shared.networksApi.getCoverageLonLatUriNetworks(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NetworksAPI/#getcoveragelonlaturinetworksid","title":"getCoverageLonLatUriNetworksId","text":""},{"location":"expert/ios/api/NetworksAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/NetworksAPI/#return_3","title":"ReturnExample","text":"<p>Networks</p> <pre><code>Expert.shared.networksApi.getCoverageLonLatUriNetworksId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NetworksAPI/#getcoverageregionnetworks","title":"getCoverageRegionNetworks","text":""},{"location":"expert/ios/api/NetworksAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/NetworksAPI/#return_4","title":"ReturnExample","text":"<p>Networks</p> <pre><code>Expert.shared.networksApi.getCoverageRegionNetworks(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NetworksAPI/#getcoverageregionnetworksid","title":"getCoverageRegionNetworksId","text":""},{"location":"expert/ios/api/NetworksAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/NetworksAPI/#return_5","title":"ReturnExample","text":"<p>Networks</p> <pre><code>Expert.shared.networksApi.getCoverageRegionNetworksId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NetworksAPI/#getcoverageregionurinetworks","title":"getCoverageRegionUriNetworks","text":""},{"location":"expert/ios/api/NetworksAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/NetworksAPI/#return_6","title":"ReturnExample","text":"<p>Networks</p> <pre><code>Expert.shared.networksApi.getCoverageRegionUriNetworks(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NetworksAPI/#getcoverageregionurinetworksid","title":"getCoverageRegionUriNetworksId","text":""},{"location":"expert/ios/api/NetworksAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/NetworksAPI/#return_7","title":"ReturnExample","text":"<p>Networks</p> <pre><code>Expert.shared.networksApi.getCoverageRegionUriNetworksId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NetworksAPI/#getnetworks","title":"getNetworks","text":""},{"location":"expert/ios/api/NetworksAPI/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/NetworksAPI/#return_8","title":"ReturnExample","text":"<p>Networks</p> <pre><code>Expert.shared.networksApi.getNetworks(\n    externalCode: \"externalCode_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NextArrivalsAPI/","title":"NextArrivalsAPI","text":"Method HTTP request getCoverageLonLatArrivals GET /coverage/{lon};{lat}/arrivals getCoverageLonLatUriArrivals GET /coverage/{lon};{lat}/{uri}/arrivals getCoverageRegionArrivals GET /coverage/{region}/arrivals getCoverageRegionUriArrivals GET /coverage/{region}/{uri}/arrivals"},{"location":"expert/ios/api/NextArrivalsAPI/#getcoveragelonlatarrivals","title":"getCoverageLonLatArrivals","text":""},{"location":"expert/ios/api/NextArrivalsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/NextArrivalsAPI/#return","title":"ReturnExample","text":"<p>Arrivals</p> <pre><code>Expert.shared.nextArrivalsApi.getCoverageLonLatArrivals(\n    lat: 3.4, \n    lon: 3.4, \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NextArrivalsAPI/#getcoveragelonlaturiarrivals","title":"getCoverageLonLatUriArrivals","text":""},{"location":"expert/ios/api/NextArrivalsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/NextArrivalsAPI/#return_1","title":"ReturnExample","text":"<p>Arrivals</p> <pre><code>Expert.shared.nextArrivalsApi.getCoverageLonLatUriArrivals(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NextArrivalsAPI/#getcoverageregionarrivals","title":"getCoverageRegionArrivals","text":""},{"location":"expert/ios/api/NextArrivalsAPI/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/NextArrivalsAPI/#return_2","title":"ReturnExample","text":"<p>Arrivals</p> <pre><code>Expert.shared.nextArrivalsApi.getCoverageRegionArrivals(\n    region: \"region_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NextArrivalsAPI/#getcoverageregionuriarrivals","title":"getCoverageRegionUriArrivals","text":""},{"location":"expert/ios/api/NextArrivalsAPI/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/NextArrivalsAPI/#return_3","title":"ReturnExample","text":"<p>Arrivals</p> <pre><code>Expert.shared.nextArrivalsApi.getCoverageRegionUriArrivals(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NextDeparturesAPI/","title":"NextDeparturesAPI","text":"Method HTTP request getCoverageLonLatDepartures GET /coverage/{lon};{lat}/departures getCoverageLonLatUriDepartures GET /coverage/{lon};{lat}/{uri}/departures getCoverageRegionDepartures GET /coverage/{region}/departures getCoverageRegionUriDepartures GET /coverage/{region}/{uri}/departures"},{"location":"expert/ios/api/NextDeparturesAPI/#getcoveragelonlatdepartures","title":"getCoverageLonLatDepartures","text":""},{"location":"expert/ios/api/NextDeparturesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/NextDeparturesAPI/#return","title":"ReturnExample","text":"<p>Departures</p> <pre><code>Expert.shared.nextDeparturesApi.getCoverageLonLatDepartures(\n    lat: 3.4, \n    lon: 3.4, \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NextDeparturesAPI/#getcoveragelonlaturidepartures","title":"getCoverageLonLatUriDepartures","text":""},{"location":"expert/ios/api/NextDeparturesAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/NextDeparturesAPI/#return_1","title":"ReturnExample","text":"<p>Departures</p> <pre><code>Expert.shared.nextDeparturesApi.getCoverageLonLatUriDepartures(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NextDeparturesAPI/#getcoverageregiondepartures","title":"getCoverageRegionDepartures","text":""},{"location":"expert/ios/api/NextDeparturesAPI/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/NextDeparturesAPI/#return_2","title":"ReturnExample","text":"<p>Departures</p> <pre><code>Expert.shared.nextDeparturesApi.getCoverageRegionDepartures(\n    region: \"region_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/NextDeparturesAPI/#getcoverageregionuridepartures","title":"getCoverageRegionUriDepartures","text":""},{"location":"expert/ios/api/NextDeparturesAPI/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/NextDeparturesAPI/#return_3","title":"ReturnExample","text":"<p>Departures</p> <pre><code>Expert.shared.nextDeparturesApi.getCoverageRegionUriDepartures(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PhysicalModesAPI/","title":"PhysicalModesAPI","text":"Method HTTP request getCoverageLonLatPhysicalModes GET /coverage/{lon};{lat}/physical_modes getCoverageLonLatPhysicalModesId GET /coverage/{lon};{lat}/physical_modes/{id} getCoverageLonLatUriPhysicalModes GET /coverage/{lon};{lat}/{uri}/physical_modes getCoverageLonLatUriPhysicalModesId GET /coverage/{lon};{lat}/{uri}/physical_modes/{id} getCoverageRegionPhysicalModes GET /coverage/{region}/physical_modes getCoverageRegionPhysicalModesId GET /coverage/{region}/physical_modes/{id} getCoverageRegionUriPhysicalModes GET /coverage/{region}/{uri}/physical_modes getCoverageRegionUriPhysicalModesId GET /coverage/{region}/{uri}/physical_modes/{id}"},{"location":"expert/ios/api/PhysicalModesAPI/#getcoveragelonlatphysicalmodes","title":"getCoverageLonLatPhysicalModes","text":""},{"location":"expert/ios/api/PhysicalModesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PhysicalModesAPI/#return","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>Expert.shared.physicalModesApi.getCoverageLonLatPhysicalModes(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PhysicalModesAPI/#getcoveragelonlatphysicalmodesid","title":"getCoverageLonLatPhysicalModesId","text":""},{"location":"expert/ios/api/PhysicalModesAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PhysicalModesAPI/#return_1","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>Expert.shared.physicalModesApi.getCoverageLonLatPhysicalModesId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PhysicalModesAPI/#getcoveragelonlaturiphysicalmodes","title":"getCoverageLonLatUriPhysicalModes","text":""},{"location":"expert/ios/api/PhysicalModesAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PhysicalModesAPI/#return_2","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>Expert.shared.physicalModesApi.getCoverageLonLatUriPhysicalModes(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PhysicalModesAPI/#getcoveragelonlaturiphysicalmodesid","title":"getCoverageLonLatUriPhysicalModesId","text":""},{"location":"expert/ios/api/PhysicalModesAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PhysicalModesAPI/#return_3","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>Expert.shared.physicalModesApi.getCoverageLonLatUriPhysicalModesId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PhysicalModesAPI/#getcoverageregionphysicalmodes","title":"getCoverageRegionPhysicalModes","text":""},{"location":"expert/ios/api/PhysicalModesAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PhysicalModesAPI/#return_4","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>Expert.shared.physicalModesApi.getCoverageRegionPhysicalModes(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PhysicalModesAPI/#getcoverageregionphysicalmodesid","title":"getCoverageRegionPhysicalModesId","text":""},{"location":"expert/ios/api/PhysicalModesAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PhysicalModesAPI/#return_5","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>Expert.shared.physicalModesApi.getCoverageRegionPhysicalModesId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PhysicalModesAPI/#getcoverageregionuriphysicalmodes","title":"getCoverageRegionUriPhysicalModes","text":""},{"location":"expert/ios/api/PhysicalModesAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PhysicalModesAPI/#return_6","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>Expert.shared.physicalModesApi.getCoverageRegionUriPhysicalModes(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PhysicalModesAPI/#getcoverageregionuriphysicalmodesid","title":"getCoverageRegionUriPhysicalModesId","text":""},{"location":"expert/ios/api/PhysicalModesAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PhysicalModesAPI/#return_7","title":"ReturnExample","text":"<p>PhysicalModes</p> <pre><code>Expert.shared.physicalModesApi.getCoverageRegionUriPhysicalModesId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlaceUriAPI/","title":"PlaceUriAPI","text":"Method HTTP request getCoverageLonLatPlacesId GET /coverage/{lon};{lat}/places/{id} getCoverageRegionPlacesId GET /coverage/{region}/places/{id} getPlacesId GET /places/{id}"},{"location":"expert/ios/api/PlaceUriAPI/#getcoveragelonlatplacesid","title":"getCoverageLonLatPlacesId","text":""},{"location":"expert/ios/api/PlaceUriAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional]"},{"location":"expert/ios/api/PlaceUriAPI/#return","title":"ReturnExample","text":"<p>Places</p> <pre><code>Expert.shared.placeUriApi.getCoverageLonLatPlacesId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"], \n    disableGeojson: true, \n    disableDisruption: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlaceUriAPI/#getcoverageregionplacesid","title":"getCoverageRegionPlacesId","text":""},{"location":"expert/ios/api/PlaceUriAPI/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional]"},{"location":"expert/ios/api/PlaceUriAPI/#return_1","title":"ReturnExample","text":"<p>Places</p> <pre><code>Expert.shared.placeUriApi.getCoverageRegionPlacesId(\n    region: \"region_example\", \n    id: \"id_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"], \n    disableGeojson: true, \n    disableDisruption: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlaceUriAPI/#getplacesid","title":"getPlacesId","text":""},{"location":"expert/ios/api/PlaceUriAPI/#parameters_2","title":"Parameters","text":"Name Type Note id String Id of the object you want to query bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional]"},{"location":"expert/ios/api/PlaceUriAPI/#return_2","title":"ReturnExample","text":"<p>Places</p> <pre><code>Expert.shared.placeUriApi.getPlacesId(\n    id: \"id_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"], \n    disableGeojson: true, \n    disableDisruption: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlacesAPI/","title":"PlacesAPI","text":"Method HTTP request getCoverageLonLatPlaces GET /coverage/{lon};{lat}/places getCoverageRegionPlaces GET /coverage/{region}/places getPlaces GET /places"},{"location":"expert/ios/api/PlacesAPI/#getcoveragelonlatplaces","title":"getCoverageLonLatPlaces","text":""},{"location":"expert/ios/api/PlacesAPI/#parameters","title":"Parameters","text":"Name Type Note q String The data to search lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query type [String] The type of data to search [optional] [default to [u'stop_area', u'address', u'poi', u'administrative_region']] [enum: stop_point, poi, administrative_region, stop_area, address] count Int The maximum number of places returned [optional] [default to 10] adminUri [String] If filled, will restrain the search within the given admin uris [optional] depth Int The depth of objects [optional] [default to 1] disableGeojson Bool remove geojson from the response [optional] from String Coordinates longitude;latitude used to prioritize the objects around this coordinate [optional] shape String Geographical shape to limit the search. [optional] shapeScope [String] The scope shape on data to search [optional] [enum: admin, street, addr, poi, stop] placesProximityRadius Float Radius used to prioritize the objects around coordinate from [optional]"},{"location":"expert/ios/api/PlacesAPI/#return","title":"ReturnExample","text":"<p>Places</p> <pre><code>Expert.shared.placesApi.getCoverageLonLatPlaces(\n    q: \"q_example\", \n    lat: 3.4, \n    lon: 3.4, \n    type: [\"[u'stop_area', u'address', u'poi', u'administrative_region']\"], \n    count: 10, \n    adminUri: [\"adminUri_example\"], \n    depth: 1, \n    disableGeojson: true, \n    from: \"from_example\", \n    shape: \"shape_example\", \n    shapeScope: [\"shapeScope_example\"], \n    placesProximityRadius: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlacesAPI/#getcoverageregionplaces","title":"getCoverageRegionPlaces","text":""},{"location":"expert/ios/api/PlacesAPI/#parameters_1","title":"Parameters","text":"Name Type Note q String The data to search region String The region you want to query type [String] The type of data to search [optional] [default to [u'stop_area', u'address', u'poi', u'administrative_region']] [enum: stop_point, poi, administrative_region, stop_area, address] count Int The maximum number of places returned [optional] [default to 10] adminUri [String] If filled, will restrain the search within the given admin uris [optional] depth Int The depth of objects [optional] [default to 1] disableGeojson Bool remove geojson from the response [optional] from String Coordinates longitude;latitude used to prioritize the objects around this coordinate [optional] shape String Geographical shape to limit the search. [optional] shapeScope [String] The scope shape on data to search [optional] [enum: admin, street, addr, poi, stop] placesProximityRadius Float Radius used to prioritize the objects around coordinate from [optional]"},{"location":"expert/ios/api/PlacesAPI/#return_1","title":"ReturnExample","text":"<p>Places</p> <pre><code>Expert.shared.placesApi.getCoverageRegionPlaces(\n    q: \"q_example\", \n    region: \"region_example\", \n    type: [\"[u'stop_area', u'address', u'poi', u'administrative_region']\"], \n    count: 10, \n    adminUri: [\"adminUri_example\"], \n    depth: 1, \n    disableGeojson: true, \n    from: \"from_example\", \n    shape: \"shape_example\", \n    shapeScope: [\"shapeScope_example\"], \n    placesProximityRadius: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlacesAPI/#getplaces","title":"getPlaces","text":""},{"location":"expert/ios/api/PlacesAPI/#parameters_2","title":"Parameters","text":"Name Type Note q String The data to search type [String] The type of data to search [optional] [default to [u'stop_area', u'address', u'poi', u'administrative_region']] [enum: stop_point, poi, administrative_region, stop_area, address] count Int The maximum number of places returned [optional] [default to 10] adminUri [String] If filled, will restrain the search within the given admin uris [optional] depth Int The depth of objects [optional] [default to 1] disableGeojson Bool remove geojson from the response [optional] from String Coordinates longitude;latitude used to prioritize the objects around this coordinate [optional] shape String Geographical shape to limit the search. [optional] shapeScope [String] The scope shape on data to search [optional] [enum: admin, street, addr, poi, stop] placesProximityRadius Float Radius used to prioritize the objects around coordinate from [optional]"},{"location":"expert/ios/api/PlacesAPI/#return_2","title":"ReturnExample","text":"<p>Places</p> <pre><code>Expert.shared.placesApi.getPlaces(\n    q: \"q_example\", \n    type: [\"[u'stop_area', u'address', u'poi', u'administrative_region']\"], \n    count: 10, \n    adminUri: [\"adminUri_example\"], \n    depth: 1, \n    disableGeojson: true, \n    from: \"from_example\", \n    shape: \"shape_example\", \n    shapeScope: [\"shapeScope_example\"], \n    placesProximityRadius: 3.4\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlacesNearbyAPI/","title":"PlacesNearbyAPI","text":"Method HTTP request getCoordLonLatPlacesNearby GET /coord/{lon};{lat}/places_nearby getCoordsLonLatPlacesNearby GET /coords/{lon};{lat}/places_nearby getCoverageLonLatPlacesNearby GET /coverage/{lon};{lat}/places_nearby getCoverageLonLatUriPlacesNearby GET /coverage/{lon};{lat}/{uri}/places_nearby getCoverageRegionPlacesNearby GET /coverage/{region}/places_nearby getCoverageRegionUriPlacesNearby GET /coverage/{region}/{uri}/places_nearby"},{"location":"expert/ios/api/PlacesNearbyAPI/#getcoordlonlatplacesnearby","title":"getCoordLonLatPlacesNearby","text":""},{"location":"expert/ios/api/PlacesNearbyAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query type [String] Type of the objects to return [optional] [default to [u'stop_area', u'stop_point', u'poi']] [enum: stop_point, poi, administrative_region, stop_area, address] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional]"},{"location":"expert/ios/api/PlacesNearbyAPI/#return","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>Expert.shared.placesNearbyApi.getCoordLonLatPlacesNearby(\n    lat: 3.4, \n    lon: 3.4, \n    type: [\"[u'stop_area', u'stop_point', u'poi']\"], \n    filter: \"filter_example\", \n    distance: 500, \n    count: 10, \n    depth: 1, \n    startPage: 56, \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"], \n    disableGeojson: true, \n    disableDisruption: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlacesNearbyAPI/#getcoordslonlatplacesnearby","title":"getCoordsLonLatPlacesNearby","text":""},{"location":"expert/ios/api/PlacesNearbyAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query type [String] Type of the objects to return [optional] [default to [u'stop_area', u'stop_point', u'poi']] [enum: stop_point, poi, administrative_region, stop_area, address] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional]"},{"location":"expert/ios/api/PlacesNearbyAPI/#return_1","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>Expert.shared.placesNearbyApi.getCoordsLonLatPlacesNearby(\n    lat: 3.4, \n    lon: 3.4, \n    type: [\"[u'stop_area', u'stop_point', u'poi']\"], \n    filter: \"filter_example\", \n    distance: 500, \n    count: 10, \n    depth: 1, \n    startPage: 56, \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"], \n    disableGeojson: true, \n    disableDisruption: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlacesNearbyAPI/#getcoveragelonlatplacesnearby","title":"getCoverageLonLatPlacesNearby","text":""},{"location":"expert/ios/api/PlacesNearbyAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query type [String] Type of the objects to return [optional] [default to [u'stop_area', u'stop_point', u'poi']] [enum: stop_point, poi, administrative_region, stop_area, address] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional]"},{"location":"expert/ios/api/PlacesNearbyAPI/#return_2","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>Expert.shared.placesNearbyApi.getCoverageLonLatPlacesNearby(\n    lat: 3.4, \n    lon: 3.4, \n    type: [\"[u'stop_area', u'stop_point', u'poi']\"], \n    filter: \"filter_example\", \n    distance: 500, \n    count: 10, \n    depth: 1, \n    startPage: 56, \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"], \n    disableGeojson: true, \n    disableDisruption: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlacesNearbyAPI/#getcoveragelonlaturiplacesnearby","title":"getCoverageLonLatUriPlacesNearby","text":""},{"location":"expert/ios/api/PlacesNearbyAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri type [String] Type of the objects to return [optional] [default to [u'stop_area', u'stop_point', u'poi']] [enum: stop_point, poi, administrative_region, stop_area, address] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional]"},{"location":"expert/ios/api/PlacesNearbyAPI/#return_3","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>Expert.shared.placesNearbyApi.getCoverageLonLatUriPlacesNearby(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    type: [\"[u'stop_area', u'stop_point', u'poi']\"], \n    filter: \"filter_example\", \n    distance: 500, \n    count: 10, \n    depth: 1, \n    startPage: 56, \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"], \n    disableGeojson: true, \n    disableDisruption: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlacesNearbyAPI/#getcoverageregionplacesnearby","title":"getCoverageRegionPlacesNearby","text":""},{"location":"expert/ios/api/PlacesNearbyAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query type [String] Type of the objects to return [optional] [default to [u'stop_area', u'stop_point', u'poi']] [enum: stop_point, poi, administrative_region, stop_area, address] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional]"},{"location":"expert/ios/api/PlacesNearbyAPI/#return_4","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>Expert.shared.placesNearbyApi.getCoverageRegionPlacesNearby(\n    region: \"region_example\", \n    type: [\"[u'stop_area', u'stop_point', u'poi']\"], \n    filter: \"filter_example\", \n    distance: 500, \n    count: 10, \n    depth: 1, \n    startPage: 56, \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"], \n    disableGeojson: true, \n    disableDisruption: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PlacesNearbyAPI/#getcoverageregionuriplacesnearby","title":"getCoverageRegionUriPlacesNearby","text":""},{"location":"expert/ios/api/PlacesNearbyAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri type [String] Type of the objects to return [optional] [default to [u'stop_area', u'stop_point', u'poi']] [enum: stop_point, poi, administrative_region, stop_area, address] filter String Filter your objects [optional] distance Int Distance range of the query in meters [optional] [default to 500] count Int Elements per page [optional] [default to 10] depth Int Maximum depth on objects [optional] [default to 1] startPage Int The page number of the ptref result [optional] bssStands Bool DEPRECATED, Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional]"},{"location":"expert/ios/api/PlacesNearbyAPI/#return_5","title":"ReturnExample","text":"<p>PlacesNearby</p> <pre><code>Expert.shared.placesNearbyApi.getCoverageRegionUriPlacesNearby(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    type: [\"[u'stop_area', u'stop_point', u'poi']\"], \n    filter: \"filter_example\", \n    distance: 500, \n    count: 10, \n    depth: 1, \n    startPage: 56, \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"], \n    disableGeojson: true, \n    disableDisruption: true\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoiTypesAPI/","title":"PoiTypesAPI","text":"Method HTTP request getCoverageLonLatPoiTypes GET /coverage/{lon};{lat}/poi_types getCoverageLonLatPoiTypesId GET /coverage/{lon};{lat}/poi_types/{id} getCoverageLonLatUriPoiTypes GET /coverage/{lon};{lat}/{uri}/poi_types getCoverageLonLatUriPoiTypesId GET /coverage/{lon};{lat}/{uri}/poi_types/{id} getCoverageRegionPoiTypes GET /coverage/{region}/poi_types getCoverageRegionPoiTypesId GET /coverage/{region}/poi_types/{id} getCoverageRegionUriPoiTypes GET /coverage/{region}/{uri}/poi_types getCoverageRegionUriPoiTypesId GET /coverage/{region}/{uri}/poi_types/{id}"},{"location":"expert/ios/api/PoiTypesAPI/#getcoveragelonlatpoitypes","title":"getCoverageLonLatPoiTypes","text":""},{"location":"expert/ios/api/PoiTypesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PoiTypesAPI/#return","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>Expert.shared.poiTypesApi.getCoverageLonLatPoiTypes(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoiTypesAPI/#getcoveragelonlatpoitypesid","title":"getCoverageLonLatPoiTypesId","text":""},{"location":"expert/ios/api/PoiTypesAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PoiTypesAPI/#return_1","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>Expert.shared.poiTypesApi.getCoverageLonLatPoiTypesId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoiTypesAPI/#getcoveragelonlaturipoitypes","title":"getCoverageLonLatUriPoiTypes","text":""},{"location":"expert/ios/api/PoiTypesAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PoiTypesAPI/#return_2","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>Expert.shared.poiTypesApi.getCoverageLonLatUriPoiTypes(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoiTypesAPI/#getcoveragelonlaturipoitypesid","title":"getCoverageLonLatUriPoiTypesId","text":""},{"location":"expert/ios/api/PoiTypesAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PoiTypesAPI/#return_3","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>Expert.shared.poiTypesApi.getCoverageLonLatUriPoiTypesId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoiTypesAPI/#getcoverageregionpoitypes","title":"getCoverageRegionPoiTypes","text":""},{"location":"expert/ios/api/PoiTypesAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PoiTypesAPI/#return_4","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>Expert.shared.poiTypesApi.getCoverageRegionPoiTypes(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoiTypesAPI/#getcoverageregionpoitypesid","title":"getCoverageRegionPoiTypesId","text":""},{"location":"expert/ios/api/PoiTypesAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PoiTypesAPI/#return_5","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>Expert.shared.poiTypesApi.getCoverageRegionPoiTypesId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoiTypesAPI/#getcoverageregionuripoitypes","title":"getCoverageRegionUriPoiTypes","text":""},{"location":"expert/ios/api/PoiTypesAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PoiTypesAPI/#return_6","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>Expert.shared.poiTypesApi.getCoverageRegionUriPoiTypes(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoiTypesAPI/#getcoverageregionuripoitypesid","title":"getCoverageRegionUriPoiTypesId","text":""},{"location":"expert/ios/api/PoiTypesAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/PoiTypesAPI/#return_7","title":"ReturnExample","text":"<p>PoiTypes</p> <pre><code>Expert.shared.poiTypesApi.getCoverageRegionUriPoiTypesId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoisAPI/","title":"PoisAPI","text":"Method HTTP request getCoverageLonLatPois GET /coverage/{lon};{lat}/pois getCoverageLonLatPoisId GET /coverage/{lon};{lat}/pois/{id} getCoverageLonLatUriPois GET /coverage/{lon};{lat}/{uri}/pois getCoverageLonLatUriPoisId GET /coverage/{lon};{lat}/{uri}/pois/{id} getCoverageRegionPois GET /coverage/{region}/pois getCoverageRegionPoisId GET /coverage/{region}/pois/{id} getCoverageRegionUriPois GET /coverage/{region}/{uri}/pois getCoverageRegionUriPoisId GET /coverage/{region}/{uri}/pois/{id}"},{"location":"expert/ios/api/PoisAPI/#getcoveragelonlatpois","title":"getCoverageLonLatPois","text":""},{"location":"expert/ios/api/PoisAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional] bssStands Bool Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/ios/api/PoisAPI/#return","title":"ReturnExample","text":"<p>Pois</p> <pre><code>Expert.shared.poisApi.getCoverageLonLatPois(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoisAPI/#getcoveragelonlatpoisid","title":"getCoverageLonLatPoisId","text":""},{"location":"expert/ios/api/PoisAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional] bssStands Bool Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/ios/api/PoisAPI/#return_1","title":"ReturnExample","text":"<p>Pois</p> <pre><code>Expert.shared.poisApi.getCoverageLonLatPoisId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoisAPI/#getcoveragelonlaturipois","title":"getCoverageLonLatUriPois","text":""},{"location":"expert/ios/api/PoisAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional] bssStands Bool Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/ios/api/PoisAPI/#return_2","title":"ReturnExample","text":"<p>Pois</p> <pre><code>Expert.shared.poisApi.getCoverageLonLatUriPois(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoisAPI/#getcoveragelonlaturipoisid","title":"getCoverageLonLatUriPoisId","text":""},{"location":"expert/ios/api/PoisAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional] bssStands Bool Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/ios/api/PoisAPI/#return_3","title":"ReturnExample","text":"<p>Pois</p> <pre><code>Expert.shared.poisApi.getCoverageLonLatUriPoisId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoisAPI/#getcoverageregionpois","title":"getCoverageRegionPois","text":""},{"location":"expert/ios/api/PoisAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional] bssStands Bool Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/ios/api/PoisAPI/#return_4","title":"ReturnExample","text":"<p>Pois</p> <pre><code>Expert.shared.poisApi.getCoverageRegionPois(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoisAPI/#getcoverageregionpoisid","title":"getCoverageRegionPoisId","text":""},{"location":"expert/ios/api/PoisAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional] bssStands Bool Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/ios/api/PoisAPI/#return_5","title":"ReturnExample","text":"<p>Pois</p> <pre><code>Expert.shared.poisApi.getCoverageRegionPoisId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoisAPI/#getcoverageregionuripois","title":"getCoverageRegionUriPois","text":""},{"location":"expert/ios/api/PoisAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional] bssStands Bool Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/ios/api/PoisAPI/#return_6","title":"ReturnExample","text":"<p>Pois</p> <pre><code>Expert.shared.poisApi.getCoverageRegionUriPois(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PoisAPI/#getcoverageregionuripoisid","title":"getCoverageRegionUriPoisId","text":""},{"location":"expert/ios/api/PoisAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional] bssStands Bool Deprecated - Use add_poi_infos[]=bss_stands [optional] addPoiInfos [String] Show more information about the poi if it's available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response [optional] [default to [u'bss_stands', u'car_park']] [enum: bss_stands, car_park, , none]"},{"location":"expert/ios/api/PoisAPI/#return_7","title":"ReturnExample","text":"<p>Pois</p> <pre><code>Expert.shared.poisApi.getCoverageRegionUriPoisId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\", \n    bssStands: true, \n    addPoiInfos: [\"[u'bss_stands', u'car_park']\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PtobjectsAPI/","title":"PtobjectsAPI","text":"Method HTTP request getCoverageLonLatPtObjects GET /coverage/{lon};{lat}/pt_objects getCoverageRegionPtObjects GET /coverage/{region}/pt_objects"},{"location":"expert/ios/api/PtobjectsAPI/#getcoveragelonlatptobjects","title":"getCoverageLonLatPtObjects","text":""},{"location":"expert/ios/api/PtobjectsAPI/#parameters","title":"Parameters","text":"Name Type Note q String The data to search lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query type [String] The type of data to search [optional] [default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area']] [enum: network, commercial_mode, line, line_group, route, stop_area, stop_point] count Int The maximum number of ptobjects returned [optional] [default to 10] adminUri [String] If filled, will restrain the search within the given admin uris [optional] depth Int The depth of objects [optional] [default to 1] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String Filter your objects [optional]"},{"location":"expert/ios/api/PtobjectsAPI/#return","title":"ReturnExample","text":"<p>PtObjects</p> <pre><code>Expert.shared.ptobjectsApi.getCoverageLonLatPtObjects(\n    q: \"q_example\", \n    lat: 3.4, \n    lon: 3.4, \n    type: [\"[u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area']\"], \n    count: 10, \n    adminUri: [\"adminUri_example\"], \n    depth: 1, \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/PtobjectsAPI/#getcoverageregionptobjects","title":"getCoverageRegionPtObjects","text":""},{"location":"expert/ios/api/PtobjectsAPI/#parameters_1","title":"Parameters","text":"Name Type Note q String The data to search region String The region you want to query type [String] The type of data to search [optional] [default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area']] [enum: network, commercial_mode, line, line_group, route, stop_area, stop_point] count Int The maximum number of ptobjects returned [optional] [default to 10] adminUri [String] If filled, will restrain the search within the given admin uris [optional] depth Int The depth of objects [optional] [default to 1] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String Filter your objects [optional]"},{"location":"expert/ios/api/PtobjectsAPI/#return_1","title":"ReturnExample","text":"<p>PtObjects</p> <pre><code>Expert.shared.ptobjectsApi.getCoverageRegionPtObjects(\n    q: \"q_example\", \n    region: \"region_example\", \n    type: [\"[u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area']\"], \n    count: 10, \n    adminUri: [\"adminUri_example\"], \n    depth: 1, \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RouteSchedulesAPI/","title":"RouteSchedulesAPI","text":"Method HTTP request getCoverageLonLatUriRouteSchedules GET /coverage/{lon};{lat}/{uri}/route_schedules getCoverageRegionUriRouteSchedules GET /coverage/{region}/{uri}/route_schedules getRouteSchedules GET /route_schedules"},{"location":"expert/ios/api/RouteSchedulesAPI/#getcoveragelonlaturirouteschedules","title":"getCoverageLonLatUriRouteSchedules","text":""},{"location":"expert/ios/api/RouteSchedulesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/RouteSchedulesAPI/#return","title":"ReturnExample","text":"<p>RouteSchedules</p> <pre><code>Expert.shared.routeSchedulesApi.getCoverageLonLatUriRouteSchedules(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RouteSchedulesAPI/#getcoverageregionurirouteschedules","title":"getCoverageRegionUriRouteSchedules","text":""},{"location":"expert/ios/api/RouteSchedulesAPI/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/RouteSchedulesAPI/#return_1","title":"ReturnExample","text":"<p>RouteSchedules</p> <pre><code>Expert.shared.routeSchedulesApi.getCoverageRegionUriRouteSchedules(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RouteSchedulesAPI/#getrouteschedules","title":"getRouteSchedules","text":""},{"location":"expert/ios/api/RouteSchedulesAPI/#parameters_2","title":"Parameters","text":"Name Type Note filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/RouteSchedulesAPI/#return_2","title":"ReturnExample","text":"<p>RouteSchedules</p> <pre><code>Expert.shared.routeSchedulesApi.getRouteSchedules(\n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RoutesAPI/","title":"RoutesAPI","text":"Method HTTP request getCoverageLonLatRoutes GET /coverage/{lon};{lat}/routes getCoverageLonLatRoutesId GET /coverage/{lon};{lat}/routes/{id} getCoverageLonLatUriRoutes GET /coverage/{lon};{lat}/{uri}/routes getCoverageLonLatUriRoutesId GET /coverage/{lon};{lat}/{uri}/routes/{id} getCoverageRegionRoutes GET /coverage/{region}/routes getCoverageRegionRoutesId GET /coverage/{region}/routes/{id} getCoverageRegionUriRoutes GET /coverage/{region}/{uri}/routes getCoverageRegionUriRoutesId GET /coverage/{region}/{uri}/routes/{id} getRoutes GET /routes"},{"location":"expert/ios/api/RoutesAPI/#getcoveragelonlatroutes","title":"getCoverageLonLatRoutes","text":""},{"location":"expert/ios/api/RoutesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/RoutesAPI/#return","title":"ReturnExample","text":"<p>Routes</p> <pre><code>Expert.shared.routesApi.getCoverageLonLatRoutes(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RoutesAPI/#getcoveragelonlatroutesid","title":"getCoverageLonLatRoutesId","text":""},{"location":"expert/ios/api/RoutesAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/RoutesAPI/#return_1","title":"ReturnExample","text":"<p>Routes</p> <pre><code>Expert.shared.routesApi.getCoverageLonLatRoutesId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RoutesAPI/#getcoveragelonlaturiroutes","title":"getCoverageLonLatUriRoutes","text":""},{"location":"expert/ios/api/RoutesAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/RoutesAPI/#return_2","title":"ReturnExample","text":"<p>Routes</p> <pre><code>Expert.shared.routesApi.getCoverageLonLatUriRoutes(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RoutesAPI/#getcoveragelonlaturiroutesid","title":"getCoverageLonLatUriRoutesId","text":""},{"location":"expert/ios/api/RoutesAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/RoutesAPI/#return_3","title":"ReturnExample","text":"<p>Routes</p> <pre><code>Expert.shared.routesApi.getCoverageLonLatUriRoutesId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RoutesAPI/#getcoverageregionroutes","title":"getCoverageRegionRoutes","text":""},{"location":"expert/ios/api/RoutesAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/RoutesAPI/#return_4","title":"ReturnExample","text":"<p>Routes</p> <pre><code>Expert.shared.routesApi.getCoverageRegionRoutes(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RoutesAPI/#getcoverageregionroutesid","title":"getCoverageRegionRoutesId","text":""},{"location":"expert/ios/api/RoutesAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/RoutesAPI/#return_5","title":"ReturnExample","text":"<p>Routes</p> <pre><code>Expert.shared.routesApi.getCoverageRegionRoutesId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RoutesAPI/#getcoverageregionuriroutes","title":"getCoverageRegionUriRoutes","text":""},{"location":"expert/ios/api/RoutesAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/RoutesAPI/#return_6","title":"ReturnExample","text":"<p>Routes</p> <pre><code>Expert.shared.routesApi.getCoverageRegionUriRoutes(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RoutesAPI/#getcoverageregionuriroutesid","title":"getCoverageRegionUriRoutesId","text":""},{"location":"expert/ios/api/RoutesAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/RoutesAPI/#return_7","title":"ReturnExample","text":"<p>Routes</p> <pre><code>Expert.shared.routesApi.getCoverageRegionUriRoutesId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/RoutesAPI/#getroutes","title":"getRoutes","text":""},{"location":"expert/ios/api/RoutesAPI/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/RoutesAPI/#return_8","title":"ReturnExample","text":"<p>Routes</p> <pre><code>Expert.shared.routesApi.getRoutes(\n    externalCode: \"externalCode_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopAreasAPI/","title":"StopAreasAPI","text":"Method HTTP request getCoverageLonLatStopAreas GET /coverage/{lon};{lat}/stop_areas getCoverageLonLatStopAreasId GET /coverage/{lon};{lat}/stop_areas/{id} getCoverageLonLatUriStopAreas GET /coverage/{lon};{lat}/{uri}/stop_areas getCoverageLonLatUriStopAreasId GET /coverage/{lon};{lat}/{uri}/stop_areas/{id} getCoverageRegionStopAreas GET /coverage/{region}/stop_areas getCoverageRegionStopAreasId GET /coverage/{region}/stop_areas/{id} getCoverageRegionUriStopAreas GET /coverage/{region}/{uri}/stop_areas getCoverageRegionUriStopAreasId GET /coverage/{region}/{uri}/stop_areas/{id} getStopAreas GET /stop_areas"},{"location":"expert/ios/api/StopAreasAPI/#getcoveragelonlatstopareas","title":"getCoverageLonLatStopAreas","text":""},{"location":"expert/ios/api/StopAreasAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopAreasAPI/#return","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>Expert.shared.stopAreasApi.getCoverageLonLatStopAreas(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopAreasAPI/#getcoveragelonlatstopareasid","title":"getCoverageLonLatStopAreasId","text":""},{"location":"expert/ios/api/StopAreasAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopAreasAPI/#return_1","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>Expert.shared.stopAreasApi.getCoverageLonLatStopAreasId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopAreasAPI/#getcoveragelonlaturistopareas","title":"getCoverageLonLatUriStopAreas","text":""},{"location":"expert/ios/api/StopAreasAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopAreasAPI/#return_2","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>Expert.shared.stopAreasApi.getCoverageLonLatUriStopAreas(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopAreasAPI/#getcoveragelonlaturistopareasid","title":"getCoverageLonLatUriStopAreasId","text":""},{"location":"expert/ios/api/StopAreasAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopAreasAPI/#return_3","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>Expert.shared.stopAreasApi.getCoverageLonLatUriStopAreasId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopAreasAPI/#getcoverageregionstopareas","title":"getCoverageRegionStopAreas","text":""},{"location":"expert/ios/api/StopAreasAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopAreasAPI/#return_4","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>Expert.shared.stopAreasApi.getCoverageRegionStopAreas(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopAreasAPI/#getcoverageregionstopareasid","title":"getCoverageRegionStopAreasId","text":""},{"location":"expert/ios/api/StopAreasAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopAreasAPI/#return_5","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>Expert.shared.stopAreasApi.getCoverageRegionStopAreasId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopAreasAPI/#getcoverageregionuristopareas","title":"getCoverageRegionUriStopAreas","text":""},{"location":"expert/ios/api/StopAreasAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopAreasAPI/#return_6","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>Expert.shared.stopAreasApi.getCoverageRegionUriStopAreas(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopAreasAPI/#getcoverageregionuristopareasid","title":"getCoverageRegionUriStopAreasId","text":""},{"location":"expert/ios/api/StopAreasAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopAreasAPI/#return_7","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>Expert.shared.stopAreasApi.getCoverageRegionUriStopAreasId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopAreasAPI/#getstopareas","title":"getStopAreas","text":""},{"location":"expert/ios/api/StopAreasAPI/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopAreasAPI/#return_8","title":"ReturnExample","text":"<p>StopAreas</p> <pre><code>Expert.shared.stopAreasApi.getStopAreas(\n    externalCode: \"externalCode_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopPointsAPI/","title":"StopPointsAPI","text":"Method HTTP request getCoverageLonLatStopPoints GET /coverage/{lon};{lat}/stop_points getCoverageLonLatStopPointsId GET /coverage/{lon};{lat}/stop_points/{id} getCoverageLonLatUriStopPoints GET /coverage/{lon};{lat}/{uri}/stop_points getCoverageLonLatUriStopPointsId GET /coverage/{lon};{lat}/{uri}/stop_points/{id} getCoverageRegionStopPoints GET /coverage/{region}/stop_points getCoverageRegionStopPointsId GET /coverage/{region}/stop_points/{id} getCoverageRegionUriStopPoints GET /coverage/{region}/{uri}/stop_points getCoverageRegionUriStopPointsId GET /coverage/{region}/{uri}/stop_points/{id} getStopPoints GET /stop_points"},{"location":"expert/ios/api/StopPointsAPI/#getcoveragelonlatstoppoints","title":"getCoverageLonLatStopPoints","text":""},{"location":"expert/ios/api/StopPointsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopPointsAPI/#return","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>Expert.shared.stopPointsApi.getCoverageLonLatStopPoints(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopPointsAPI/#getcoveragelonlatstoppointsid","title":"getCoverageLonLatStopPointsId","text":""},{"location":"expert/ios/api/StopPointsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopPointsAPI/#return_1","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>Expert.shared.stopPointsApi.getCoverageLonLatStopPointsId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopPointsAPI/#getcoveragelonlaturistoppoints","title":"getCoverageLonLatUriStopPoints","text":""},{"location":"expert/ios/api/StopPointsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopPointsAPI/#return_2","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>Expert.shared.stopPointsApi.getCoverageLonLatUriStopPoints(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopPointsAPI/#getcoveragelonlaturistoppointsid","title":"getCoverageLonLatUriStopPointsId","text":""},{"location":"expert/ios/api/StopPointsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopPointsAPI/#return_3","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>Expert.shared.stopPointsApi.getCoverageLonLatUriStopPointsId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopPointsAPI/#getcoverageregionstoppoints","title":"getCoverageRegionStopPoints","text":""},{"location":"expert/ios/api/StopPointsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopPointsAPI/#return_4","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>Expert.shared.stopPointsApi.getCoverageRegionStopPoints(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopPointsAPI/#getcoverageregionstoppointsid","title":"getCoverageRegionStopPointsId","text":""},{"location":"expert/ios/api/StopPointsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopPointsAPI/#return_5","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>Expert.shared.stopPointsApi.getCoverageRegionStopPointsId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopPointsAPI/#getcoverageregionuristoppoints","title":"getCoverageRegionUriStopPoints","text":""},{"location":"expert/ios/api/StopPointsAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopPointsAPI/#return_6","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>Expert.shared.stopPointsApi.getCoverageRegionUriStopPoints(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopPointsAPI/#getcoverageregionuristoppointsid","title":"getCoverageRegionUriStopPointsId","text":""},{"location":"expert/ios/api/StopPointsAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopPointsAPI/#return_7","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>Expert.shared.stopPointsApi.getCoverageRegionUriStopPointsId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopPointsAPI/#getstoppoints","title":"getStopPoints","text":""},{"location":"expert/ios/api/StopPointsAPI/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional] originalId String original uri of the object you want to query [optional]"},{"location":"expert/ios/api/StopPointsAPI/#return_8","title":"ReturnExample","text":"<p>StopPoints</p> <pre><code>Expert.shared.stopPointsApi.getStopPoints(\n    externalCode: \"externalCode_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"], \n    originalId: \"originalId_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopSchedulesAPI/","title":"StopSchedulesAPI","text":"Method HTTP request getCoverageLonLatUriStopSchedules GET /coverage/{lon};{lat}/{uri}/stop_schedules getCoverageRegionUriStopSchedules GET /coverage/{region}/{uri}/stop_schedules getStopSchedules GET /stop_schedules"},{"location":"expert/ios/api/StopSchedulesAPI/#getcoveragelonlaturistopschedules","title":"getCoverageLonLatUriStopSchedules","text":""},{"location":"expert/ios/api/StopSchedulesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/StopSchedulesAPI/#return","title":"ReturnExample","text":"<p>StopSchedules</p> <pre><code>Expert.shared.stopSchedulesApi.getCoverageLonLatUriStopSchedules(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopSchedulesAPI/#getcoverageregionuristopschedules","title":"getCoverageRegionUriStopSchedules","text":""},{"location":"expert/ios/api/StopSchedulesAPI/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/StopSchedulesAPI/#return_1","title":"ReturnExample","text":"<p>StopSchedules</p> <pre><code>Expert.shared.stopSchedulesApi.getCoverageRegionUriStopSchedules(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/StopSchedulesAPI/#getstopschedules","title":"getStopSchedules","text":""},{"location":"expert/ios/api/StopSchedulesAPI/#parameters_2","title":"Parameters","text":"Name Type Note filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/StopSchedulesAPI/#return_2","title":"ReturnExample","text":"<p>StopSchedules</p> <pre><code>Expert.shared.stopSchedulesApi.getStopSchedules(\n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TerminusSchedulesAPI/","title":"TerminusSchedulesAPI","text":"Method HTTP request getCoverageLonLatUriTerminusSchedules GET /coverage/{lon};{lat}/{uri}/terminus_schedules getCoverageRegionUriTerminusSchedules GET /coverage/{region}/{uri}/terminus_schedules getTerminusSchedules GET /terminus_schedules"},{"location":"expert/ios/api/TerminusSchedulesAPI/#getcoveragelonlaturiterminusschedules","title":"getCoverageLonLatUriTerminusSchedules","text":""},{"location":"expert/ios/api/TerminusSchedulesAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/TerminusSchedulesAPI/#return","title":"ReturnExample","text":"<p>TerminusSchedules</p> <pre><code>Expert.shared.terminusSchedulesApi.getCoverageLonLatUriTerminusSchedules(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TerminusSchedulesAPI/#getcoverageregionuriterminusschedules","title":"getCoverageRegionUriTerminusSchedules","text":""},{"location":"expert/ios/api/TerminusSchedulesAPI/#parameters_1","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/TerminusSchedulesAPI/#return_1","title":"ReturnExample","text":"<p>TerminusSchedules</p> <pre><code>Expert.shared.terminusSchedulesApi.getCoverageRegionUriTerminusSchedules(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TerminusSchedulesAPI/#getterminusschedules","title":"getTerminusSchedules","text":""},{"location":"expert/ios/api/TerminusSchedulesAPI/#parameters_2","title":"Parameters","text":"Name Type Note filter String use to filter PT objects [optional] fromDatetime Date The datetime from which you want the schedules [optional] untilDatetime Date The datetime until which you want the schedules [optional] duration Int Maximum duration between datetime and the retrieved stop time [optional] [default to 86399] depth Int The depth of your object [optional] [default to 2] count Int Number of schedules per page [optional] [default to 10] startPage Int The current page [optional] maxDateTimes Int DEPRECATED, replaced by `items_per_schedule` [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] calendar String Id of the calendar [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] dataFreshness String freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data [optional] [enum: base_schedule, adapted_schedule, realtime] itemsPerSchedule Int maximum number of date_times per schedule [optional] [default to 10000] disableGeojson Bool remove geojson from the response [optional] directionType String Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. [optional] [enum: all, forward, backward]"},{"location":"expert/ios/api/TerminusSchedulesAPI/#return_2","title":"ReturnExample","text":"<p>TerminusSchedules</p> <pre><code>Expert.shared.terminusSchedulesApi.getTerminusSchedules(\n    filter: \"filter_example\", \n    fromDatetime: Date(), \n    untilDatetime: Date(), \n    duration: 86399, \n    depth: 2, \n    count: 10, \n    startPage: 56, \n    maxDateTimes: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    calendar: \"calendar_example\", \n    distance: 200, \n    dataFreshness: \"dataFreshness_example\", \n    itemsPerSchedule: 10000, \n    disableGeojson: true, \n    directionType: \"directionType_example\"\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TrafficReportAPI/","title":"TrafficReportAPI","text":"Method HTTP request getCoverageLonLatTrafficReports GET /coverage/{lon};{lat}/traffic_reports getCoverageLonLatUriTrafficReports GET /coverage/{lon};{lat}/{uri}/traffic_reports getCoverageRegionTrafficReports GET /coverage/{region}/traffic_reports getCoverageRegionUriTrafficReports GET /coverage/{region}/{uri}/traffic_reports"},{"location":"expert/ios/api/TrafficReportAPI/#getcoveragelonlattrafficreports","title":"getCoverageLonLatTrafficReports","text":""},{"location":"expert/ios/api/TrafficReportAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 10] startPage Int The current page [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] disableGeojson Bool remove geojson from the response [optional] since Date use disruptions valid after this date [optional] until Date use disruptions valid before this date [optional]"},{"location":"expert/ios/api/TrafficReportAPI/#return","title":"ReturnExample","text":"<p>TrafficReports</p> <pre><code>Expert.shared.trafficReportApi.getCoverageLonLatTrafficReports(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 10, \n    startPage: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    distance: 200, \n    disableGeojson: true, \n    since: Date(), \n    until: Date()\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TrafficReportAPI/#getcoveragelonlaturitrafficreports","title":"getCoverageLonLatUriTrafficReports","text":""},{"location":"expert/ios/api/TrafficReportAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 10] startPage Int The current page [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] disableGeojson Bool remove geojson from the response [optional] since Date use disruptions valid after this date [optional] until Date use disruptions valid before this date [optional]"},{"location":"expert/ios/api/TrafficReportAPI/#return_1","title":"ReturnExample","text":"<p>TrafficReports</p> <pre><code>Expert.shared.trafficReportApi.getCoverageLonLatUriTrafficReports(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    depth: 1, \n    count: 10, \n    startPage: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    distance: 200, \n    disableGeojson: true, \n    since: Date(), \n    until: Date()\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TrafficReportAPI/#getcoverageregiontrafficreports","title":"getCoverageRegionTrafficReports","text":""},{"location":"expert/ios/api/TrafficReportAPI/#parameters_2","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 10] startPage Int The current page [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] disableGeojson Bool remove geojson from the response [optional] since Date use disruptions valid after this date [optional] until Date use disruptions valid before this date [optional]"},{"location":"expert/ios/api/TrafficReportAPI/#return_2","title":"ReturnExample","text":"<p>TrafficReports</p> <pre><code>Expert.shared.trafficReportApi.getCoverageRegionTrafficReports(\n    region: \"region_example\", \n    depth: 1, \n    count: 10, \n    startPage: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    distance: 200, \n    disableGeojson: true, \n    since: Date(), \n    until: Date()\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TrafficReportAPI/#getcoverageregionuritrafficreports","title":"getCoverageRegionUriTrafficReports","text":""},{"location":"expert/ios/api/TrafficReportAPI/#parameters_3","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 10] startPage Int The current page [optional] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] disableGeojson Bool remove geojson from the response [optional] since Date use disruptions valid after this date [optional] until Date use disruptions valid before this date [optional]"},{"location":"expert/ios/api/TrafficReportAPI/#return_3","title":"ReturnExample","text":"<p>TrafficReports</p> <pre><code>Expert.shared.trafficReportApi.getCoverageRegionUriTrafficReports(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    depth: 1, \n    count: 10, \n    startPage: 56, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    distance: 200, \n    disableGeojson: true, \n    since: Date(), \n    until: Date()\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TripsAPI/","title":"TripsAPI","text":"Method HTTP request getCoverageLonLatTrips GET /coverage/{lon};{lat}/trips getCoverageLonLatTripsId GET /coverage/{lon};{lat}/trips/{id} getCoverageLonLatUriTrips GET /coverage/{lon};{lat}/{uri}/trips getCoverageLonLatUriTripsId GET /coverage/{lon};{lat}/{uri}/trips/{id} getCoverageRegionTrips GET /coverage/{region}/trips getCoverageRegionTripsId GET /coverage/{region}/trips/{id} getCoverageRegionUriTrips GET /coverage/{region}/{uri}/trips getCoverageRegionUriTripsId GET /coverage/{region}/{uri}/trips/{id}"},{"location":"expert/ios/api/TripsAPI/#getcoveragelonlattrips","title":"getCoverageLonLatTrips","text":""},{"location":"expert/ios/api/TripsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/TripsAPI/#return","title":"ReturnExample","text":"<p>Trips</p> <pre><code>Expert.shared.tripsApi.getCoverageLonLatTrips(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TripsAPI/#getcoveragelonlattripsid","title":"getCoverageLonLatTripsId","text":""},{"location":"expert/ios/api/TripsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/TripsAPI/#return_1","title":"ReturnExample","text":"<p>Trips</p> <pre><code>Expert.shared.tripsApi.getCoverageLonLatTripsId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TripsAPI/#getcoveragelonlaturitrips","title":"getCoverageLonLatUriTrips","text":""},{"location":"expert/ios/api/TripsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/TripsAPI/#return_2","title":"ReturnExample","text":"<p>Trips</p> <pre><code>Expert.shared.tripsApi.getCoverageLonLatUriTrips(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TripsAPI/#getcoveragelonlaturitripsid","title":"getCoverageLonLatUriTripsId","text":""},{"location":"expert/ios/api/TripsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/TripsAPI/#return_3","title":"ReturnExample","text":"<p>Trips</p> <pre><code>Expert.shared.tripsApi.getCoverageLonLatUriTripsId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TripsAPI/#getcoverageregiontrips","title":"getCoverageRegionTrips","text":""},{"location":"expert/ios/api/TripsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/TripsAPI/#return_4","title":"ReturnExample","text":"<p>Trips</p> <pre><code>Expert.shared.tripsApi.getCoverageRegionTrips(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TripsAPI/#getcoverageregiontripsid","title":"getCoverageRegionTripsId","text":""},{"location":"expert/ios/api/TripsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/TripsAPI/#return_5","title":"ReturnExample","text":"<p>Trips</p> <pre><code>Expert.shared.tripsApi.getCoverageRegionTripsId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TripsAPI/#getcoverageregionuritrips","title":"getCoverageRegionUriTrips","text":""},{"location":"expert/ios/api/TripsAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/TripsAPI/#return_6","title":"ReturnExample","text":"<p>Trips</p> <pre><code>Expert.shared.tripsApi.getCoverageRegionUriTrips(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/TripsAPI/#getcoverageregionuritripsid","title":"getCoverageRegionUriTripsId","text":""},{"location":"expert/ios/api/TripsAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/TripsAPI/#return_7","title":"ReturnExample","text":"<p>Trips</p> <pre><code>Expert.shared.tripsApi.getCoverageRegionUriTripsId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehicleJourneysAPI/","title":"VehicleJourneysAPI","text":"Method HTTP request getCoverageLonLatUriVehicleJourneys GET /coverage/{lon};{lat}/{uri}/vehicle_journeys getCoverageLonLatUriVehicleJourneysId GET /coverage/{lon};{lat}/{uri}/vehicle_journeys/{id} getCoverageLonLatVehicleJourneys GET /coverage/{lon};{lat}/vehicle_journeys getCoverageLonLatVehicleJourneysId GET /coverage/{lon};{lat}/vehicle_journeys/{id} getCoverageRegionUriVehicleJourneys GET /coverage/{region}/{uri}/vehicle_journeys getCoverageRegionUriVehicleJourneysId GET /coverage/{region}/{uri}/vehicle_journeys/{id} getCoverageRegionVehicleJourneys GET /coverage/{region}/vehicle_journeys getCoverageRegionVehicleJourneysId GET /coverage/{region}/vehicle_journeys/{id} getVehicleJourneys GET /vehicle_journeys"},{"location":"expert/ios/api/VehicleJourneysAPI/#getcoveragelonlaturivehiclejourneys","title":"getCoverageLonLatUriVehicleJourneys","text":""},{"location":"expert/ios/api/VehicleJourneysAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/VehicleJourneysAPI/#return","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>Expert.shared.vehicleJourneysApi.getCoverageLonLatUriVehicleJourneys(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehicleJourneysAPI/#getcoveragelonlaturivehiclejourneysid","title":"getCoverageLonLatUriVehicleJourneysId","text":""},{"location":"expert/ios/api/VehicleJourneysAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/VehicleJourneysAPI/#return_1","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>Expert.shared.vehicleJourneysApi.getCoverageLonLatUriVehicleJourneysId(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehicleJourneysAPI/#getcoveragelonlatvehiclejourneys","title":"getCoverageLonLatVehicleJourneys","text":""},{"location":"expert/ios/api/VehicleJourneysAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/VehicleJourneysAPI/#return_2","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>Expert.shared.vehicleJourneysApi.getCoverageLonLatVehicleJourneys(\n    lat: 3.4, \n    lon: 3.4, \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehicleJourneysAPI/#getcoveragelonlatvehiclejourneysid","title":"getCoverageLonLatVehicleJourneysId","text":""},{"location":"expert/ios/api/VehicleJourneysAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/VehicleJourneysAPI/#return_3","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>Expert.shared.vehicleJourneysApi.getCoverageLonLatVehicleJourneysId(\n    lat: 3.4, \n    lon: 3.4, \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehicleJourneysAPI/#getcoverageregionurivehiclejourneys","title":"getCoverageRegionUriVehicleJourneys","text":""},{"location":"expert/ios/api/VehicleJourneysAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/VehicleJourneysAPI/#return_4","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>Expert.shared.vehicleJourneysApi.getCoverageRegionUriVehicleJourneys(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehicleJourneysAPI/#getcoverageregionurivehiclejourneysid","title":"getCoverageRegionUriVehicleJourneysId","text":""},{"location":"expert/ios/api/VehicleJourneysAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/VehicleJourneysAPI/#return_5","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>Expert.shared.vehicleJourneysApi.getCoverageRegionUriVehicleJourneysId(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehicleJourneysAPI/#getcoverageregionvehiclejourneys","title":"getCoverageRegionVehicleJourneys","text":""},{"location":"expert/ios/api/VehicleJourneysAPI/#parameters_6","title":"Parameters","text":"Name Type Note region String The region you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/VehicleJourneysAPI/#return_6","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>Expert.shared.vehicleJourneysApi.getCoverageRegionVehicleJourneys(\n    region: \"region_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehicleJourneysAPI/#getcoverageregionvehiclejourneysid","title":"getCoverageRegionVehicleJourneysId","text":""},{"location":"expert/ios/api/VehicleJourneysAPI/#parameters_7","title":"Parameters","text":"Name Type Note region String The region you want to query id String Id of the object you want to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] externalCode String An external code to query [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/VehicleJourneysAPI/#return_7","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>Expert.shared.vehicleJourneysApi.getCoverageRegionVehicleJourneysId(\n    region: \"region_example\", \n    id: \"id_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    externalCode: \"externalCode_example\", \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehicleJourneysAPI/#getvehiclejourneys","title":"getVehicleJourneys","text":""},{"location":"expert/ios/api/VehicleJourneysAPI/#parameters_8","title":"Parameters","text":"Name Type Note externalCode String An external code to query startPage Int The page where you want to start [optional] count Int Number of objects you want on a page [optional] [default to 25] depth Int The depth of your object [optional] [default to 1] forbiddenId [String] DEPRECATED, replaced by `forbidden_uris[]` [optional] forbiddenUris [String] forbidden uris [optional] headsign String filter vehicle journeys on headsign [optional] odtLevel String odt level [optional] [default to all] [enum: scheduled, all, zonal, with_stops] dataFreshness String Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using `&amp;data_freshness=base_schedule` will return all original vehicle_journeys onlywhereas using `&amp;data_freshness=realtime` will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). [optional] [default to base_schedule] [enum: base_schedule, adapted_schedule, realtime] distance Int Distance range of the query. Used only if a coord is in the query [optional] [default to 200] since Date filters objects not valid before this date [optional] until Date filters objects not valid after this date [optional] disableGeojson Bool remove geojson from the response [optional] disableDisruption Bool remove disruptions from the response [optional] filter String The filter parameter [optional] tags [String] If filled, will restrain the search within the given disruption tags [optional]"},{"location":"expert/ios/api/VehicleJourneysAPI/#return_8","title":"ReturnExample","text":"<p>VehicleJourneys</p> <pre><code>Expert.shared.vehicleJourneysApi.getVehicleJourneys(\n    externalCode: \"externalCode_example\", \n    startPage: 56, \n    count: 25, \n    depth: 1, \n    forbiddenId: [\"forbiddenId_example\"], \n    forbiddenUris: [\"forbiddenUris_example\"], \n    headsign: \"headsign_example\", \n    odtLevel: \"all\", \n    dataFreshness: \"base_schedule\", \n    distance: 200, \n    since: Date(), \n    until: Date(), \n    disableGeojson: true, \n    disableDisruption: true, \n    filter: \"filter_example\", \n    tags: [\"tags_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehiclePositionsAPI/","title":"VehiclePositionsAPI","text":"Method HTTP request getCoordLonLatVehiclePositions GET /coord/{lon};{lat}/vehicle_positions getCoordsLonLatVehiclePositions GET /coords/{lon};{lat}/vehicle_positions getCoverageLonLatUriVehiclePositions GET /coverage/{lon};{lat}/{uri}/vehicle_positions getCoverageLonLatVehiclePositions GET /coverage/{lon};{lat}/vehicle_positions getCoverageRegionUriVehiclePositions GET /coverage/{region}/{uri}/vehicle_positions getCoverageRegionVehiclePositions GET /coverage/{region}/vehicle_positions"},{"location":"expert/ios/api/VehiclePositionsAPI/#getcoordlonlatvehiclepositions","title":"getCoordLonLatVehiclePositions","text":""},{"location":"expert/ios/api/VehiclePositionsAPI/#parameters","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/VehiclePositionsAPI/#return","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>Expert.shared.vehiclePositionsApi.getCoordLonLatVehiclePositions(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehiclePositionsAPI/#getcoordslonlatvehiclepositions","title":"getCoordsLonLatVehiclePositions","text":""},{"location":"expert/ios/api/VehiclePositionsAPI/#parameters_1","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/VehiclePositionsAPI/#return_1","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>Expert.shared.vehiclePositionsApi.getCoordsLonLatVehiclePositions(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehiclePositionsAPI/#getcoveragelonlaturivehiclepositions","title":"getCoverageLonLatUriVehiclePositions","text":""},{"location":"expert/ios/api/VehiclePositionsAPI/#parameters_2","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/VehiclePositionsAPI/#return_2","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>Expert.shared.vehiclePositionsApi.getCoverageLonLatUriVehiclePositions(\n    lat: 3.4, \n    lon: 3.4, \n    uri: \"uri_example\", \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehiclePositionsAPI/#getcoveragelonlatvehiclepositions","title":"getCoverageLonLatVehiclePositions","text":""},{"location":"expert/ios/api/VehiclePositionsAPI/#parameters_3","title":"Parameters","text":"Name Type Note lat Double The latitude of where the coord you want to query lon Double The longitude of where the coord you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/VehiclePositionsAPI/#return_3","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>Expert.shared.vehiclePositionsApi.getCoverageLonLatVehiclePositions(\n    lat: 3.4, \n    lon: 3.4, \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehiclePositionsAPI/#getcoverageregionurivehiclepositions","title":"getCoverageRegionUriVehiclePositions","text":""},{"location":"expert/ios/api/VehiclePositionsAPI/#parameters_4","title":"Parameters","text":"Name Type Note region String The region you want to query uri String First part of the uri depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/VehiclePositionsAPI/#return_4","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>Expert.shared.vehiclePositionsApi.getCoverageRegionUriVehiclePositions(\n    region: \"region_example\", \n    uri: \"uri_example\", \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/api/VehiclePositionsAPI/#getcoverageregionvehiclepositions","title":"getCoverageRegionVehiclePositions","text":""},{"location":"expert/ios/api/VehiclePositionsAPI/#parameters_5","title":"Parameters","text":"Name Type Note region String The region you want to query depth Int The depth of your object [optional] [default to 1] count Int Number of objects per page [optional] [default to 25] filter String Filter your objects [optional] startPage Int The current page [optional] forbiddenUris [String] forbidden uris [optional]"},{"location":"expert/ios/api/VehiclePositionsAPI/#return_5","title":"ReturnExample","text":"<p>VehiclePositions1</p> <pre><code>Expert.shared.vehiclePositionsApi.getCoverageRegionVehiclePositions(\n    region: \"region_example\", \n    depth: 1, \n    count: 25, \n    filter: \"filter_example\", \n    startPage: 56, \n    forbiddenUris: [\"forbiddenUris_example\"]\n) { result, rawData, error in\n    if let error = error {\n        // There was an error\n    } else {\n        // Use result Data or Raw Data\n    }\n</code></pre>"},{"location":"expert/ios/model/AccessPoint/","title":"AccessPoint","text":""},{"location":"expert/ios/model/AccessPoint/#properties","title":"Properties","text":"Name Type Note name String Name of the object id String Identifier of the object accessPointCode String [optional] coord Coord [optional]"},{"location":"expert/ios/model/AccessPoints/","title":"AccessPoints","text":""},{"location":"expert/ios/model/AccessPoints/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] warnings [BetaEndpoints] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] accessPoints [AccessPoint] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/Address/","title":"Address","text":""},{"location":"expert/ios/model/Address/#properties","title":"Properties","text":"Name Type Note name String Name of the object houseNumber Int coord Coord [optional] label String [optional] administrativeRegions [Admin] [optional] id String Identifier of the object"},{"location":"expert/ios/model/Admin/","title":"Admin","text":""},{"location":"expert/ios/model/Admin/#properties","title":"Properties","text":"Name Type Note insee String [optional] name String Name of the object level Int [optional] coord Coord [optional] label String [optional] id String Identifier of the object zipCode String"},{"location":"expert/ios/model/Amount/","title":"Amount","text":""},{"location":"expert/ios/model/Amount/#properties","title":"Properties","text":"Name Type Note value Float [optional] unit String [optional]"},{"location":"expert/ios/model/ApplicationPattern/","title":"ApplicationPattern","text":""},{"location":"expert/ios/model/ApplicationPattern/#properties","title":"Properties","text":"Name Type Note weekPattern WeekPattern [optional] applicationPeriod PeriodDate [optional] timeSlots [PeriodTime] [optional]"},{"location":"expert/ios/model/Arrivals/","title":"Arrivals","text":""},{"location":"expert/ios/model/Arrivals/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] arrivals [Passage] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] exceptions [Exception] [optional]"},{"location":"expert/ios/model/BetaEndpoints/","title":"BetaEndpoints","text":""},{"location":"expert/ios/model/BetaEndpoints/#properties","title":"Properties","text":"Name Type Note message String id String"},{"location":"expert/ios/model/CO2/","title":"CO2","text":""},{"location":"expert/ios/model/CO2/#properties","title":"Properties","text":"Name Type Note co2Emission Amount [optional]"},{"location":"expert/ios/model/Calendar/","title":"Calendar","text":""},{"location":"expert/ios/model/Calendar/#properties","title":"Properties","text":"Name Type Note activePeriods [CalendarPeriod] [optional] name String Name of the object [optional] validityPattern ValidityPattern [optional] exceptions [CalendarException] [optional] weekPattern WeekPattern [optional] id String Identifier of the object [optional]"},{"location":"expert/ios/model/CalendarException/","title":"CalendarException","text":""},{"location":"expert/ios/model/CalendarException/#properties","title":"Properties","text":"Name Type Note type String [optional] datetime String [optional]"},{"location":"expert/ios/model/CalendarPeriod/","title":"CalendarPeriod","text":""},{"location":"expert/ios/model/CalendarPeriod/#properties","title":"Properties","text":"Name Type Note begin String [optional] end String [optional]"},{"location":"expert/ios/model/Calendars/","title":"Calendars","text":""},{"location":"expert/ios/model/Calendars/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] calendars [Calendar] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/CarPark/","title":"CarPark","text":""},{"location":"expert/ios/model/CarPark/#properties","title":"Properties","text":"Name Type Note available Int [optional] occupiedElectricVehicle Int [optional] availableRidesharing Int [optional] occupiedPRM Int [optional] availablePRM Int [optional] totalPlaces Int [optional] state String [optional] occupiedRidesharing Int [optional] occupied Int [optional] availableElectricVehicle Int [optional]"},{"location":"expert/ios/model/Cause/","title":"Cause","text":""},{"location":"expert/ios/model/Cause/#properties","title":"Properties","text":"Name Type Note label String [optional]"},{"location":"expert/ios/model/CellLatSchema/","title":"CellLatSchema","text":""},{"location":"expert/ios/model/CellLatSchema/#properties","title":"Properties","text":"Name Type Note minLat Float [optional] maxLat Float [optional] centerLat Float [optional]"},{"location":"expert/ios/model/CellLonSchema/","title":"CellLonSchema","text":""},{"location":"expert/ios/model/CellLonSchema/#properties","title":"Properties","text":"Name Type Note minLon Float [optional] centerLon Float [optional] maxLon Float [optional]"},{"location":"expert/ios/model/Channel/","title":"Channel","text":""},{"location":"expert/ios/model/Channel/#properties","title":"Properties","text":"Name Type Note contentType String id String types [Types] [optional] name String"},{"location":"expert/ios/model/Channel/#types","title":"[Types]","text":"Name Value web web sms sms email email mobile mobile notification notification twitter twitter facebook facebook unknownType unknown_type title title beacon beacon"},{"location":"expert/ios/model/Code/","title":"Code","text":""},{"location":"expert/ios/model/Code/#properties","title":"Properties","text":"Name Type Note type String [optional] value String [optional]"},{"location":"expert/ios/model/Comment/","title":"Comment","text":""},{"location":"expert/ios/model/Comment/#properties","title":"Properties","text":"Name Type Note type String [optional] value String [optional]"},{"location":"expert/ios/model/CommercialMode/","title":"CommercialMode","text":""},{"location":"expert/ios/model/CommercialMode/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object"},{"location":"expert/ios/model/CommercialModes/","title":"CommercialModes","text":""},{"location":"expert/ios/model/CommercialModes/#properties","title":"Properties","text":"Name Type Note pagination Pagination commercialModes [CommercialMode] [optional] links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/Companie/","title":"Companie","text":""},{"location":"expert/ios/model/Companie/#properties","title":"Properties","text":"Name Type Note codes [Code] id String Identifier of the object name String Name of the object"},{"location":"expert/ios/model/Companies/","title":"Companies","text":""},{"location":"expert/ios/model/Companies/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] companies [Companie] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/Context/","title":"Context","text":""},{"location":"expert/ios/model/Context/#properties","title":"Properties","text":"Name Type Note timezone String Timezone of any datetime in the response, default value Africa/Abidjan (UTC) [optional] currentDatetime String The datetime of the request (considered as \\\"now\\\") [optional] carDirectPath CO2 [optional]"},{"location":"expert/ios/model/Contributor/","title":"Contributor","text":""},{"location":"expert/ios/model/Contributor/#properties","title":"Properties","text":"Name Type Note website String [optional] id String Identifier of the object license String [optional] name String Name of the object"},{"location":"expert/ios/model/Contributors/","title":"Contributors","text":""},{"location":"expert/ios/model/Contributors/#properties","title":"Properties","text":"Name Type Note pagination Pagination contributors [Contributor] [optional] links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/Coord/","title":"Coord","text":""},{"location":"expert/ios/model/Coord/#properties","title":"Properties","text":"Name Type Note lat String lon String"},{"location":"expert/ios/model/Cost/","title":"Cost","text":""},{"location":"expert/ios/model/Cost/#properties","title":"Properties","text":"Name Type Note currency String [optional] value String"},{"location":"expert/ios/model/Coverage/","title":"Coverage","text":""},{"location":"expert/ios/model/Coverage/#properties","title":"Properties","text":"Name Type Note status String [optional] datasetCreatedAt String Creation date of the dataset [optional] name String Name of the coverage startProductionDate String Beginning of the production period. We only have data on this production period [optional] shape String GeoJSON of the shape of the coverage endProductionDate String End of the production period. We only have data on this production period [optional] error CoverageError [optional] lastLoadAt String Datetime of the last data loading [optional] id String Identifier of the coverage"},{"location":"expert/ios/model/CoverageError/","title":"CoverageError","text":""},{"location":"expert/ios/model/CoverageError/#properties","title":"Properties","text":"Name Type Note code String [optional] value String [optional]"},{"location":"expert/ios/model/Coverages/","title":"Coverages","text":""},{"location":"expert/ios/model/Coverages/#properties","title":"Properties","text":"Name Type Note regions [Coverage] links [LinkSchema] [optional] context Context [optional]"},{"location":"expert/ios/model/CurrentAvailability/","title":"CurrentAvailability","text":""},{"location":"expert/ios/model/CurrentAvailability/#properties","title":"Properties","text":"Name Type Note status Status [optional] effect Effect [optional] cause Cause [optional] periods [Period] [optional] updatedAt String [optional]"},{"location":"expert/ios/model/CurrentAvailability/#status","title":"Status","text":"Name Value unknown unknown available available unavailable unavailable"},{"location":"expert/ios/model/Dataset/","title":"Dataset","text":""},{"location":"expert/ios/model/Dataset/#properties","title":"Properties","text":"Name Type Note realtimeLevel String [optional] _description String [optional] system String Type of dataset provided (GTFS, Chouette, ...) [optional] startValidationDate String Start of the validity period for the dataset [optional] endValidationDate String End of the validity period for the dataset [optional] contributor Contributor Contributor providing the dataset [optional] id String Identifier of the object"},{"location":"expert/ios/model/Datasets/","title":"Datasets","text":""},{"location":"expert/ios/model/Datasets/#properties","title":"Properties","text":"Name Type Note pagination Pagination datasets [Dataset] [optional] links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/DateTimeType/","title":"DateTimeType","text":""},{"location":"expert/ios/model/DateTimeType/#properties","title":"Properties","text":"Name Type Note dateTime String baseDateTime String [optional] links [LinkSchema] additionalInformations [String] occupancy String [optional] dataFreshness String"},{"location":"expert/ios/model/Departures/","title":"Departures","text":""},{"location":"expert/ios/model/Departures/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] departures [Passage] context Context [optional] error ModelError [optional] exceptions [Exception] [optional]"},{"location":"expert/ios/model/DictAddresses/","title":"DictAddresses","text":""},{"location":"expert/ios/model/DictAddresses/#properties","title":"Properties","text":"Name Type Note regions [String] message String [optional] context Context [optional] address Address [optional]"},{"location":"expert/ios/model/Disruption/","title":"Disruption","text":""},{"location":"expert/ios/model/Disruption/#properties","title":"Properties","text":"Name Type Note status Status [optional] category String [optional] cause String severity Severity [optional] tags [String] [optional] messages [Message] [optional] applicationPeriods [Period] [optional] impactId String [optional] disruptionId String [optional] updatedAt String [optional] uri String [optional] impactedObjects [Impacted] [optional] id String disruptionUri String [optional] contributor String applicationPatterns [ApplicationPattern] [optional] properties [DisruptionProperty] [optional]"},{"location":"expert/ios/model/Disruption/#status","title":"Status","text":"Name Value past past active active future future"},{"location":"expert/ios/model/DisruptionProperty/","title":"DisruptionProperty","text":""},{"location":"expert/ios/model/DisruptionProperty/#properties","title":"Properties","text":"Name Type Note type String [optional] key String [optional] value String [optional]"},{"location":"expert/ios/model/Disruptions/","title":"Disruptions","text":""},{"location":"expert/ios/model/Disruptions/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/Distances/","title":"Distances","text":""},{"location":"expert/ios/model/Distances/#properties","title":"Properties","text":"Name Type Note taxi Int Total distance by taxi of the journey (meters) car Int Total distance by car of the journey (meters) walking Int Total walking distance of the journey (meters) bike Int Total distance by bike of the journey (meters) ridesharing Int Total distance by ridesharing of the journey (meters)"},{"location":"expert/ios/model/Durations/","title":"Durations","text":""},{"location":"expert/ios/model/Durations/#properties","title":"Properties","text":"Name Type Note taxi Int Total duration by taxi of the journey (seconds) walking Int Total walking duration of the journey (seconds) car Int Total duration by car of the journey (seconds) ridesharing Int Total duration by ridesharing of the journey (seconds) bike Int Total duration by bike of the journey (seconds) total Int Total duration of the journey (seconds)"},{"location":"expert/ios/model/DynamicSpeed/","title":"DynamicSpeed","text":""},{"location":"expert/ios/model/DynamicSpeed/#properties","title":"Properties","text":"Name Type Note baseSpeed Float [optional] trafficSpeed Float [optional] geojsonOffset Int [optional]"},{"location":"expert/ios/model/Effect/","title":"Effect","text":""},{"location":"expert/ios/model/Effect/#properties","title":"Properties","text":"Name Type Note label String [optional]"},{"location":"expert/ios/model/Elevation/","title":"Elevation","text":""},{"location":"expert/ios/model/Elevation/#properties","title":"Properties","text":"Name Type Note distanceFromStart Int geojsonOffset Int [optional] elevation Int"},{"location":"expert/ios/model/EquipmentDetails/","title":"EquipmentDetails","text":""},{"location":"expert/ios/model/EquipmentDetails/#properties","title":"Properties","text":"Name Type Note embeddedType EmbeddedType [optional] id String [optional] name String [optional] currentAvailability CurrentAvailability [optional]"},{"location":"expert/ios/model/EquipmentDetails/#embeddedtype","title":"EmbeddedType","text":"Name Value escalator escalator elevator elevator"},{"location":"expert/ios/model/EquipmentReport/","title":"EquipmentReport","text":""},{"location":"expert/ios/model/EquipmentReport/#properties","title":"Properties","text":"Name Type Note line Line [optional] stopAreaEquipments [StopAreaEquipments] [optional]"},{"location":"expert/ios/model/EquipmentReports/","title":"EquipmentReports","text":""},{"location":"expert/ios/model/EquipmentReports/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] warnings [BetaEndpoints] equipmentReports [EquipmentReport] notes [Note] [optional] error ModelError [optional] feedPublishers [FeedPublisher] context Context [optional] disruptions [Disruption]"},{"location":"expert/ios/model/Exception/","title":"Exception","text":""},{"location":"expert/ios/model/Exception/#properties","title":"Properties","text":"Name Type Note date String [optional] type String [optional] id String"},{"location":"expert/ios/model/Fare/","title":"Fare","text":""},{"location":"expert/ios/model/Fare/#properties","title":"Properties","text":"Name Type Note found Bool [optional] total Cost [optional] links [LinkSchema]"},{"location":"expert/ios/model/FareZone/","title":"FareZone","text":""},{"location":"expert/ios/model/FareZone/#properties","title":"Properties","text":"Name Type Note name String [optional]"},{"location":"expert/ios/model/FeedPublisher/","title":"FeedPublisher","text":""},{"location":"expert/ios/model/FeedPublisher/#properties","title":"Properties","text":"Name Type Note url String [optional] id String license String [optional] name String [optional]"},{"location":"expert/ios/model/FreeFloatings/","title":"FreeFloatings","text":""},{"location":"expert/ios/model/FreeFloatings/#properties","title":"Properties","text":"Name Type Note pagination JSONValue freeFloatings [FreeFloatingsFreeFloatings] warnings [BetaEndpoints]"},{"location":"expert/ios/model/FreeFloatingsCoord/","title":"FreeFloatingsCoord","text":""},{"location":"expert/ios/model/FreeFloatingsCoord/#properties","title":"Properties","text":"Name Type Note lat String lon String"},{"location":"expert/ios/model/FreeFloatingsFreeFloatings/","title":"FreeFloatingsFreeFloatings","text":""},{"location":"expert/ios/model/FreeFloatingsFreeFloatings/#properties","title":"Properties","text":"Name Type Note distance Int [optional] publicId String [optional] deeplink String [optional] battery Int [optional] propulsion String [optional] providerName String [optional] type ModelType [optional] id String [optional] coord FreeFloatingsCoord [optional]"},{"location":"expert/ios/model/FreeFloatingsFreeFloatings/#modeltype","title":"ModelType","text":"Name Value bike BIKE scooter SCOOTER motorscooter MOTORSCOOTER station STATION car CAR other OTHER"},{"location":"expert/ios/model/GeoStatus/","title":"GeoStatus","text":""},{"location":"expert/ios/model/GeoStatus/#properties","title":"Properties","text":"Name Type Note nbAdminsFromCities Int [optional] streetNetworkSources [String] poiSources [String] nbAddresses Int [optional] nbAdmins Int [optional] nbPois Int [optional] nbWays Int [optional]"},{"location":"expert/ios/model/GeoStatus1/","title":"GeoStatus1","text":""},{"location":"expert/ios/model/GeoStatus1/#properties","title":"Properties","text":"Name Type Note geoStatus GeoStatus context Context [optional]"},{"location":"expert/ios/model/GraphicalIsrochone/","title":"GraphicalIsrochone","text":""},{"location":"expert/ios/model/GraphicalIsrochone/#properties","title":"Properties","text":"Name Type Note maxDuration Int [optional] from Place [optional] geojson GraphicalIsrochoneGeojson [optional] minDuration Int [optional] minDateTime String [optional] to Place [optional] requestedDateTime String [optional] maxDateTime String [optional]"},{"location":"expert/ios/model/GraphicalIsrochone1/","title":"GraphicalIsrochone1","text":""},{"location":"expert/ios/model/GraphicalIsrochone1/#properties","title":"Properties","text":"Name Type Note links [LinkSchema] warnings [BetaEndpoints] feedPublishers [FeedPublisher] isochrones [GraphicalIsrochone] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/GraphicalIsrochoneGeojson/","title":"GraphicalIsrochoneGeojson","text":""},{"location":"expert/ios/model/GraphicalIsrochoneGeojson/#properties","title":"Properties","text":"Name Type Note coordinates [[[[Float]]]] [optional]"},{"location":"expert/ios/model/Header/","title":"Header","text":""},{"location":"expert/ios/model/Header/#properties","title":"Properties","text":"Name Type Note displayInformations VJDisplayInformation [optional] additionalInformations [String] links [LinkSchema] [optional]"},{"location":"expert/ios/model/HeatMap/","title":"HeatMap","text":""},{"location":"expert/ios/model/HeatMap/#properties","title":"Properties","text":"Name Type Note to Place [optional] requestedDateTime String [optional] from Place [optional] heatMatrix HeatMatrixSchema [optional]"},{"location":"expert/ios/model/HeatMap1/","title":"HeatMap1","text":""},{"location":"expert/ios/model/HeatMap1/#properties","title":"Properties","text":"Name Type Note links [LinkSchema] warnings [BetaEndpoints] heatMaps [HeatMap] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/HeatMatrixSchema/","title":"HeatMatrixSchema","text":""},{"location":"expert/ios/model/HeatMatrixSchema/#properties","title":"Properties","text":"Name Type Note lineHeaders [LineHeadersSchema] lines [LinesSchema]"},{"location":"expert/ios/model/Impacted/","title":"Impacted","text":""},{"location":"expert/ios/model/Impacted/#properties","title":"Properties","text":"Name Type Note impactedStops [ImpactedStop] [optional] ptObject PtObject [optional] impactedRailSection ImpactedSection [optional] impactedSection ImpactedSection [optional]"},{"location":"expert/ios/model/ImpactedSection/","title":"ImpactedSection","text":""},{"location":"expert/ios/model/ImpactedSection/#properties","title":"Properties","text":"Name Type Note routes [Route] [optional] to PtObject [optional] from PtObject [optional]"},{"location":"expert/ios/model/ImpactedStop/","title":"ImpactedStop","text":""},{"location":"expert/ios/model/ImpactedStop/#properties","title":"Properties","text":"Name Type Note amendedArrivalTime String [optional] stopPoint StopPoint [optional] stopTimeEffect StopTimeEffect [optional] departureStatus String [optional] isDetour Bool amendedDepartureTime String [optional] baseArrivalTime String [optional] cause String baseDepartureTime String [optional] arrivalStatus String [optional]"},{"location":"expert/ios/model/ImpactedStop/#stoptimeeffect","title":"StopTimeEffect","text":"Name Value delayed delayed added added deleted deleted unchanged unchanged"},{"location":"expert/ios/model/IndividualInformation/","title":"IndividualInformation","text":""},{"location":"expert/ios/model/IndividualInformation/#properties","title":"Properties","text":"Name Type Note alias String image String [optional] gender Gender [optional] rating IndividualRating [optional]"},{"location":"expert/ios/model/IndividualInformation/#gender","title":"Gender","text":"Name Value female female male male"},{"location":"expert/ios/model/IndividualRating/","title":"IndividualRating","text":""},{"location":"expert/ios/model/IndividualRating/#properties","title":"Properties","text":"Name Type Note count Int [optional] scaleMin Float [optional] scaleMax Float [optional] value Float"},{"location":"expert/ios/model/Journey/","title":"Journey","text":""},{"location":"expert/ios/model/Journey/#properties","title":"Properties","text":"Name Type Note status String Status from the whole journey taking into account the most disturbing information retrieved on every object used (can be \\\"NO_SERVICE\\\", \\\"SIGNIFICANT_DELAYS\\\", ... distances Distances [optional] from Place [optional] links [LinkSchema] [optional] tags [String] nbTransfers Int Number of transfers along the journey durations Durations [optional] arrivalDateTime String Arrival date and time of the journey [optional] calendars [Calendar] [optional] departureDateTime String Departure date and time of the journey [optional] to Place [optional] requestedDateTime String [optional] fare Fare co2Emission Amount type String Used to qualify the journey (can be \\\"best\\\", \\\"comfort\\\", \\\"non_pt_walk\\\", ... duration Int Duration of the journey (seconds) sections [Section] [optional] debug JourneyDebug [optional]"},{"location":"expert/ios/model/JourneyDebug/","title":"JourneyDebug","text":""},{"location":"expert/ios/model/JourneyDebug/#properties","title":"Properties","text":"Name Type Note nbVjExtentions Int Number of stay-in nbSections Int Number of sections internalId String [optional] streetnetworkDuration Int Total duration of streetnetwork use (seconds) transferDuration Int Total duration of transfers (seconds) minWaitingDuration Int Minimum on all waiting durations (seconds)"},{"location":"expert/ios/model/JourneyPattern/","title":"JourneyPattern","text":""},{"location":"expert/ios/model/JourneyPattern/#properties","title":"Properties","text":"Name Type Note route Route [optional] journeyPatternPoints [JourneyPatternPoint] [optional] name String Name of the object id String Identifier of the object"},{"location":"expert/ios/model/JourneyPatternPoint/","title":"JourneyPatternPoint","text":""},{"location":"expert/ios/model/JourneyPatternPoint/#properties","title":"Properties","text":"Name Type Note stopPoint StopPoint [optional] id String"},{"location":"expert/ios/model/JourneyPatternPoints/","title":"JourneyPatternPoints","text":""},{"location":"expert/ios/model/JourneyPatternPoints/#properties","title":"Properties","text":"Name Type Note pagination Pagination journeyPatternPoints [JourneyPatternPoint] [optional] links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/JourneyPatterns/","title":"JourneyPatterns","text":""},{"location":"expert/ios/model/JourneyPatterns/#properties","title":"Properties","text":"Name Type Note pagination Pagination context Context [optional] links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] journeyPatterns [JourneyPattern] [optional] error ModelError [optional]"},{"location":"expert/ios/model/Journeys/","title":"Journeys","text":""},{"location":"expert/ios/model/Journeys/#properties","title":"Properties","text":"Name Type Note tickets [Ticket] terminus [StopArea] links [LinkSchema] journeys [Journey] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] exceptions [Exception] [optional]"},{"location":"expert/ios/model/Line/","title":"Line","text":""},{"location":"expert/ios/model/Line/#properties","title":"Properties","text":"Name Type Note comment String [optional] properties [Property] [optional] code String network Network [optional] links [LinkSchema] color String [optional] routes [Route] [optional] geojson MultiLineStringSchema [optional] textColor String [optional] physicalModes [PhysicalMode] [optional] codes [Code] [optional] comments [Comment] [optional] closingTime String [optional] openingTime String [optional] commercialMode CommercialMode [optional] id String Identifier of the object lineGroups [LineGroup] [optional] name String Name of the object"},{"location":"expert/ios/model/LineGroup/","title":"LineGroup","text":""},{"location":"expert/ios/model/LineGroup/#properties","title":"Properties","text":"Name Type Note name String Name of the object lines [Line] [optional] mainLine Line [optional] comments [Comment] id String Identifier of the object"},{"location":"expert/ios/model/LineGroups/","title":"LineGroups","text":""},{"location":"expert/ios/model/LineGroups/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] lineGroups [LineGroup] [optional]"},{"location":"expert/ios/model/LineHeadersSchema/","title":"LineHeadersSchema","text":""},{"location":"expert/ios/model/LineHeadersSchema/#properties","title":"Properties","text":"Name Type Note cellLat CellLatSchema"},{"location":"expert/ios/model/LineReport/","title":"LineReport","text":""},{"location":"expert/ios/model/LineReport/#properties","title":"Properties","text":"Name Type Note line Line [optional] ptObjects [PtObject]"},{"location":"expert/ios/model/LineReports/","title":"LineReports","text":""},{"location":"expert/ios/model/LineReports/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] warnings [BetaEndpoints] disruptions [Disruption] notes [Note] [optional] lineReports [LineReport] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/Lines/","title":"Lines","text":""},{"location":"expert/ios/model/Lines/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] lines [Line] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/LinesSchema/","title":"LinesSchema","text":""},{"location":"expert/ios/model/LinesSchema/#properties","title":"Properties","text":"Name Type Note duration [Int] [optional] cellLon CellLonSchema"},{"location":"expert/ios/model/LinkSchema/","title":"LinkSchema","text":""},{"location":"expert/ios/model/LinkSchema/#properties","title":"Properties","text":"Name Type Note category String [optional] commentType String [optional] title String [optional] _internal Bool [optional] value String [optional] href String [optional] rel String [optional] templated Bool [optional] type String [optional] id String [optional]"},{"location":"expert/ios/model/Message/","title":"Message","text":""},{"location":"expert/ios/model/Message/#properties","title":"Properties","text":"Name Type Note text String [optional] channel Channel [optional]"},{"location":"expert/ios/model/ModelError/","title":"ModelError","text":""},{"location":"expert/ios/model/ModelError/#properties","title":"Properties","text":"Name Type Note message String [optional] id String"},{"location":"expert/ios/model/MultiLineStringSchema/","title":"MultiLineStringSchema","text":""},{"location":"expert/ios/model/MultiLineStringSchema/#properties","title":"Properties","text":"Name Type Note type String [optional] coordinates [[[Float]]] [optional]"},{"location":"expert/ios/model/Network/","title":"Network","text":""},{"location":"expert/ios/model/Network/#properties","title":"Properties","text":"Name Type Note codes [Code] [optional] id String Identifier of the object links [LinkSchema] name String Name of the object"},{"location":"expert/ios/model/Networks/","title":"Networks","text":""},{"location":"expert/ios/model/Networks/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] networks [Network] [optional]"},{"location":"expert/ios/model/Note/","title":"Note","text":""},{"location":"expert/ios/model/Note/#properties","title":"Properties","text":"Name Type Note category Category [optional] type String [optional] value String [optional] commentType String [optional] id String"},{"location":"expert/ios/model/Note/#category","title":"Category","text":"Name Value comment comment terminus terminus"},{"location":"expert/ios/model/Pagination/","title":"Pagination","text":""},{"location":"expert/ios/model/Pagination/#properties","title":"Properties","text":"Name Type Note startPage Int itemsOnPage Int itemsPerPage Int totalResult Int"},{"location":"expert/ios/model/Passage/","title":"Passage","text":""},{"location":"expert/ios/model/Passage/#properties","title":"Properties","text":"Name Type Note displayInformations PassageDisplayInformation [optional] stopPoint StopPoint [optional] route Route [optional] links [LinkSchema] [optional] stopDateTime StopDateTime [optional]"},{"location":"expert/ios/model/PassageDisplayInformation/","title":"PassageDisplayInformation","text":""},{"location":"expert/ios/model/PassageDisplayInformation/#properties","title":"Properties","text":"Name Type Note direction String code String [optional] network String [optional] links [LinkSchema] color String [optional] name String [optional] physicalMode String [optional] headsign String label String [optional] equipments [Equipments] textColor String [optional] tripShortName String [optional] headsigns [String] [optional] commercialMode String [optional] _description String [optional]"},{"location":"expert/ios/model/PassageDisplayInformation/#equipments","title":"[Equipments]","text":"Name Value wheelchairAccessibility has_wheelchair_accessibility bikeAccepted has_bike_accepted airConditioned has_air_conditioned visualAnnouncement has_visual_announcement audibleAnnouncement has_audible_announcement appropriateEscort has_appropriate_escort appropriateSignage has_appropriate_signage schoolVehicle has_school_vehicle wheelchairBoarding has_wheelchair_boarding sheltered has_sheltered elevator has_elevator escalator has_escalator bikeDepot has_bike_depot"},{"location":"expert/ios/model/Path/","title":"Path","text":""},{"location":"expert/ios/model/Path/#properties","title":"Properties","text":"Name Type Note direction Int name String instructionStartCoordinate Coord [optional] instruction String [optional] viaUri String [optional] length Int duration Int id Int [optional]"},{"location":"expert/ios/model/PathWay/","title":"PathWay","text":""},{"location":"expert/ios/model/PathWay/#properties","title":"Properties","text":"Name Type Note isExit Bool [optional] name String Name of the object stairCount Int [optional] accessPoint AccessPoint [optional] maxSlope Int [optional] signpostedAs String [optional] pathwayMode Int [optional] length Int [optional] reversedSignpostedAs String [optional] minWidth Int [optional] isEntrance Bool [optional] traversalTime Int [optional] id String Identifier of the object"},{"location":"expert/ios/model/Period/","title":"Period","text":""},{"location":"expert/ios/model/Period/#properties","title":"Properties","text":"Name Type Note begin String [optional] end String [optional]"},{"location":"expert/ios/model/PeriodDate/","title":"PeriodDate","text":""},{"location":"expert/ios/model/PeriodDate/#properties","title":"Properties","text":"Name Type Note begin String [optional] end String [optional]"},{"location":"expert/ios/model/PeriodTime/","title":"PeriodTime","text":""},{"location":"expert/ios/model/PeriodTime/#properties","title":"Properties","text":"Name Type Note begin String [optional] end String [optional]"},{"location":"expert/ios/model/PhysicalMode/","title":"PhysicalMode","text":""},{"location":"expert/ios/model/PhysicalMode/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object"},{"location":"expert/ios/model/PhysicalModes/","title":"PhysicalModes","text":""},{"location":"expert/ios/model/PhysicalModes/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] physicalModes [PhysicalMode] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/Place/","title":"Place","text":""},{"location":"expert/ios/model/Place/#properties","title":"Properties","text":"Name Type Note embeddedType EmbeddedType stopPoint StopPoint [optional] administrativeRegion Admin [optional] name String Name of the object distance String Distance to the object in meters [optional] accessPoint PathWay [optional] address Address [optional] poi Poi [optional] quality Int [optional] id String Identifier of the object stopArea StopArea [optional]"},{"location":"expert/ios/model/Place/#embeddedtype","title":"EmbeddedType","text":"Name Value line line journeyPattern journey_pattern vehicleJourney vehicle_journey stopPoint stop_point stopArea stop_area network network physicalMode physical_mode commercialMode commercial_mode connection connection journeyPatternPoint journey_pattern_point company company route route poi poi contributor contributor address address poitype poitype administrativeRegion administrative_region calendar calendar lineGroup line_group impact impact dataset dataset trip trip accessPoint access_point"},{"location":"expert/ios/model/PlaceNearby/","title":"PlaceNearby","text":""},{"location":"expert/ios/model/PlaceNearby/#properties","title":"Properties","text":"Name Type Note embeddedType EmbeddedType stopPoint StopPoint [optional] administrativeRegion Admin [optional] stopArea StopArea [optional] distance String Distance to the object in meters [optional] accessPoint PathWay [optional] address Address [optional] poi Poi [optional] quality Int [optional] id String Identifier of the object name String Name of the object"},{"location":"expert/ios/model/PlaceNearby/#embeddedtype","title":"EmbeddedType","text":"Name Value line line journeyPattern journey_pattern vehicleJourney vehicle_journey stopPoint stop_point stopArea stop_area network network physicalMode physical_mode commercialMode commercial_mode connection connection journeyPatternPoint journey_pattern_point company company route route poi poi contributor contributor address address poitype poitype administrativeRegion administrative_region calendar calendar lineGroup line_group impact impact dataset dataset trip trip accessPoint access_point"},{"location":"expert/ios/model/Places/","title":"Places","text":""},{"location":"expert/ios/model/Places/#properties","title":"Properties","text":"Name Type Note places [Place] [optional] links [LinkSchema] [optional] disruptions [Disruption] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/PlacesNearby/","title":"PlacesNearby","text":""},{"location":"expert/ios/model/PlacesNearby/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] placesNearby [PlaceNearby] [optional]"},{"location":"expert/ios/model/Poi/","title":"Poi","text":""},{"location":"expert/ios/model/Poi/#properties","title":"Properties","text":"Name Type Note poiType PoiType [optional] name String Name of the object carPark CarPark [optional] coord Coord [optional] label String [optional] administrativeRegions [Admin] [optional] address Address [optional] id String Identifier of the object properties [String:String] [optional] stands Stands [optional]"},{"location":"expert/ios/model/PoiType/","title":"PoiType","text":""},{"location":"expert/ios/model/PoiType/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object"},{"location":"expert/ios/model/PoiTypes/","title":"PoiTypes","text":""},{"location":"expert/ios/model/PoiTypes/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] poiTypes [PoiType] [optional]"},{"location":"expert/ios/model/Pois/","title":"Pois","text":""},{"location":"expert/ios/model/Pois/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] pois [Poi] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/Property/","title":"Property","text":""},{"location":"expert/ios/model/Property/#properties","title":"Properties","text":"Name Type Note name String [optional] value String [optional]"},{"location":"expert/ios/model/PtObject/","title":"PtObject","text":""},{"location":"expert/ios/model/PtObject/#properties","title":"Properties","text":"Name Type Note embeddedType EmbeddedType stopPoint StopPoint [optional] name String Name of the object route Route [optional] stopArea StopArea [optional] commercialMode CommercialMode [optional] id String Identifier of the object line Line [optional] quality Int [optional] trip Trip [optional] network Network [optional]"},{"location":"expert/ios/model/PtObject/#embeddedtype","title":"EmbeddedType","text":"Name Value line line journeyPattern journey_pattern vehicleJourney vehicle_journey stopPoint stop_point stopArea stop_area network network physicalMode physical_mode commercialMode commercial_mode connection connection journeyPatternPoint journey_pattern_point company company route route poi poi contributor contributor address address poitype poitype administrativeRegion administrative_region calendar calendar lineGroup line_group impact impact dataset dataset trip trip accessPoint access_point"},{"location":"expert/ios/model/PtObjects/","title":"PtObjects","text":""},{"location":"expert/ios/model/PtObjects/#properties","title":"Properties","text":"Name Type Note links [LinkSchema] [optional] disruptions [Disruption] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] ptObjects [PtObject] [optional]"},{"location":"expert/ios/model/RidesharingInformation/","title":"RidesharingInformation","text":""},{"location":"expert/ios/model/RidesharingInformation/#properties","title":"Properties","text":"Name Type Note _operator String driver IndividualInformation [optional] network String seats SeatsDescription [optional]"},{"location":"expert/ios/model/Route/","title":"Route","text":""},{"location":"expert/ios/model/Route/#properties","title":"Properties","text":"Name Type Note direction Place [optional] codes [Code] [optional] name String Name of the object links [LinkSchema] physicalModes [PhysicalMode] [optional] isFrequence IsFrequence [optional] comments [Comment] [optional] directionType String geojson MultiLineStringSchema [optional] stopPoints [StopPoint] [optional] line Line [optional] id String Identifier of the object"},{"location":"expert/ios/model/Route/#isfrequence","title":"IsFrequence","text":"Name Value _false False"},{"location":"expert/ios/model/RouteDisplayInformation/","title":"RouteDisplayInformation","text":""},{"location":"expert/ios/model/RouteDisplayInformation/#properties","title":"Properties","text":"Name Type Note direction String code String [optional] network String [optional] links [LinkSchema] color String [optional] label String [optional] commercialMode String [optional] textColor String [optional] name String [optional]"},{"location":"expert/ios/model/RouteSchedule/","title":"RouteSchedule","text":""},{"location":"expert/ios/model/RouteSchedule/#properties","title":"Properties","text":"Name Type Note displayInformations RouteDisplayInformation [optional] table Table [optional] additionalInformations String geojson MultiLineStringSchema [optional] links [LinkSchema] [optional]"},{"location":"expert/ios/model/RouteSchedules/","title":"RouteSchedules","text":""},{"location":"expert/ios/model/RouteSchedules/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] exceptions [Exception] [optional] routeSchedules [RouteSchedule]"},{"location":"expert/ios/model/Routes/","title":"Routes","text":""},{"location":"expert/ios/model/Routes/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] routes [Route] [optional]"},{"location":"expert/ios/model/Row/","title":"Row","text":""},{"location":"expert/ios/model/Row/#properties","title":"Properties","text":"Name Type Note stopPoint StopPoint [optional] dateTimes [DateTimeType]"},{"location":"expert/ios/model/SeatsDescription/","title":"SeatsDescription","text":""},{"location":"expert/ios/model/SeatsDescription/#properties","title":"Properties","text":"Name Type Note available Int [optional] total Int [optional]"},{"location":"expert/ios/model/Section/","title":"Section","text":""},{"location":"expert/ios/model/Section/#properties","title":"Properties","text":"Name Type Note links [LinkSchema] departureDateTime String Departure date and time of the section [optional] baseDepartureDateTime String Base-schedule departure date and time of the section [optional] dataFreshness DataFreshness [optional] duration Int Duration of the section (seconds) id String from Place [optional] arrivalDateTime String Arrival date and time of the section [optional] additionalInformations [AdditionalInformations] [optional] geojson SectionGeoJsonSchema GeoJSON of the shape of the section [optional] ridesharingInformations RidesharingInformation [optional] to Place [optional] baseArrivalDateTime String Base-schedule arrival date and time of the section [optional] transferType TransferType [optional] type ModelType [optional] streetInformations [StreetInformation] [optional] dynamicSpeeds [DynamicSpeed] [optional] co2Emission Amount path [Path] [optional] cycleLaneLength Int [optional] elevations [Elevation] [optional] displayInformations VJDisplayInformation [optional] mode Mode [optional] ridesharingJourneys [Journey] [optional] vias [PathWay] [optional] stopDateTimes [StopDateTime] [optional]"},{"location":"expert/ios/model/Section/#datafreshness","title":"DataFreshness","text":"Name Value baseSchedule base_schedule adaptedSchedule adapted_schedule realtime realtime"},{"location":"expert/ios/model/Section/#additionalinformations","title":"[AdditionalInformations]","text":"Name Value odtWithZone odt_with_zone odtWithStopPoint odt_with_stop_point odtWithStopTime odt_with_stop_time hasDatetimeEstimated has_datetime_estimated regular regular stayIn stay_in"},{"location":"expert/ios/model/Section/#transfertype","title":"TransferType","text":"Name Value walking walking stayIn stay_in"},{"location":"expert/ios/model/Section/#modeltype","title":"ModelType","text":"Name Value publicTransport public_transport streetNetwork street_network waiting waiting transfer transfer boarding boarding landing landing bssRent bss_rent bssPutBack bss_put_back crowFly crow_fly park park leaveParking leave_parking alighting alighting ridesharing ridesharing onDemandTransport on_demand_transport"},{"location":"expert/ios/model/Section/#mode","title":"Mode","text":"Name Value walking walking bike bike car car bss bss ridesharing ridesharing carnopark carnopark taxi taxi"},{"location":"expert/ios/model/SectionGeoJsonSchema/","title":"SectionGeoJsonSchema","text":""},{"location":"expert/ios/model/SectionGeoJsonSchema/#properties","title":"Properties","text":"Name Type Note type String [optional] properties [SectionGeoJsonSchemaProperties] [optional] coordinates [[Float]] [optional]"},{"location":"expert/ios/model/SectionGeoJsonSchemaProperties/","title":"SectionGeoJsonSchemaProperties","text":""},{"location":"expert/ios/model/SectionGeoJsonSchemaProperties/#properties","title":"Properties","text":"Name Type Note length Double [optional]"},{"location":"expert/ios/model/Severity/","title":"Severity","text":""},{"location":"expert/ios/model/Severity/#properties","title":"Properties","text":"Name Type Note color String [optional] priority Int [optional] name String [optional] effect Effect [optional]"},{"location":"expert/ios/model/Severity/#effect","title":"Effect","text":"Name Value noService NO_SERVICE reducedService REDUCED_SERVICE significantDelays SIGNIFICANT_DELAYS detour DETOUR additionalService ADDITIONAL_SERVICE modifiedService MODIFIED_SERVICE otherEffect OTHER_EFFECT unknownEffect UNKNOWN_EFFECT stopMoved STOP_MOVED"},{"location":"expert/ios/model/Stands/","title":"Stands","text":""},{"location":"expert/ios/model/Stands/#properties","title":"Properties","text":"Name Type Note status Status [optional] availablePlaces Int [optional] availableBikes Int [optional] totalStands Int [optional]"},{"location":"expert/ios/model/Stands/#status","title":"Status","text":"Name Value unavailable unavailable closed closed _open open"},{"location":"expert/ios/model/StopArea/","title":"StopArea","text":""},{"location":"expert/ios/model/StopArea/#properties","title":"Properties","text":"Name Type Note comment String [optional] codes [Code] [optional] name String Name of the object links [LinkSchema] physicalModes [PhysicalMode] [optional] lines [Line] [optional] comments [Comment] [optional] label String Label of the stop area. The name is directly taken from the data whereas the label is  something we compute for better traveler information. If you don't know what to display, display the label.  [optional] commercialModes [CommercialMode] [optional] coord Coord [optional] administrativeRegions [Admin] [optional] timezone String [optional] stopPoints [StopPoint] [optional] id String Identifier of the object"},{"location":"expert/ios/model/StopAreaEquipments/","title":"StopAreaEquipments","text":""},{"location":"expert/ios/model/StopAreaEquipments/#properties","title":"Properties","text":"Name Type Note stopArea StopArea [optional] equipmentDetails [EquipmentDetails] [optional]"},{"location":"expert/ios/model/StopAreas/","title":"StopAreas","text":""},{"location":"expert/ios/model/StopAreas/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] stopAreas [StopArea] [optional]"},{"location":"expert/ios/model/StopDateTime/","title":"StopDateTime","text":""},{"location":"expert/ios/model/StopDateTime/#properties","title":"Properties","text":"Name Type Note stopPoint StopPoint [optional] links [LinkSchema] arrivalDateTime String [optional] additionalInformations [AdditionalInformations] departureDateTime String [optional] baseArrivalDateTime String [optional] baseDepartureDateTime String [optional] dataFreshness DataFreshness [optional]"},{"location":"expert/ios/model/StopDateTime/#additionalinformations","title":"[AdditionalInformations]","text":"Name Value pickUpOnly pick_up_only dropOffOnly drop_off_only onDemandTransport on_demand_transport dateTimeEstimated date_time_estimated skippedStop skipped_stop"},{"location":"expert/ios/model/StopDateTime/#datafreshness","title":"DataFreshness","text":"Name Value baseSchedule base_schedule adaptedSchedule adapted_schedule realtime realtime"},{"location":"expert/ios/model/StopPoint/","title":"StopPoint","text":""},{"location":"expert/ios/model/StopPoint/#properties","title":"Properties","text":"Name Type Note comment String [optional] commercialModes [CommercialMode] [optional] stopArea StopArea [optional] links [LinkSchema] accessPoints [PathWay] [optional] physicalModes [PhysicalMode] [optional] lines [Line] [optional] comments [Comment] [optional] label String [optional] equipments [Equipments] codes [Code] [optional] coord Coord [optional] equipmentDetails [EquipmentDetails] [optional] address Address [optional] fareZone FareZone [optional] administrativeRegions [Admin] [optional] id String Identifier of the object name String Name of the object"},{"location":"expert/ios/model/StopPoint/#equipments","title":"[Equipments]","text":"Name Value wheelchairAccessibility has_wheelchair_accessibility bikeAccepted has_bike_accepted airConditioned has_air_conditioned visualAnnouncement has_visual_announcement audibleAnnouncement has_audible_announcement appropriateEscort has_appropriate_escort appropriateSignage has_appropriate_signage schoolVehicle has_school_vehicle wheelchairBoarding has_wheelchair_boarding sheltered has_sheltered elevator has_elevator escalator has_escalator bikeDepot has_bike_depot"},{"location":"expert/ios/model/StopPoints/","title":"StopPoints","text":""},{"location":"expert/ios/model/StopPoints/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] stopPoints [StopPoint] [optional]"},{"location":"expert/ios/model/StopSchedule/","title":"StopSchedule","text":""},{"location":"expert/ios/model/StopSchedule/#properties","title":"Properties","text":"Name Type Note stopPoint StopPoint [optional] links [LinkSchema] [optional] dateTimes [DateTimeType] route Route [optional] additionalInformations String displayInformations RouteDisplayInformation [optional] lastDatetime DateTimeType [optional] firstDatetime DateTimeType [optional]"},{"location":"expert/ios/model/StopSchedules/","title":"StopSchedules","text":""},{"location":"expert/ios/model/StopSchedules/#properties","title":"Properties","text":"Name Type Note stopSchedules [StopSchedule] pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] exceptions [Exception] [optional]"},{"location":"expert/ios/model/StopTime/","title":"StopTime","text":""},{"location":"expert/ios/model/StopTime/#properties","title":"Properties","text":"Name Type Note stopPoint StopPoint [optional] utcArrivalTime String [optional] utcDepartureTime String [optional] headsign String [optional] skippedStop Bool [optional] arrivalTime String [optional] journeyPatternPoint JourneyPatternPoint [optional] dropOffAllowed Bool [optional] pickupAllowed Bool [optional] departureTime String [optional]"},{"location":"expert/ios/model/StreetInformation/","title":"StreetInformation","text":""},{"location":"expert/ios/model/StreetInformation/#properties","title":"Properties","text":"Name Type Note geojsonOffset Int [optional] cyclePathType String [optional]"},{"location":"expert/ios/model/Table/","title":"Table","text":""},{"location":"expert/ios/model/Table/#properties","title":"Properties","text":"Name Type Note headers [Header] rows [Row]"},{"location":"expert/ios/model/TerminusSchedule/","title":"TerminusSchedule","text":""},{"location":"expert/ios/model/TerminusSchedule/#properties","title":"Properties","text":"Name Type Note stopPoint StopPoint [optional] links [LinkSchema] [optional] dateTimes [DateTimeType] route Route [optional] additionalInformations String displayInformations RouteDisplayInformation [optional] lastDatetime DateTimeType [optional] firstDatetime DateTimeType [optional]"},{"location":"expert/ios/model/TerminusSchedules/","title":"TerminusSchedules","text":""},{"location":"expert/ios/model/TerminusSchedules/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] exceptions [Exception] [optional] terminusSchedules [TerminusSchedule]"},{"location":"expert/ios/model/Ticket/","title":"Ticket","text":""},{"location":"expert/ios/model/Ticket/#properties","title":"Properties","text":"Name Type Note comment String [optional] name String Name of the ticket links [LinkSchema] [optional] cost Cost sourceId String Product identifier of the ticket in the input data found Bool [optional] id String Identifier of the ticket"},{"location":"expert/ios/model/TrafficReport/","title":"TrafficReport","text":""},{"location":"expert/ios/model/TrafficReport/#properties","title":"Properties","text":"Name Type Note vehicleJourneys [VehicleJourney] [optional] lines [Line] [optional] network Network [optional] stopAreas [StopArea] [optional]"},{"location":"expert/ios/model/TrafficReports/","title":"TrafficReports","text":""},{"location":"expert/ios/model/TrafficReports/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] trafficReports [TrafficReport] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/Trip/","title":"Trip","text":""},{"location":"expert/ios/model/Trip/#properties","title":"Properties","text":"Name Type Note id String Identifier of the object name String Name of the object"},{"location":"expert/ios/model/Trips/","title":"Trips","text":""},{"location":"expert/ios/model/Trips/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] trips [Trip] [optional]"},{"location":"expert/ios/model/VJDisplayInformation/","title":"VJDisplayInformation","text":""},{"location":"expert/ios/model/VJDisplayInformation/#properties","title":"Properties","text":"Name Type Note direction String code String [optional] headsigns [String] [optional] _description String [optional] links [LinkSchema] color String [optional] physicalMode String [optional] headsign String commercialMode String [optional] equipments [Equipments] tripShortName String [optional] label String [optional] textColor String [optional] network String [optional] name String [optional]"},{"location":"expert/ios/model/VJDisplayInformation/#equipments","title":"[Equipments]","text":"Name Value wheelchairAccessibility has_wheelchair_accessibility bikeAccepted has_bike_accepted airConditioned has_air_conditioned visualAnnouncement has_visual_announcement audibleAnnouncement has_audible_announcement appropriateEscort has_appropriate_escort appropriateSignage has_appropriate_signage schoolVehicle has_school_vehicle wheelchairBoarding has_wheelchair_boarding sheltered has_sheltered elevator has_elevator escalator has_escalator bikeDepot has_bike_depot"},{"location":"expert/ios/model/ValidityPattern/","title":"ValidityPattern","text":""},{"location":"expert/ios/model/ValidityPattern/#properties","title":"Properties","text":"Name Type Note beginningDate String [optional] days String [optional]"},{"location":"expert/ios/model/VehicleJourney/","title":"VehicleJourney","text":""},{"location":"expert/ios/model/VehicleJourney/#properties","title":"Properties","text":"Name Type Note comment String [optional] codes [Code] [optional] name String Name of the object journeyPattern JourneyPattern [optional] disruptions [LinkSchema] startTime String [optional] headwaySecs Int [optional] stopTimes [StopTime] [optional] comments [Comment] [optional] validityPattern ValidityPattern [optional] headsign String [optional] endTime String [optional] id String Identifier of the object trip Trip [optional] calendars [Calendar] [optional]"},{"location":"expert/ios/model/VehicleJourneyPositions/","title":"VehicleJourneyPositions","text":""},{"location":"expert/ios/model/VehicleJourneyPositions/#properties","title":"Properties","text":"Name Type Note feedCreatedAt String [optional] bearing Int [optional] vehicleJourney VehicleJourney [optional] coord Coord [optional] occupancy String [optional] speed Float [optional] dataFreshness String [optional]"},{"location":"expert/ios/model/VehicleJourneys/","title":"VehicleJourneys","text":""},{"location":"expert/ios/model/VehicleJourneys/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] context Context [optional] error ModelError [optional] vehicleJourneys [VehicleJourney] [optional]"},{"location":"expert/ios/model/VehiclePositions/","title":"VehiclePositions","text":""},{"location":"expert/ios/model/VehiclePositions/#properties","title":"Properties","text":"Name Type Note line Line [optional] vehicleJourneyPositions [VehicleJourneyPositions] [optional]"},{"location":"expert/ios/model/VehiclePositions1/","title":"VehiclePositions1","text":""},{"location":"expert/ios/model/VehiclePositions1/#properties","title":"Properties","text":"Name Type Note pagination Pagination links [LinkSchema] [optional] disruptions [Disruption] notes [Note] [optional] feedPublishers [FeedPublisher] vehiclePositions [VehiclePositions] context Context [optional] error ModelError [optional]"},{"location":"expert/ios/model/WeekPattern/","title":"WeekPattern","text":""},{"location":"expert/ios/model/WeekPattern/#properties","title":"Properties","text":"Name Type Note monday Bool [optional] tuesday Bool [optional] friday Bool [optional] wednesday Bool [optional] thursday Bool [optional] sunday Bool [optional] saturday Bool [optional]"},{"location":"expert/ios/releases/2.2.0/","title":"Expert iOS 2.2.0 Changelog","text":"\ud83d\uddd3 03 Aug 2022"},{"location":"expert/ios/releases/2.2.0/#features","title":"Features","text":"<ul> <li>Add Access Point API</li> <li>Add Vehicle Position API</li> <li>Add Free Floating Nearby API</li> </ul>"},{"location":"expert/ios/releases/2.2.0/#tasks","title":"Tasks","text":"<ul> <li>Replace http URL with https</li> </ul>"},{"location":"expert/ios/releases/2.2.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/CanalTP/navitia/releases/tag/v15.11.1</p>"},{"location":"expert/ios/releases/2.3.2/","title":"Expert iOS 2.3.2 Changelog","text":"\ud83d\uddd3 20 Oct 2022"},{"location":"expert/ios/releases/2.3.2/#tasks","title":"Tasks","text":"<ul> <li>Make dateString optional for Journey</li> </ul>"},{"location":"expert/ios/releases/2.3.2/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/CanalTP/navitia/releases/tag/v15.11.1</p>"},{"location":"expert/ios/releases/2.3.3/","title":"Expert iOS 2.3.3 Changelog","text":"\ud83d\uddd3 5 Jan 2022"},{"location":"expert/ios/releases/2.3.3/#tasks","title":"Tasks","text":"<ul> <li>Use XCFramework instead of a fat framework</li> </ul>"},{"location":"expert/ios/releases/2.3.3/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/CanalTP/navitia/releases/tag/v15.11.1</p>"},{"location":"expert/ios/releases/2.3.4/","title":"Expert iOS 2.3.4 Changelog","text":"\ud83d\uddd3 10 Jan 2022"},{"location":"expert/ios/releases/2.3.4/#tasks","title":"Tasks","text":"<ul> <li>Change decoding process for non mandatory variables</li> <li>Change speed type</li> </ul>"},{"location":"expert/ios/releases/2.3.4/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/CanalTP/navitia/releases/tag/v15.11.1</p>"},{"location":"expert/ios/releases/2.4.0/","title":"Expert iOS 2.4.0 Changelog","text":"\ud83d\uddd3 23 Aug 2022"},{"location":"expert/ios/releases/2.4.0/#features","title":"Features","text":"<ul> <li>Update Graphical Isochrone API</li> <li>Update Heat Map API</li> <li>Update Journey API</li> </ul>"},{"location":"expert/ios/releases/2.4.0/#fixes","title":"Fixes","text":"<ul> <li>handle optional object in Navitia response </li> </ul>"},{"location":"expert/ios/releases/2.4.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/CanalTP/navitia/releases/tag/v15.36.0</p>"},{"location":"expert/ios/releases/2.4.0/#deployment-target","title":"Deployment target","text":"<ul> <li><code>iOS 14</code> minimun</li> </ul>"},{"location":"expert/ios/releases/2.5.0/","title":"Expert iOS 2.5.0 Changelog","text":"\ud83d\uddd3 14 Nov 2023"},{"location":"expert/ios/releases/2.5.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/hove-io/navitia/releases/tag/v15.45.0</p>"},{"location":"expert/ios/releases/2.6.0/","title":"Expert iOS 2.6.0 Changelog","text":"\ud83d\uddd3 27 Dec 2023"},{"location":"expert/ios/releases/2.6.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/hove-io/navitia/releases/tag/v15.50.0</p>"},{"location":"expert/ios/releases/2.7.0/","title":"Expert iOS 2.7.0 Changelog","text":"\ud83d\uddd3 30 Jan 2024"},{"location":"expert/ios/releases/2.7.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/hove-io/navitia/releases/tag/v15.54.0</p>"},{"location":"expert/ios/releases/2.7.1/","title":"Expert iOS 2.7.1 Changelog","text":"\ud83d\uddd3 27 Mar 2024"},{"location":"expert/ios/releases/2.7.1/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"expert/ios/releases/2.7.2/","title":"Expert iOS 2.7.2 Changelog","text":"\ud83d\uddd3 25 Jun 2024"},{"location":"expert/ios/releases/2.7.2/#fixes","title":"Fixes","text":"<ul> <li>Fix <code>additionalInfomation</code> optional</li> <li>Change <code>date</code> param to <code>string</code> in <code>terminusSchedules</code> api</li> </ul>"},{"location":"expert/ios/releases/2.7.2/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"expert/ios/releases/2.7.3/","title":"Expert iOS 2.7.3 Changelog","text":"\ud83d\uddd3 12 Feb 2025"},{"location":"expert/ios/releases/2.7.3/#tasks","title":"Tasks","text":"<ul> <li>Upgrade Alamofire dependency</li> </ul>"},{"location":"expert/ios/releases/2.7.3/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"expert/ios/releases/2.7.3/#dependencies","title":"Dependencies","text":"<ul> <li><code>Alamofire</code> -&gt; <code>5.10.2</code></li> </ul>"},{"location":"expert/ios/releases/2.8.0/","title":"Expert iOS 2.8.0 Changelog","text":"\ud83d\uddd3 24 Feb 2025"},{"location":"expert/ios/releases/2.8.0/#enhancements","title":"Enhancements","text":"<ul> <li>Update minimum iOS deployment to 16</li> <li>Update Navitia API to 15.75.4</li> </ul>"},{"location":"expert/ios/releases/2.9.0/","title":"Expert iOS 2.9.0 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"expert/ios/releases/2.9.0/#based-on-navitia","title":"Based on Navitia","text":"<p>https://github.com/hove-io/navitia/releases/tag/v15.82.1</p>"},{"location":"expert/ios/releases/2.9.1/","title":"Expert iOS 2.9.1 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"expert/ios/releases/2.9.1/#tasks","title":"Tasks","text":"<ul> <li>Removed Alamofire dependency and replaced it with native <code>URLRequest</code> for lighter networking</li> <li>Added handling for \"no internet connection\" errors to improve user feedback</li> </ul>"},{"location":"expert/ios/releases/2.9.1/#fixes","title":"Fixes","text":"<ul> <li>Handled nullable arrays in model decoding</li> <li>Fixed issue with status code error handling to improve API response management</li> <li>Corrected query parameter encoding to ensure proper API requests</li> </ul>"},{"location":"journey/android/","title":"Journey Android","text":""},{"location":"journey/android/#setup","title":"Setup","text":"<p>Add the following dependencies in the <code>build.gradle</code> file of your application:</p> <pre><code>dependencies {\n    implementation(\"com.kisio.navitia.sdk.ui:journey:5.21.2\")\n}\n</code></pre> <p>For the use of cartography, add your Google Maps API Key to your <code>AndroidManifest.xml</code> as well. Replace <code>YOUR_API_KEY</code> with your key:</p> <pre><code>&lt;meta-data\n    android:name=\"com.google.android.geo.API_KEY\"\n    android:value=\"YOUR_API_KEY\"/&gt;\n</code></pre> <p>The activity launching Journey must handle the following configuration changes: <code>orientation|screenSize</code> declared into your <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;activity\n    android:configChanges=\"orientation|screenSize\"/&gt;\n</code></pre>"},{"location":"journey/android/#implementation","title":"Implementation","text":"<p>Warning</p> <p>Make sure to read the modules configuration section before proceeding!</p> <p>This module is set up by calling <code>JourneyUI.getInstance()</code>. The singleton behaves like a builder in which each method allows you to configure the module. Then, you need to call the <code>init()</code> method at the end. You should call this method in an <code>Application</code> subclass. This method takes the following parameters:</p> Name Required Description Type Default <code>context</code> Context in which the module is launched <code>Context</code> <code>token</code> Get your token <code>String</code> <code>configuration</code> Module configuration object <code>JourneyConfiguration</code> <code>null</code> <code>configurationJsonFile</code> Module configuration JSON file name <code>String</code> <code>null</code> Example Configuration with fileManual configuration <pre><code>JourneyUI.getInstance().let { instance -&gt;\n    instance.init(\n        context = this,\n        token = \"your_token\",\n        configurationJsonFile = \"config.json\"\n    )\n}\n</code></pre> <pre><code>JourneyUI.getInstance().let { instance -&gt;\n    instance.init(\n        context = this,\n        token = \"your_token\",\n        configuration = JourneyConfiguration(\n            coverage = \"your_coverage\",\n            timezone = \"Europe/Paris\",\n            env = JourneyEnvironment.PROD,\n            colors = JourneyColors(\n                primary = \"#88819f\"\n            ),\n            transportCategories = listOf&lt;JourneyTransportCategory&gt;()\n        )\n    )\n}\n</code></pre>"},{"location":"journey/android/#navigation-listener","title":"Navigation listener","text":"<p>Since the module launches its own fragments, you may want your application to be aware of navigation events. For that, you have to set a navigation listener by calling this method before <code>init()</code>.</p> <pre><code>JourneyUI.getInstance()\n    .setNavigationListener(journeyNavigationListenerImpl) // (1)\n</code></pre> <ol> <li><code>journeyNavigationListenerImpl</code> should be the class instance implementing <code>JourneyNavigationListener</code> interface.</li> </ol> <p>This interface gives you the method <code>onBack()</code> for any back event between two fragments and the method <code>onNavigate</code> for the reverse. Each method has a <code>JourneyNavigationListener.Event</code> parameter you can rely on.</p> <pre><code>// Navigation events\nEXTERNAL_TO_JOURNEYS\nEXTERNAL_TO_ROADMAP\nGUIDANCE_BACK_TO_ROADMAP\nJOURNEYS_BACK_TO_EXTERNAL\nJOURNEYS_TO_RIDESHARING\nJOURNEYS_TO_ROADMAP\nRIDESHARING_BACK_TO_JOURNEYS\nRIDESHARING_TO_ROADMAP\nROADMAP_TO_GUIDANCE\nROADMAP_BACK_TO_EXTERNAL\nROADMAP_BACK_TO_JOURNEYS\nROADMAP_BACK_TO_RIDESHARING\n</code></pre>"},{"location":"journey/android/#events-tracking","title":"Events tracking","text":"<p>In order to receive the list of generated events within Journey module, you have to attach the tracker to the module instance. You can call this method before or after <code>init()</code>.</p> <pre><code>JourneyUI.getInstance()\n    .attachTracker(journeyTrackerImpl) // (1)\n</code></pre> <ol> <li><code>journeyTrackerImpl</code> should be the class instance implementing <code>JourneyTracker</code> interface.</li> </ol>"},{"location":"journey/android/#launching","title":"Launching","text":"<p>Journey has a single entry point <code>JourneysFragment</code>. Assuming you have an <code>Activity</code> with a fragment container, refer to the following example to launch the entry screen fragment:</p> <pre><code>supportFragmentManager.beginTransaction().run {\n    replace(\n        R.id.container_id,\n        JourneysFragment.newInstance(journeysRequest = JourneysRequest(), showBack = false),\n        \"TAG\"\n    )\n    addToBackStack(\"TAG\")\n    commit()\n}\n</code></pre> <p>The <code>newInstance()</code> method creates an instance of the target fragment and takes the following parameters:</p> Name Required Description Type Default <code>journeysRequest</code> Itinerary search configuration <code>JourneysRequest</code> <code>showBack</code> Show/hide back button on the first screen <code>Boolean</code> <code>false</code>"},{"location":"journey/android/#journeysrequest","title":"<code>JourneysRequest</code>","text":"<p>The <code>JourneysRequest</code> object allows to configure the first itinerary search at screen launch. It has the following parameters:</p> Name Description Type Default <code>additionalTimeAfterFirstSectionTaxi</code> Additional time after first taxi section <code>Int</code> <code>null</code> <code>additionalTimeBeforeLastSectionTaxi</code> Additional time before last taxi section <code>Int</code> <code>null</code> <code>allowedId</code> Allowed Navitia object IDs <code>List&lt;String&gt;</code> <code>emptyList()</code> <code>bikeSpeed</code> Bike speed <code>Float</code> <code>null</code> <code>bssSpeed</code> BSS speed <code>Float</code> <code>null</code> <code>carNoParkSpeed</code> Car no park speed <code>Float</code> <code>null</code> <code>carSpeed</code> Car speed <code>Float</code> <code>null</code> <code>count</code> The number of journeys to be displayed <code>Int</code> <code>-1</code> <code>dataFreshness</code> To indicate if theoretical or realtime data are requested <code>DataFreshness</code> <code>DataFreshness.BASE_SCHEDULE</code> <code>dateTime</code> Requested date and time for journey results <code>DateTime</code> <code>null</code> <code>dateTimeRepresents</code> Whether the datetime represents the departure or arrival <code>DateTimeRepresents</code> <code>DateTimeRepresents.DEPARTURE</code> <code>depth</code> The request depth <code>Int</code> <code>null</code> <code>destinationId</code> Destination Navitia ID <code>String</code> <code>\"\"</code> <code>destinationLabel</code> Destination label, if not set the address will be displayed <code>String</code> <code>\"\"</code> <code>directPath</code> Set the direct path of the journey <code>DirectPath</code> <code>\"\"</code> <code>disruptionActive</code> Check on Navitia <code>Boolean</code> <code>null</code> <code>equipmentDetails</code> Check on Navitia <code>Boolean</code> <code>null</code> <code>freeRadiusFrom</code> Check on Navitia <code>Int</code> <code>null</code> <code>freeRadiusTo</code> Check on Navitia <code>Int</code> <code>null</code> <code>isJourneySchedules</code> Check on Navitia <code>Boolean</code> <code>null</code> <code>maxBikeDirectPathDuration</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxBikeDurationToPt</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxBssDirectPathDuration</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxBssDurationToPt</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxCarDirectPathDuration</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxCarDurationToPt</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxCarNoParkDirectPathDuration</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxCarNoParkDurationToPt</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxDuration</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxDurationToPt</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxJourneys</code> The max number of journeys to be displayed <code>Int</code> <code>-1</code> <code>maxNbTransfers</code> The max number of public transport transfers <code>Int</code> <code>-1</code> <code>maxRidesharingDirectPathDuration</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxRidesharingDurationToPt</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxTaxiDirectPathDuration</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxTaxiDurationToPt</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxWaitingDuration</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxWalkingDirectPathDuration</code> Check on Navitia <code>Int</code> <code>null</code> <code>maxWalkingDurationToPt</code> Check on Navitia <code>Int</code> <code>null</code> <code>minJourneys</code> The min number of journeys to be displayed <code>Int</code> <code>-1</code> <code>minNbTransfers</code> The min number of public transport transfers <code>Int</code> <code>-1</code> <code>originId</code> Origin Navitia ID <code>String</code> <code>\"\"</code> <code>originLabel</code> Origin label, if not set the address will be displayed <code>String</code> <code>\"\"</code> <code>ridesharingSpeed</code> Ridesharing speed <code>Float</code> <code>null</code> <code>taxiSpeed</code> Taxi speed <code>Float</code> <code>null</code> <code>timeframeDuration</code> Taxi speed <code>Int</code> <code>null</code> <code>travelerType</code> Traveler type <code>TravelerType</code> <code>TravelerType.STANDARD</code> <code>walkingSpeed</code> Walking speed <code>Float</code> <code>null</code> <code>wheelchair</code> Check on Navitia <code>Boolean</code> <code>null</code>"},{"location":"journey/android/#datafreshness","title":"<code>DataFreshness</code>","text":"Enum value Description <code>BASE_SCHEDULE</code> Get disrupted journeys with the given results <code>REALTIME</code> Avoid disrupted journeys"},{"location":"journey/android/#datetimerepresents","title":"<code>DateTimeRepresents</code>","text":"Enum value Description <code>ARRIVAL</code> The requested datetime represents the arrival of the journey <code>DEPARTURE</code> The requested datetime represents the departure of the journey"},{"location":"journey/android/#directpath","title":"<code>DirectPath</code>","text":"Enum value Description <code>INDIFFERENT</code> Default value <code>NONE</code> For journeys using some public transport <code>ONLY</code> For journeys without public transport <code>ONLY_WITH_ALTERNATIVES</code> For journeys with specific bike"},{"location":"journey/android/#travelertype","title":"<code>TravelerType</code>","text":"Enum value Description <code>FAST</code> Fast walker <code>LUGGAGE</code> With luggage <code>SLOW</code> Slow walker <code>STANDARD</code> Standard profile <code>WHEELCHAIR</code> Using wheelchair"},{"location":"journey/android/#communicating-with-other-modules-or-the-app","title":"Communicating with other modules or the app","text":"<p>Journey module can exchange data with or navigate to either other modules or the host application. To do this, the host application must initialize <code>Router</code>. This singleton will ensure communication between the different modules or the app. Communication will not occur unless those are registered beforehand:</p> <pre><code>Router.getInstance()\n    ... // Register modules and/or app\n    .init()\n</code></pre>"},{"location":"journey/android/#application","title":"Application","text":"<p>Some routes or callbacks are delegated to the application.  If you have to receive some module data, the <code>Router</code> module must register a receiver with the right parameter:</p> <pre><code>Router.getInstance()\n    .register(appData = appRouterDataImpl) // (1)\n</code></pre> <ol> <li><code>appRouterDataImpl</code> should be the class instance implementing <code>AppRouter.Data</code> interface. We recommand usign a <code>Application</code> subclass.</li> </ol> <p>If you have to handle navigation between modules, the <code>Router</code> module must also register a receiver:</p> <pre><code>Router.getInstance()\n    .register(appUi = appRouterUiImpl) // (1)\n</code></pre> <ol> <li><code>appRouterUiImpl</code> should be the class instance implementing <code>AppRouter.UI</code> interface. We recommand usign a <code>Application</code> subclass.</li> </ol>"},{"location":"journey/android/#result-journeys-roadmap-view-injection","title":"Result journeys / Roadmap view injection","text":"<p>You can inject some external view that will be shown inside the journey module screens. In order to make it happen, you need to add the reference to the <code>injectableViewDelegate</code> as follows:</p> <pre><code>JourneyUI.getInstance().setInjectableViewDelegate(this)\n</code></pre> <p>The interface provides the following methods:</p> <pre><code>override fun allowExternalViewInjectionFor(screen: InjectableScreen, inputData: Any?): ExternalViewInjectionState {\n    // Allow or not the external view injection\n}\n\noverride fun buildExternalViewFor(screen: InjectableScreen, inputData: Any?): View? {\n    // Put the view that needs to be injected in the injectable screen\n}\n</code></pre> <p>Note</p> <p><code>inputData</code> can be of type:</p> <ul> <li><code>SharedJourneysScreenData</code> if the injectable screen is <code>LIST_JOURNEYS</code></li> <li><code>SharedRoadmapScreenData</code> if the injectable screen is <code>ROADMAP</code></li> </ul> <p> <code>SharedJourneysScreenData</code></p> Name Description Type <code>journeysRequest</code> The request parameters object <code>JourneysRequest</code> <code>hasResults</code> Whether the request has results or not <code>Boolean</code> <code>selectedFilterType</code> The selected tab <code>TransportModesFilterType</code> <p> <code>SharedRoadmapScreenData</code></p> Name Description Type <code>journeysRequest</code> The request parameters object <code>JourneysRequest</code> <code>selectedJourney</code> The selected journey data <code>SharedSelectedJourneyModel</code> <p> <code>SharedSelectedJourneyModel</code></p> Name Description Type <code>departureTime</code> The departure time <code>LocalDateTime</code> <code>arrivalTime</code> The arrival time <code>LocalDateTime</code> <code>departureAddress</code> The departure address <code>String</code> <code>arrivalAddress</code> The arrival address <code>String</code> <code>departureCoordinates</code> The departure coordinates <code>LatLng</code> <code>arrivalCoordinates</code> The arrival coordinates <code>LatLng</code> <code>sections</code> The list of journey sections <code>List&lt;SectionModel&gt;</code> <p> <code>SectionModel</code></p> Name Description Type <code>departureTime</code> The departure time <code>LocalDateTime</code> <code>arrivalTime</code> The arrival time <code>LocalDateTime</code> <code>departureAddress</code> The departure address <code>String</code> <code>arrivalAddress</code> The arrival address <code>String</code> <code>departureCoordinates</code> The departure coordinates <code>LatLng?</code> <code>arrivalCoordinates</code> The arrival coordinates <code>LatLng?</code> <code>mobilityType</code> The mobility type <code>MobilityType</code> <code>distance</code> The distance in meters <code>Int</code> <code>duration</code> The duration in seconds <code>Int</code> <code>additionalInformation</code> The extra section information if the mobility type allows it <code>Any?</code> <p>Note</p> <p><code>additionalInformation</code> object in <code>SectionModel</code> can be of type:</p> <ul> <li><code>StreetNetworkSectionModel</code> if the <code>mobilityType</code> is <code>STREET_NETWORK</code></li> <li><code>PublicTransportSectionModel</code> if the <code>mobilityType</code> is <code>PUBLIC_TRANSPORT</code></li> <li><code>CarParkingSectionModel</code> if the <code>mobilityType</code> is <code>CAR_PARKING</code></li> </ul>"},{"location":"journey/android/#roadmap-actions","title":"Roadmap actions","text":"<p>You can add some actions to the roadmap screen which can be configured using this appropriate delegate:</p> <pre><code>JourneyUI.getInstance().setRoadmapDelegate(this)\n</code></pre> <p>The implemented interface offers the following methods:</p> <pre><code>override fun allowedRoadmapScreenActionsFor(inputData: SharedRoadmapScreenData) {\n    // Define the allowed actions on the roadmap screen\n}\n\noverride fun onPrimaryButtonActionTriggered(inputData: SharedRoadmapScreenData) {\n    // Handle primary action button click\n}\n\noverride fun onSecondaryButtonActionTriggered(inputData: SharedRoadmapScreenData) {\n    // Handle secondary action button click\n}\n</code></pre>"},{"location":"journey/android/#roadmap-navigation","title":"Roadmap navigation","text":"<p>A journey may include sections for driving, walking, or cycling. This module provides the option in the Roadmap screen to enhance navigation accuracy using data from an external service. To enable this feature, first enable the <code>external_navigation</code> parameter in the features configuration. Then, implement the following method:</p> <pre><code>override fun openExternalNavigation(\n    fromCoords: LatLng,\n    fromLabel: String,\n    toCoords: LatLng,\n    toLabel: String,\n    mode: ExternalNavigationMode\n) {\n    // launch your external navigation service screen or your custom screen\n}\n</code></pre> Param Type Description <code>fromCoords</code> <code>LatLng</code> Section departure coordinates <code>fromLabel</code> <code>String</code> Section departure label <code>toCoords</code> <code>LatLng</code> Section arrival coordinates <code>toLabel</code> <code>String</code> Section arrival label <code>mode</code> <code>ExternalNavigationMode</code> Section navigation mode <p>Note</p> <p><code>ExternalNavigationMode</code> has 3 modes of transportation that describe the section: <code>BIKE</code>, <code>CAR</code>, and <code>WALKING</code>.</p>"},{"location":"journey/android/#modules","title":"Modules","text":""},{"location":"journey/android/#bookmark","title":"Bookmark","text":"<p> Enabling</p> <p>This module communicates with Bookmark module in order to display favorite stations, journeys and POIs. You should enable the <code>bookmark_mode</code> parameter in the features configuration.</p> <p> Methods</p> <p>The following methods from the <code>AppRouter.UI</code> interface should be implemented by the host application to enable navigation to the Bookmark module or any other custom screen. Note that the parameters of these methods can be omitted as needed.</p> <pre><code>override fun openFavoriteHomeAddViaHost(linkedModule: BookmarkLinkedModule) {\n    // launch the bookmark module screen or your custom screen\n}\n</code></pre> Param Type Description Value <code>linkedModule</code> <code>BookmarkLinkedModule</code> Module triggering the method call <code>BookmarkLinkedModule.AROUND_ME</code> or <code>BookmarkLinkedModule.JOURNEY</code> <pre><code>override fun openFavoriteWorkAddViaHost(linkedModule: LinkedModule) {\n    // launch the bookmark module screen or your custom screen\n}\n</code></pre> Param Type Description Value <code>linkedModule</code> <code>BookmarkLinkedModule</code> Module triggering the method call <code>BookmarkLinkedModule.AROUND_ME</code> or <code>BookmarkLinkedModule.JOURNEY</code>"},{"location":"journey/android/#theming","title":"Theming","text":""},{"location":"journey/android/#app-theme","title":"App theme","text":"<p>The module uses graphical components from Material Design 3. To ensure these components function correctly and get displayed properly on the screen, it is crucial to apply the appropriate parent theme:</p> <pre><code>&lt;style name=\"Theme.App\" parent=\"Theme.Material3.*\"&gt; &lt;!-- (1) --&gt;\n    ...\n&lt;/style&gt;\n</code></pre> <ol> <li>Replace by the specific theme. For example: <code>Theme.Material3.Light.NoActionBar</code></li> </ol>"},{"location":"journey/android/#date-time-picker","title":"Date time picker","text":"<p>The date time picker theme in the Journeys screen is set by the system and cannot really offer yet some flexibility. If a dark mode is applied on the phone, the system will apply predefined colors regardless of the configured colors. If you want to theme the date time picker, you can only add the following in your style or theme file of your app:</p> <pre><code>&lt;style name=\"Journey.DateTimePicker\" parent=\"ThemeOverlay.Material3.MaterialCalendar\"&gt;\n    &lt;item name=\"colorAccent\"&gt;#251942&lt;/item&gt; &lt;!--header background--&gt;\n    &lt;item name=\"android:windowBackground\"&gt;#FFFFFF&lt;/item&gt; &lt;!--calendar background--&gt;\n    &lt;item name=\"android:colorControlActivated\"&gt;#251942&lt;/item&gt; &lt;!--selected day--&gt;\n&lt;/style&gt;\n</code></pre>"},{"location":"journey/android/changelogs/","title":"Journey Android Changelogs","text":"<ul> <li>v5.21.2 (19 Sep 2025)</li> <li>v5.21.1 (18 Sep 2025)</li> <li>v5.21.0 (11 Sep 2025)</li> <li>v5.20.4 (11 Jun 2025)</li> <li>v5.20.3 (05 Jun 2025)</li> <li>v5.20.2 (13 May 2025)</li> <li>v5.20.1 (12 May 2025)</li> <li>v5.20.0 (23 Apr 2025)</li> <li>v5.19.1 (07 Apr 2025)</li> <li>v5.19.0 (24 Mar 2025)</li> <li>v5.18.1 (07 Mar 2025)</li> <li>v5.18.0 (25 Feb 2025)</li> <li>v5.17.3 (03 Feb 2025)</li> <li>v5.17.2 (08 Jan 2024)</li> <li>v5.17.1 (24 Dec 2024)</li> <li>v5.17.0 (02 Dec 2024)</li> <li>v5.16.1 (19 Nov 2024)</li> <li>v5.16.0 (31 Oct 2024)</li> <li>v5.15.1 (11 Oct 2024)</li> <li>v5.15.0 (07 Oct 2024)</li> <li>v5.14.1 (24 Sept 2024)</li> <li>v5.14.0 (09 Sept 2024)</li> <li>v5.13.1 (08 Aug 2024)</li> <li>v5.13.0 (26 Jul 2024)</li> <li>v5.12.3 (24 Jun 2024)</li> <li>v5.12.2 (13 Jun 2024)</li> <li>v5.12.1 (07 Jun 2024)</li> <li>v5.12.0 (21 Mai 2024)</li> <li>v5.11.0 (08 Mar 2024)</li> <li>v5.10.2 (28 Feb 2024)</li> <li>v5.10.1 (09 Feb 2024)</li> <li>v5.10.0 (30 Jan 2024)</li> <li>v5.9.0 (11 Jan 2024)</li> <li>v5.8.0 (14 Nov 2023)</li> <li>v5.7.0 (23 Aug 2023)</li> <li>v5.6.2 (18 Jul 2023)</li> <li>v5.6.1 (30 May 2023)</li> <li>v5.6.0 (30 May 2023)</li> <li>v5.5.2 (11 May 2023)</li> <li>v5.5.1 (27 Apr 2023)</li> <li>v5.5.0 (03 Apr 2023)</li> <li>v5.4.1 (22 Mar 2023)</li> <li>v5.4.0 (17 Mar 2023)</li> <li>v5.3.0 (15 Feb 2023)</li> <li>v5.2.2 (14 Feb 2023)</li> <li>v5.2.1 (07 Feb 2023)</li> <li>v5.2.0 (10 Jan 2023)</li> <li>v5.1.1 (17 Oct 2022)</li> <li>v5.1.0 (29 Sept 2022)</li> <li>v5.0.1 (01 Sept 2022)</li> <li>v5.0.0 (03 Aug 2022)</li> </ul>"},{"location":"journey/android/releases/5.0.0/","title":"Journey Android 5.0.0 Changelog","text":"\ud83d\uddd3 03 Ao\u00fbt 2022"},{"location":"journey/android/releases/5.0.0/#features","title":"Features","text":"<ul> <li>Can consume a globalized configuration</li> <li>Redesign Journeys list, ridesharing offers and roadmap screens</li> <li>Remove Form screen</li> <li>Show Address and distance from position in autocompletion results</li> <li>Support Asynchronous ridesharing requests</li> <li>Add Ridesharing solutions tab</li> <li>Add Refresh journeys solutions </li> </ul>"},{"location":"journey/android/releases/5.0.0/#fixes","title":"Fixes","text":"<ul> <li>Fix contrast color formula</li> </ul>"},{"location":"journey/android/releases/5.0.1/","title":"Journey Android 5.0.1 Changelog","text":"\ud83d\uddd3 01 Sept 2022"},{"location":"journey/android/releases/5.0.1/#fixes","title":"Fixes","text":"<ul> <li>Show notes only for on demand transports</li> </ul>"},{"location":"journey/android/releases/5.1.0/","title":"Journey Android 5.1.0 Changelog","text":"\ud83d\uddd3 29 Sept 2022"},{"location":"journey/android/releases/5.1.0/#features","title":"Features","text":"<ul> <li>Add tabs to filter journey results by transport type</li> <li>Show 3 new detailed bike journey results</li> <li>Can show saved POIs bookmarks</li> </ul>"},{"location":"journey/android/releases/5.1.0/#tasks","title":"Tasks","text":"<ul> <li>Use <code>LocalDateTime</code> instead of <code>DateTime</code></li> </ul>"},{"location":"journey/android/releases/5.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix leave later request</li> </ul>"},{"location":"journey/android/releases/5.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.2.2</code></li> <li><code>com.google.firebase:firebase-crashlytics-gradle</code> &gt; <code>2.9.2</code></li> <li><code>com.google.gms:google-services</code> &gt; <code>4.3.14</code></li> <li><code>org.jfrog.buildinfo:build-info-extractor-gradle</code> &gt; <code>4.28.2</code></li> <li><code>daggerVersion</code> &gt; <code>2.42</code></li> <li><code>fragmentVersion</code> &gt; <code>1.5.2</code></li> <li><code>kotlinCoroutinesVersion</code> &gt; <code>1.6.3</code> </li> <li><code>roomVersion</code> &gt; <code>2.4.3</code></li> <li><code>compileSdk</code> &gt; <code>33</code></li> <li><code>buildToolsVersion</code> &gt; <code>33.0.0</code></li> <li><code>targetSdk</code> &gt; <code>33</code></li> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.5.1</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.5.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.9.0</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.6.1</code></li> <li><code>com.google.android.gms:play-services-maps</code> &gt; <code>18.1.0</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.1</code></li> </ul>"},{"location":"journey/android/releases/5.1.1/","title":"Journey Android 5.1.1 Changelog","text":"\ud83d\uddd3 17 Oct 2022"},{"location":"journey/android/releases/5.1.1/#fixes","title":"Fixes","text":"<ul> <li>Fix publishing of variant modules dependencies</li> </ul>"},{"location":"journey/android/releases/5.10.0/","title":"Journey Android 5.10.0 Changelog","text":"\ud83d\uddd3 30 Jan 2024"},{"location":"journey/android/releases/5.10.0/#features","title":"Features","text":"<ul> <li>Can customize font of screens</li> <li>Add timezone support for date format</li> <li>Add parking instruction in journey solution</li> <li>Disable journey solution when the parking is not available</li> <li>Show parking price when the parking is available</li> </ul>"},{"location":"journey/android/releases/5.10.0/#fixes","title":"Fixes","text":"<ul> <li>Avoid nullability of <code>JourneysRequest</code> on fragments</li> </ul>"},{"location":"journey/android/releases/5.10.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.core:core-ktx</code> &gt; <code>1.12.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.6.2</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.6.2</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.3.2</code></li> <li><code>androidx.room:room-compiler</code> &gt; <code>2.6.1</code></li> <li><code>androidx.room:room-ktx</code> &gt; <code>2.6.1</code></li> <li><code>androidx.room:room-runtime</code> &gt; <code>2.6.1</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.11.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.5.1</code></li> </ul>"},{"location":"journey/android/releases/5.10.1/","title":"Journey Android 5.10.1 Changelog","text":"\ud83d\uddd3 09 Feb 2024"},{"location":"journey/android/releases/5.10.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.7.0</code></li> </ul>"},{"location":"journey/android/releases/5.10.2/","title":"Journey Android 5.10.2 Changelog","text":"\ud83d\uddd3 28 Feb 2024"},{"location":"journey/android/releases/5.10.2/#fixes","title":"Fixes","text":"<ul> <li>Fix initialization of <code>JourneyDisruptionColors</code></li> </ul>"},{"location":"journey/android/releases/5.11.0/","title":"Journey Android 5.11.0 Changelog","text":"\ud83d\uddd3 08 Mar 2024"},{"location":"journey/android/releases/5.11.0/#features","title":"Features","text":"<ul> <li>Can configure park availability frequency</li> </ul>"},{"location":"journey/android/releases/5.11.0/#tasks","title":"Tasks","text":"<ul> <li>Remove useless parameters in BSS and P+R availability API calls</li> </ul>"},{"location":"journey/android/releases/5.12.0/","title":"Journey Android 5.12.0 Changelog","text":"\ud83d\uddd3 21 Mai 2024"},{"location":"journey/android/releases/5.12.0/#features","title":"Features","text":"<ul> <li>Itineraries organized by tab and public transport based sections</li> <li>Alternative api calls for bike, car and ridesharing are launched on request</li> <li>Enhance accessibilty</li> </ul>"},{"location":"journey/android/releases/5.12.0/#task","title":"Task","text":"<ul> <li>Enlarge horizontally main content</li> <li>Update next departures design</li> </ul>"},{"location":"journey/android/releases/5.12.0/#fixes","title":"Fixes","text":"<ul> <li>Fix 'outside of region' string</li> <li>Fix realtime request performance</li> <li>Fix <code>externalNavigation</code> feature configuration</li> <li>Use correctly <code>maxFavoriteAddresses</code> configuration</li> <li>Fix later button when launching the request with a same datetime on some cases</li> <li>Show history when clicking on the clear button</li> <li>Fix order of transport modes and lines for an history entry</li> </ul>"},{"location":"journey/android/releases/5.12.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.14.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.4.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.14.0</code></li> </ul>"},{"location":"journey/android/releases/5.12.1/","title":"Journey Android 5.12.1 Changelog","text":"\ud83d\uddd3 07 Jun 2024"},{"location":"journey/android/releases/5.12.1/#fix","title":"Fix","text":"<ul> <li>Fix <code>nullPointerExceptions</code> occurring on some phones</li> </ul>"},{"location":"journey/android/releases/5.12.2/","title":"Journey Android 5.12.2 Changelog","text":"\ud83d\uddd3 13 Jun 2024"},{"location":"journey/android/releases/5.12.2/#fix","title":"Fix","text":"<ul> <li>Fix arriving now button label text </li> </ul>"},{"location":"journey/android/releases/5.12.3/","title":"Journey Android 5.12.3 Changelog","text":"\ud83d\uddd3 24 Jun 2024"},{"location":"journey/android/releases/5.12.3/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.5.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.15.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.4.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.15.0</code></li> </ul>"},{"location":"journey/android/releases/5.13.0/","title":"Journey Android 5.13.0 Changelog","text":"\ud83d\uddd3 26 Jul 2024"},{"location":"journey/android/releases/5.13.0/#feature","title":"Feature","text":"<ul> <li>Use new bookmark module routes</li> </ul>"},{"location":"journey/android/releases/5.13.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.16.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.5.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.16.0</code></li> </ul>"},{"location":"journey/android/releases/5.13.1/","title":"Journey Android 5.13.1 Changelog","text":"\ud83d\uddd3 08 Aug 2024"},{"location":"journey/android/releases/5.13.1/#fixes","title":"Fixes","text":"<ul> <li>Show 1 minute when a duration is under 1 minute</li> </ul>"},{"location":"journey/android/releases/5.13.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.16.1</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.5.1</code></li> </ul>"},{"location":"journey/android/releases/5.14.0/","title":"Journey Android 5.14.0 Changelog","text":"\ud83d\uddd3 09 Sept 2024"},{"location":"journey/android/releases/5.14.0/#features","title":"Features","text":"<ul> <li>Update the <code>earlier / later</code> feature</li> <li>Add a <code>+1</code> label if a next departure is the next day</li> <li>Add an individual empty state if a destination has no next departures</li> <li>Displays a shimmer effect while loading next departures</li> </ul>"},{"location":"journey/android/releases/5.14.0/#fixes","title":"Fixes","text":"<ul> <li>Remove the systematic use of the default <code>dataFreshness</code> value in <code>JourneysRequest</code></li> <li>Show a dialog feedback after removing a journey from favorites</li> <li>Put a journey with a car and an on demand transport in the correct section</li> <li>Put a journey with a bike sharing service and a public transport in the correct section</li> <li>from is no longer bold for the next departures in a journey</li> <li>in direction of is no longer bold for public transport section in the step by step guidance</li> <li>Fix the shortest duration of all journeys in a tab results</li> <li>Fix the journey path display in the roadmap</li> <li>The shortest duration of all journeys under one minute now displays as <code>1 min</code></li> <li>Displays the cause as the title if a disruption does not have one</li> <li>Fix the overlapping of the real-time icon for the next departures</li> <li>Fix public transport UI in the step by step guidance</li> <li>Show back button when navigating back to the results</li> <li>Fix the colors of quick settings when changing their state</li> </ul>"},{"location":"journey/android/releases/5.14.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.7.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.13.1</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.2</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.4</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.12.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.17.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>2.17.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.3</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.3</code></li> <li><code>androidx.test:core</code> &gt; <code>1.6.1</code></li> </ul>"},{"location":"journey/android/releases/5.14.1/","title":"Journey Android 5.14.1 Changelog","text":"\ud83d\uddd3 24 Sept 2024"},{"location":"journey/android/releases/5.14.1/#fixes","title":"Fixes","text":"<ul> <li>The text on the date/time selection button adjusts based on screen width</li> </ul>"},{"location":"journey/android/releases/5.15.0/","title":"Journey Android 5.15.0 Changelog","text":"\ud83d\uddd3 07 Oct 2024"},{"location":"journey/android/releases/5.15.0/#features","title":"Features","text":"<ul> <li>Add configurable display of congestion for journeys including a car section</li> </ul>"},{"location":"journey/android/releases/5.15.0/#tasks","title":"Tasks","text":"<ul> <li>Removed the display of the shortest journey</li> </ul>"},{"location":"journey/android/releases/5.15.1/","title":"Journey Android 5.15.1 Changelog","text":"\ud83d\uddd3 11 Oct 2024"},{"location":"journey/android/releases/5.15.1/#fixes","title":"Fixes","text":"<ul> <li>Fix duplicated stations in guidance screen </li> <li>Hide bookmark button in roadmap screen when bookmark is disabled</li> <li>Fix crash when going back to guidance screen</li> </ul>"},{"location":"journey/android/releases/5.16.0/","title":"Journey Android 5.16.0 Changelog","text":"\ud83d\uddd3 31 Oct 2024"},{"location":"journey/android/releases/5.16.0/#features","title":"Features","text":"<ul> <li>Show upcoming public transport departures in the roadmap</li> <li>Show public transport delays and updated times in the roadmap</li> </ul>"},{"location":"journey/android/releases/5.16.0/#tasks","title":"Tasks","text":"<ul> <li>Enhance bookmark mode configuration</li> </ul>"},{"location":"journey/android/releases/5.16.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.18.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>2.18.0</code></li> </ul>"},{"location":"journey/android/releases/5.16.1/","title":"Journey Android 5.16.1 Changelog","text":"\ud83d\uddd3 19 Nov 2024"},{"location":"journey/android/releases/5.16.1/#features","title":"Features","text":"<ul> <li>Show autocomplete results based on the user's location</li> </ul>"},{"location":"journey/android/releases/5.17.0/","title":"Journey Android 5.17.0 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"journey/android/releases/5.17.0/#features","title":"Features","text":"<ul> <li>New ridesharing offer UI in the list of offers and in the roadmap</li> <li>Enhance disruption UI in the roadmap and handle html titles</li> <li>Upcoming departures on the roadmap screen align with the route search date and time</li> </ul>"},{"location":"journey/android/releases/5.17.0/#tasks","title":"Tasks","text":"<ul> <li>Elevation graph for a bike section in the roadmap is collapsible</li> <li>Add <code>application_periods</code> in the configuration for toggling the display of disruptions</li> <li>Empty state is displayed when there is no history or favorite journeys on the home screen</li> </ul>"},{"location":"journey/android/releases/5.17.0/#fixes","title":"Fixes","text":"<ul> <li>Fix the journey request using <code>car_no_park</code></li> </ul>"},{"location":"journey/android/releases/5.17.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.9.25</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.2</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.15.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.5</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.7</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.5.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.19.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.2</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.19.0</code></li> </ul>"},{"location":"journey/android/releases/5.17.1/","title":"Journey Android 5.17.1 Changelog","text":"\ud83d\uddd3 24 Dec 2024"},{"location":"journey/android/releases/5.17.1/#fixes","title":"Fixes","text":"<ul> <li>Add a fallback for database migrations</li> </ul>"},{"location":"journey/android/releases/5.17.2/","title":"Journey Android 5.17.2 Changelog","text":"\ud83d\uddd3 08 Jan 2024"},{"location":"journey/android/releases/5.17.2/#fixes","title":"Fixes","text":"<ul> <li>Fix parcelizing JourneysRequest</li> </ul>"},{"location":"journey/android/releases/5.17.3/","title":"Journey Android 5.17.3 Changelog","text":"\ud83d\uddd3 03 Feb 2025"},{"location":"journey/android/releases/5.17.3/#fixes","title":"Fixes","text":"<ul> <li>Fix address data in favorite poi</li> </ul>"},{"location":"journey/android/releases/5.17.3/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.3</code></li> </ul>"},{"location":"journey/android/releases/5.18.0/","title":"Journey Android 5.18.0 Changelog","text":"\ud83d\uddd3 25 Feb 2025"},{"location":"journey/android/releases/5.18.0/#features","title":"Features","text":"<ul> <li>Bike journeys are now sorted into four possible categories: Bike Rental, Bike Rental + Public Transport, Personal Bike + Public Transport and Personal Bike</li> <li>Display of reduce mobility parking places for a parking POI is now configurable</li> <li>Selection of a next departure for the first public transport section in the roadmap</li> </ul>"},{"location":"journey/android/releases/5.18.0/#fixes","title":"Fixes","text":"<ul> <li>Fix the order of lines for a station in autocomplete</li> <li>Fix the missing minute in the journey time calculation</li> <li>Fix the crash when the departure and arrival are the same during a search</li> <li>Fix the price display in the journey list</li> <li>Fix the order of sections in a favorite journey</li> <li>Fix the display of the next departures in a public transport section during step-by-step guidance</li> <li>Fix the display of contextual map buttons during step-by-step guidance</li> <li>Avoid the request for next departures for an end-to-end bike journey</li> <li>Fix the display of parking spaces in a car section when there is no data during step-by-step guidance</li> </ul>"},{"location":"journey/android/releases/5.18.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.10.2</code></li> <li><code>kotlinVersion</code> &gt; <code>2.1.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.8.0</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>buildToolsVersion</code> &gt; <code>35.0.0</code></li> <li><code>daggerVersion</code> &gt; <code>2.55</code></li> <li><code>fragmentVersion</code> &gt; <code>1.8.5</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.15.0</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.4.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.20.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.4</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.20.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.6.3</code></li> </ul>"},{"location":"journey/android/releases/5.18.1/","title":"Journey Android 5.18.1 Changelog","text":"\ud83d\uddd3 07 Mar 2025"},{"location":"journey/android/releases/5.18.1/#fixes","title":"Fixes","text":"<ul> <li>Fix an old migration in the database</li> <li>Fix the formatting of a journey's duration</li> </ul>"},{"location":"journey/android/releases/5.19.0/","title":"Journey Android 5.19.0 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"journey/android/releases/5.19.0/#features","title":"Features","text":"<ul> <li>New bike parking section in the roadmap. The display of this section is configurable</li> </ul>"},{"location":"journey/android/releases/5.19.0/#tasks","title":"Tasks","text":"<ul> <li>Replaced the Fast type of a specific bike journey with Shortest</li> </ul>"},{"location":"journey/android/releases/5.19.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>fragmentVersion</code> &gt; <code>1.8.6</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.1</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.7.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.21.0</code></li> </ul>"},{"location":"journey/android/releases/5.19.1/","title":"Journey Android 5.19.1 Changelog","text":"\ud83d\uddd3 7 Apr 2025"},{"location":"journey/android/releases/5.19.1/#fixes","title":"Fixes","text":"<ul> <li>Fix the computed percentage of the bike section in a specific bike journey</li> </ul>"},{"location":"journey/android/releases/5.2.0/","title":"Journey Android 5.2.0 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"journey/android/releases/5.2.0/#features","title":"Features","text":"<ul> <li>Add a tertiary color </li> <li>Add step by step guidance</li> </ul>"},{"location":"journey/android/releases/5.2.0/#tasks","title":"Tasks","text":"<ul> <li>Replace <code>Gson</code> by <code>kotlinx.serialization</code></li> <li>Prefix all layouts by <code>navitia_journey_</code></li> <li>Token is passed via <code>init()</code> instead of configuration file or object</li> </ul>"},{"location":"journey/android/releases/5.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle-wrapper</code> &gt; <code>7.4</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.3.1</code></li> <li><code>androidx.navigation:navigation-fragment-ktx</code> &gt; <code>2.5.3</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.2</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.4.1</code></li> </ul>"},{"location":"journey/android/releases/5.2.1/","title":"Journey Android 5.2.1 Changelog","text":"\ud83d\uddd3 07 Feb 2023"},{"location":"journey/android/releases/5.2.1/#fixes","title":"Fixes","text":"<ul> <li>Fix showing of back button when journey is opened with another module</li> </ul>"},{"location":"journey/android/releases/5.2.2/","title":"Journey Android 5.2.2 Changelog","text":"\ud83d\uddd3 14 Feb 2023"},{"location":"journey/android/releases/5.2.2/#fixes","title":"Fixes","text":"<ul> <li>Fix step by step guidance</li> <li>Fix missing walking icon</li> <li>Fix next departures not showing</li> <li>Fix public transport tab always showing</li> </ul>"},{"location":"journey/android/releases/5.20.0/","title":"Journey Android 5.20.0 Changelog","text":"\ud83d\uddd3 23 Apr 2025"},{"location":"journey/android/releases/5.20.0/#features","title":"Features","text":"<ul> <li>Show notes of public transport sections in roadmap</li> </ul>"},{"location":"journey/android/releases/5.20.0/#fixes","title":"Fixes","text":"<ul> <li>Fixed truncated journey duration</li> </ul>"},{"location":"journey/android/releases/5.20.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.11.1</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.9.1</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.7.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.22.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.5</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.21.0</code></li> <li><code>androidx.room:room-compiler</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-testing</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-ktx</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-runtime</code> &gt; <code>2.7.0</code></li> <li><code>androidx.core:core-ktx</code>&gt; <code>1.16.0</code></li> </ul>"},{"location":"journey/android/releases/5.20.1/","title":"Journey Android 5.20.1 Changelog","text":"\ud83d\uddd3 12 May 2025"},{"location":"journey/android/releases/5.20.1/#fixes","title":"Fixes","text":"<ul> <li>Fixed roadmap departures not triggered on click</li> <li>Fixed error message shown on wrong tab</li> <li>Fixed navigation buttons not displayed for one section journeys</li> <li>Fixed error message displayed over journeys list</li> <li>Fixed journeys list not properly returned back to its previous state</li> <li>Fixed infinite loader on bike tab</li> </ul>"},{"location":"journey/android/releases/5.20.2/","title":"Journey Android 5.20.2 Changelog","text":"\ud83d\uddd3 14 May 2025"},{"location":"journey/android/releases/5.20.2/#fixes","title":"Fixes","text":"<ul> <li>Fix crash when not finding journey in roadmap screen</li> <li>Fix enum serialization</li> <li>Fix same id error for recycler view</li> <li>Fix ridesharing journey not found behavior</li> </ul>"},{"location":"journey/android/releases/5.20.3/","title":"Journey Android 5.20.2 Changelog","text":"\ud83d\uddd3 14 May 2025"},{"location":"journey/android/releases/5.20.3/#fixes","title":"Fixes","text":"<ul> <li>Fixed binding instance not properly destroyed</li> <li>Fixed crash when destroying guidance screen view</li> <li>Fixed roadmap not reset before handling availability</li> </ul>"},{"location":"journey/android/releases/5.20.4/","title":"Journey Android 5.20.4 Changelog","text":"\ud83d\uddd3 11 Jun 2025"},{"location":"journey/android/releases/5.20.4/#fixes","title":"Fixes","text":"<ul> <li>Fixed same id for recycler view</li> <li>Fixed enum serialization</li> </ul>"},{"location":"journey/android/releases/5.21.0/","title":"Journey Android 5.21.0 Changelog","text":"\ud83d\uddd3 11 Sep 2025"},{"location":"journey/android/releases/5.21.0/#features","title":"Features","text":"<ul> <li>Added a new Journey Preferences screen.</li> <li>The minimum walking duration display can now be configured.</li> <li>The kCal tag is now hidden when the PRM option is enabled.</li> <li>The Step-by-step launch button title can now be customized.</li> <li>Transport mode icons in tabs can now be configured.</li> <li>Transport modes can now be excluded from traffic info subscriptions.</li> </ul>"},{"location":"journey/android/releases/5.21.0/#fixes","title":"Fixes","text":"<ul> <li>Correctly display \"1 minute\" instead of a long string when the walking duration equals one minute.</li> </ul>"},{"location":"journey/android/releases/5.21.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.data:expert</code>&gt; <code>3.7.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code>&gt; <code>2.23.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code>&gt; <code>2.6.6</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code>&gt; <code>1.22.0</code></li> </ul>"},{"location":"journey/android/releases/5.21.1/","title":"Journey Android 5.21.1 Changelog","text":"\ud83d\uddd3 18 Sep 2025"},{"location":"journey/android/releases/5.21.1/#fixes","title":"Fixes","text":"<ul> <li>Fixed traveler type value not reset when showing the screen</li> </ul>"},{"location":"journey/android/releases/5.21.2/","title":"Journey Android 5.21.2 Changelog","text":"\ud83d\uddd3 19 Sep 2025"},{"location":"journey/android/releases/5.21.2/#fixes","title":"Fixes","text":"<ul> <li>Fixed reload data after preferences changed</li> </ul>"},{"location":"journey/android/releases/5.3.0/","title":"Journey Android 5.3.0 Changelog","text":"\ud83d\uddd3 15 Feb 2023"},{"location":"journey/android/releases/5.3.0/#features","title":"Features","text":"<ul> <li>Can bookmark a journey</li> <li>A buy button can be configured and added to the roadmap</li> </ul>"},{"location":"journey/android/releases/5.3.0/#tasks","title":"Tasks","text":"<ul> <li>Rename <code>JourneyConfiguration.featuresConfiguration</code> by <code>JourneyConfiguration.features</code></li> </ul>"},{"location":"journey/android/releases/5.3.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.6.1</code></li> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; <code>1.2.0</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.2</code></li> <li><code>androidx.test.ext:junit</code> &gt; <code>1.1.5</code></li> </ul>"},{"location":"journey/android/releases/5.4.0/","title":"Journey Android 5.4.0 Changelog","text":"\ud83d\uddd3 17 Mar 2023"},{"location":"journey/android/releases/5.4.0/#features","title":"Features","text":"<ul> <li>Add events analytics</li> <li>Show journeys history</li> <li>Show favorite journeys</li> <li>Show favorite addresses and POIs in auto completion</li> <li>Add <code>carNoPark</code> section mode support</li> </ul>"},{"location":"journey/android/releases/5.4.0/#fixes","title":"Fixes","text":"<ul> <li>Fix request of ridesharing journeys without any common transportation</li> <li>Fix autocompletion search</li> </ul>"},{"location":"journey/android/releases/5.4.0/#tasks","title":"Tasks","text":"<ul> <li>Change configuration color variable names</li> <li>Add bike configuration colors</li> <li>Add direct path modes configuration support</li> <li>Ridesharing journeys request is made independent from the public transport request</li> <li>Remove <code>addPoiInfos</code>, <code>directPathModes</code>, <code>firstSectionModes</code>, <code>forbiddenUris</code> and <code>lastSectionModes</code> from <code>JourneysRequest</code></li> </ul>"},{"location":"journey/android/releases/5.4.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.recyclerview:recyclerview</code> &gt;<code>1.3.0</code></li> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; <code>1.2.1</code></li> </ul>"},{"location":"journey/android/releases/5.4.1/","title":"Journey Android 5.4.1 Changelog","text":"\ud83d\uddd3 22 Mar 2023"},{"location":"journey/android/releases/5.4.1/#fixes","title":"Fixes","text":"<ul> <li>Fix back button not showing when searchOnly param is enabled</li> <li>Fix car park availability not displayed in roadmap car section</li> </ul>"},{"location":"journey/android/releases/5.5.0/","title":"Journey Android 5.5.0 Changelog","text":"\ud83d\uddd3 03 Apr 2023"},{"location":"journey/android/releases/5.5.0/#feature","title":"Feature","text":"<ul> <li>Show default bike journey if there is no specific bike journey solutions</li> </ul>"},{"location":"journey/android/releases/5.5.0/#fixes","title":"Fixes","text":"<ul> <li>Fix hiding of bottom sheet in roadmap for a bike journey</li> <li>Fix display of real time icon in journey</li> <li>Disable later button if it's not available</li> <li>Fix duplication of addresses in history</li> <li>Fix infinite loader when the user avoid disruptions for a journey</li> </ul>"},{"location":"journey/android/releases/5.5.1/","title":"Journey Android 5.5.1 Changelog","text":"\ud83d\uddd3 27 Apr 2023"},{"location":"journey/android/releases/5.5.1/#fixes","title":"Fixes","text":"<ul> <li>Fix home and work buttons are showing when bookmark mode is disabled</li> </ul>"},{"location":"journey/android/releases/5.5.2/","title":"Journey Android 5.5.2 Changelog","text":"\ud83d\uddd3 11 May 2023"},{"location":"journey/android/releases/5.5.2/#tasks","title":"Tasks","text":"<ul> <li>Add missing navitia params in <code>JourneysRequest</code> object</li> </ul>"},{"location":"journey/android/releases/5.5.2/#fixes","title":"Fixes","text":"<ul> <li>Ridesharing journeys not shown when no pt results are given</li> </ul>"},{"location":"journey/android/releases/5.6.0/","title":"Journey Android 5.6.0 Changelog","text":"\ud83d\uddd3 30 May 2023"},{"location":"journey/android/releases/5.6.0/#task","title":"Task","text":"<ul> <li>Hide times in ridesharing offers and roadmap</li> </ul>"},{"location":"journey/android/releases/5.6.0/#fixes","title":"Fixes","text":"<ul> <li>Fix disruption formatting in roadmap</li> </ul>"},{"location":"journey/android/releases/5.6.1/","title":"Journey Android 5.6.1 Changelog","text":"\ud83d\uddd3 30 May 2023"},{"location":"journey/android/releases/5.6.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; <code>1.2.3</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.8.1</code></li> </ul>"},{"location":"journey/android/releases/5.6.2/","title":"Journey Android 5.6.2 Changelog","text":"\ud83d\uddd3 18 Jul 2023"},{"location":"journey/android/releases/5.6.2/#features","title":"Features","text":"<ul> <li>Show number of offers in journey solutions</li> <li>Add display of ridesharing price in configuration</li> </ul>"},{"location":"journey/android/releases/5.6.2/#fixes","title":"Fixes","text":"<ul> <li>Re-show ridesharing time on a offer</li> </ul>"},{"location":"journey/android/releases/5.7.0/","title":"Journey Android 5.7.0 Changelog","text":"\ud83d\uddd3 23 Aug 2023"},{"location":"journey/android/releases/5.7.0/#features","title":"Features","text":"<ul> <li>Add specific error messages when a search request failed</li> <li>Update automatically walking instruction in the step by step guidance based on user location</li> <li>Can configure and show in a autocompletion result if this is included in the main region of the coverage or not</li> <li>Show if a journey contains a low emission zone for a car section</li> <li>Add a deep link to an map application for a walking, car or bike section in roadmap</li> <li>Show nearby bus station on the map in roadmap</li> <li>Show station entrance and station exit on the map in roadmap</li> <li>Show vehicle positions on the map in roadmap</li> <li>Show next departures beyond 1 hour</li> <li>Show icon for air-conditioned lines</li> <li>Update automatically the cards in guidance based on user location</li> <li>Add button to toggle between satellite and standard map types</li> <li>Can subscribe to a traffic alert when a journey is bookmarked</li> <li>Show the number of available ridesharing for a journey</li> <li>Hide tabs if corresponding filter is disabled</li> </ul>"},{"location":"journey/android/releases/5.7.0/#fixes","title":"Fixes","text":"<ul> <li>Fix display of location button in roadmap</li> <li>Fix initial UI state when navigating from guidance back to roadmap</li> <li>Fix display of an empty state right before the journey search results</li> <li>Fix bottom sheet scroll for walking instructions in guidance</li> <li>Fix display of lines when a searched station is added to history</li> <li>Fix departure and arrival field states</li> <li>Fix display of line icon in an <code>SpannableString</code> in guidance</li> </ul>"},{"location":"journey/android/releases/5.7.0/#tasks","title":"Tasks","text":"<ul> <li>Add custom analytics events</li> <li>Update <code>JourneyEnvironment</code> which can have <code>SBX</code>, <code>CUS</code> and <code>PROD</code></li> <li>Delegate is no more accessible</li> <li>Add navigation listener and remove navigation callbacks from <code>JourneyUI.init()</code></li> </ul>"},{"location":"journey/android/releases/5.7.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.8.21</code></li> <li><code>gradle-wrapper</code> &gt; <code>8.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.0.2</code></li> <li><code>minSdk</code> &gt; <code>23</code></li> <li><code>daggerVersion</code> &gt; <code>2.44</code></li> <li><code>fragmentVersion</code> &gt; <code>1.6.1</code></li> <li><code>kotlinCoroutinesVersion</code> &gt; <code>1.6.4</code></li> <li><code>navigationVersion</code> &gt; <code>2.7.0</code></li> <li><code>roomVersion</code> &gt; <code>2.5.2</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.3.1</code></li> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; Removed</li> </ul>"},{"location":"journey/android/releases/5.8.0/","title":"Journey Android 5.8.0 Changelog","text":"\ud83d\uddd3 14 Nov 2023"},{"location":"journey/android/releases/5.8.0/#feature","title":"Feature","text":"<ul> <li>Show walking distance in journey summary</li> </ul>"},{"location":"journey/android/releases/5.8.0/#fix","title":"Fix","text":"<ul> <li>Show next departures above an hour</li> </ul>"},{"location":"journey/android/releases/5.8.0/#tasks","title":"Tasks","text":"<ul> <li>Next departures frequency are customizable</li> <li>App id and screen id trackers added</li> <li>Disruptions level color configuration added</li> </ul>"},{"location":"journey/android/releases/5.8.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.1.1</code></li> <li><code>compileSdk</code> &gt; <code>34</code></li> <li><code>buildToolsVersion</code> &gt; <code>34.0.0</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.4.0</code></li> </ul>"},{"location":"journey/android/releases/5.9.0/","title":"Journey Android 5.9.0 Changelog","text":"\ud83d\uddd3 11 Jan 2024"},{"location":"journey/android/releases/5.9.0/#features","title":"Features","text":"<ul> <li>Show a warning when a journey is starting the next day</li> <li>Can inject contextuals views in the journeys list and the roadmap</li> </ul>"},{"location":"journey/android/releases/5.9.0/#fixes","title":"Fixes","text":"<ul> <li>Fix label for car step in step by step guidance</li> <li>Fix time for ridesharing tab</li> <li>Fix journeys cache</li> </ul>"},{"location":"journey/android/releases/5.9.0/#tasks","title":"Tasks","text":"<ul> <li>Add proguard rules for Crashlytics</li> <li>Add proguard rules for <code>java.io.Serializable</code></li> <li>Use <code>FusedLocationProviderClient</code> for user location</li> </ul>"},{"location":"journey/android/releases/5.9.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.google.maps.android:android-maps-utils</code> &gt; <code>3.5.3</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.4.1</code></li> </ul>"},{"location":"journey/ios/","title":"Journey iOS","text":""},{"location":"journey/ios/#setup","title":"Setup","text":"<p>In your project, add the following lines to your <code>Podfile</code>:</p> <pre><code>source 'https://github.com/CocoaPods/Specs.git' # Default Cocoapods URL\nsource 'https://github.com/hove-io/Podspecs.git' # Journey podspec URL\n\ntarget 'YOUR_PROJECT_SCHEME' do\n  pod 'JourneySDK', '6.3.0' # Journey Pod definition\nend\n\n# Required for XCFramework\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n    end\n  end\nend\n</code></pre> <p>Using your CLI, run <code>pod install</code> in your project directory.</p>"},{"location":"journey/ios/#implementation","title":"Implementation","text":"<p>Warning</p> <p>Make sure to read the modules configuration section before proceeding!</p> <p>This module is set up by calling <code>JourneySdk.shared.initialize()</code> method which takes the following parameters:</p> Name Required Description Type Example <code>coverage</code> Navitia coverage <code>String</code> <code>fr-idf</code> <code>token</code> Navitia token <code>String</code> <code>ABCD-1234-...</code> <code>timeZone</code> Time zone <code>String</code> <code>Europe/Paris</code> <code>env</code> Navitia environment <code>String</code> <code>PROD</code> <code>colors</code> Define the custom colors <code>JourneyColorsConfiguration</code> - <code>unifiedColors</code> Define the custom colors <code>UnifiedColorsConfiguration</code> - <code>fonts</code> Use custom fonts <code>JourneyFontsConfiguration</code> - <code>lineResources</code> List of transport lines resource IDs <code>[LineResource]</code> - <code>modeResources</code> List of transport modes resource IDs <code>[ModeResource]</code> - <code>transportCategories</code> List of supported transport modes <code>[TransportCategory]</code> - <code>osmRegion</code> Define the region <code>[OSMRegion]</code> - <code>providerResources</code> Transport providers configuration <code>[ProviderResource]</code> - <code>titleResources</code> Screens titles customization <code>JourneyTitlesResources</code> - <code>iconsResources</code> List of icon resource names <code>JourneyIconsResources</code> - <code>transportCategories</code> List of supported transport modes <code>[TransportCategory]</code> - <code>features</code> Enable/disable some features <code>JourneyFeaturesConfiguration</code> - <p>You can also call the <code>initialize()</code> method with the global JSON configuration file added to your application bundle:</p> Name Required Description Type Example <code>configurationJsonFile</code> Global configuration JSON file name <code>String</code> <code>configuration.json</code> Example Configuration with fileManual configuration <pre><code>do {\n    try JourneySdk.shared.initialize(\n        token: \"your_token\", \n        configurationJsonFile: \"journey_configuration.json\"\n    )                                                               \n} catch {\n    Logger.error(\"%@\", String(\n        format: \"Journey SDK cannot be initialized! %@\", \n        error.localizedDescription\n    ))\n}                                   \n</code></pre> <pre><code>do {\n    let transportCategories = [TransportCategory(\n        modules: [\"journey\"],\n        iconRes: \"ic_section_mode_metro\",\n        nameRes: \"metro\",\n        selected: true,\n        modes: [TransportCategoryMode(\n            physical: TransportPhysicalMode(id \"physical_mode:Metro\"),\n            commercial: TransportCommercialMode(\n                id: \"commercial_mode:Metro\", \n                name: \"Metro\"\n            )\n        )],\n        networks: [],\n        firstSectionModes: [\"walking\"],\n        lastSectionModes: [\"walking\"],\n        directPathModes: [\"walking\"],\n        addPoiInfos: []\n    )]\n    let journeyColorsConfiguration = JourneyColorsConfiguration(\n        primary: \"#88819f\", \n        secondary: \"#8faa96\"\n    )\n\n    try JourneySdk.shared.initialize(\n        coverage: \"fr-idf\",\n        token: \"your_token\",\n        timeZone: \"your_country\",\n        env: \"PROD\",\n        colors: journeyColorsConfiguration,\n        transportCategories: transportCategories\n    )                                                                  \n} catch {\n    Logger.error(\"%@\", String(\n        format: \"Journey SDK cannot be initialized! %@\", \n        error.localizedDescription\n    ))\n}                                   \n</code></pre>"},{"location":"journey/ios/#events-tracking","title":"Events tracking","text":"<p>In order to receive the list of generated events within Journey module, you have to assign the instance of the tracker to the Journey module instance as follows and implement the required methods:</p> <pre><code>JourneySdk.shared.tracker = self\n</code></pre>"},{"location":"journey/ios/#launching","title":"Launching","text":"<p>This module has a single entry point. The parameter <code>showBack</code> handles the back button visibility on the first screen.</p> <pre><code>guard let journeyViewController = JourneySdk.shared.rootViewController else {\n  return nil\n}\njourneyViewController.showBack = false // Hide back button embedded in the first screen\n</code></pre> <p>If you want to use the <code>rootViewController</code> as a <code>ChildViewController</code> of your <code>ViewController</code>, you should embed it in an <code>NavigationController</code>. </p> Using a <code>NavigationController</code>Using a <code>ChildViewController</code> <pre><code>navigationController?.pushViewController(journeyViewController, animated: false)\n</code></pre> <pre><code>yourViewController.addChild(UINavigationController(\n    rootViewController: journeyViewController\n))\n</code></pre>"},{"location":"journey/ios/#journeysrequest","title":"<code>JourneysRequest</code>","text":"<p>The <code>JourneysRequest</code> object allows to configure the first itinerary search at screen launch. It has the following parameters:</p> Name Description Type Default <code>additionalTimeAfterFirstSectionTaxi</code> Additional time after first taxi section <code>Int</code> <code>nil</code> <code>additionalTimeBeforeLastSectionTaxi</code> Additional time before last taxi section <code>Int</code> <code>nil</code> <code>allowedId</code> Allowed Navitia object IDs <code>Set&lt;String&gt;</code> <code>[]</code> <code>bikeSpeed</code> Bike speed <code>Float</code> <code>nil</code> <code>bssSpeed</code> BSS speed <code>Float</code> <code>nil</code> <code>carNoParkSpeed</code> Car no park speed <code>Float</code> <code>nil</code> <code>carSpeed</code> Car speed <code>Float</code> <code>nil</code> <code>count</code> The number of journeys to be displayed <code>Int</code> <code>nil</code> <code>dataFreshness</code> To indicate if theoretical or realtime data are requested <code>DataFreshness</code> <code>.base_schedule</code> <code>dateTime</code> Requested date and time for journey results <code>DateTime</code> <code>nil</code> <code>dateTimeRepresents</code> Whether the datetime represents the departure or arrival <code>DateTimeRepresents</code> <code>.departure</code> <code>depth</code> The request depth <code>Int</code> <code>nil</code> <code>destinationId</code> Destination Navitia ID <code>String</code> <code>\"\"</code> <code>destinationLabel</code> Destination label, if not set the address will be displayed <code>String</code> <code>\"\"</code> <code>directPath</code> Set the direct path of the journey <code>DirectPath</code> <code>.indifferent</code> <code>disruptionActive</code> Check on Navitia <code>Bool</code> <code>nil</code> <code>equipmentDetails</code> Check on Navitia <code>Bool</code> <code>nil</code> <code>freeRadiusFrom</code> Check on Navitia <code>Int</code> <code>nil</code> <code>freeRadiusTo</code> Check on Navitia <code>Int</code> <code>nil</code> <code>isJourneySchedules</code> Check on Navitia <code>Bool</code> <code>nil</code> <code>maxBikeDirectPathDuration</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxBikeDurationToPt</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxBssDirectPathDuration</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxBssDurationToPt</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxCarDirectPathDuration</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxCarDurationToPt</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxCarNoParkDirectPathDuration</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxCarNoParkDurationToPt</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxDuration</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxDurationToPt</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxNbJourneys</code> The max number of journeys to be displayed <code>Int</code> <code>nil</code> <code>maxNbTransfers</code> The max number of public transport transfers <code>Int</code> <code>nil</code> <code>maxRidesharingDirectPathDuration</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxRidesharingDurationToPt</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxTaxiDirectPathDuration</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxTaxiDurationToPt</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxWaitingDuration</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxWalkingDirectPathDuration</code> Check on Navitia <code>Int</code> <code>nil</code> <code>maxWalkingDurationToPt</code> Check on Navitia <code>Int</code> <code>nil</code> <code>minNbJourneys</code> The min number of journeys to be displayed <code>Int</code> <code>nil</code> <code>minNbTransfers</code> The min number of public transport transfers <code>Int</code> <code>nil</code> <code>originId</code> Origin Navitia ID <code>String</code> <code>\"\"</code> <code>originLabel</code> Origin label, if not set the address will be displayed <code>String</code> <code>\"\"</code> <code>ridesharingSpeed</code> Ridesharing speed <code>Float</code> <code>nil</code> <code>taxiSpeed</code> Taxi speed <code>Float</code> <code>nil</code> <code>timeframeDuration</code> Taxi speed <code>Int</code> <code>nil</code> <code>travelerType</code> Traveler type <code>TravelerType</code> <code>.standard</code> <code>walkingSpeed</code> Walking speed <code>Float</code> <code>nil</code> <code>wheelchair</code> Check on Navitia <code>Bool</code> <code>nil</code>"},{"location":"journey/ios/#datafreshness","title":"<code>DataFreshness</code>","text":"Enum value Description <code>base_schedule</code> Get disrupted journeys with the given results <code>realtime</code> Avoid disrupted journeys"},{"location":"journey/ios/#datetimerepresents","title":"<code>DateTimeRepresents</code>","text":"Enum value Description <code>arrival</code> The requestd datetime represents the arrival of the journey <code>departure</code> The requested datetime represents the departure of the journey"},{"location":"journey/ios/#directpath","title":"<code>DirectPath</code>","text":"Enum value Description <code>indifferent</code> Default value <code>none</code> For journeys using some public transport <code>only</code> For journeys without public transport <code>onlyWithAlternatives</code> For journeys with specific bike"},{"location":"journey/ios/#travelertype","title":"<code>TravelerType</code>","text":"Enum value Description <code>fast_walker</code> Fast walker <code>luggage</code> With luggage <code>slow_walker</code> Slow walker <code>standard</code> Standard profile <code>wheelchair</code> Using wheelchair"},{"location":"journey/ios/#communicating-with-other-modules-or-the-app","title":"Communicating with other modules or the app","text":"<p>Bookmark module can exchange data with or navigate to either other modules or the host application. To do this, the host application must initialize <code>Router</code>. This singleton will ensure communication between the different modules or the app. Communication will not occur unless those are registered beforehand:</p> <pre><code>try Router.shared\n    .register(journey: JourneySdk.shared.journeyRouter)\n    ... // Register modules and/or app\n    .initialize()\n</code></pre>"},{"location":"journey/ios/#application","title":"Application","text":""},{"location":"journey/ios/#result-journeys-roadmap-view-injection","title":"Result journeys / Roadmap view injection","text":"<p>You can inject some external view that will be shown inside the journey module screens. In order to make it happen, you need to add the reference to the <code>injectableViewDelegate</code> as follows:</p> <pre><code>JourneySdk.shared.injectableViewDelegate = self\n</code></pre> <p>The protocol provides the following methods:</p> <pre><code>func allowExternalViewInjectionFor(screen: InjectableScreen, inputData: Any?) -&gt; ExternalViewInjectionState {\n    // Allow or not the external view injection\n}\n</code></pre> <pre><code>func buildExternalViewFor(screen: InjectableScreen, inputData: Any?) -&gt; UIView? {\n    // Put the view that needs to be injected in the injectable screen\n}\n</code></pre> <p>Note</p> <p>The <code>inputData</code> can be of type:</p> <ul> <li><code>SharedJourneysScreenData</code> if the injectable screen is <code>listJourneys</code></li> <li><code>SharedRoadmapScreenData</code> if the injectable screen is <code>roadmap</code></li> </ul> <p> <code>SharedJourneysScreenData</code></p> Name Description Type <code>journeysRequest</code> The request parameters object <code>JourneysRequest</code> <code>hasResults</code> Whether the request has results or not <code>Bool</code> <code>selectedFilterType</code> The selected tab <code>TransportModesFilterType</code> <p> <code>SharedRoadmapScreenData</code></p> Name Description Type <code>journeysRequest</code> The request parameters object <code>JourneysRequest</code> <code>selectedJourney</code> The selected journey data <code>SharedSelectedJourneyModel</code> <p> <code>SharedSelectedJourneyModel</code></p> Name Description Type <code>departureTime</code> The departure time <code>Date</code> <code>arrivalTime</code> The arrival time <code>Date</code> <code>departureAddress</code> The departure address <code>String</code> <code>arrivalAddress</code> The arrival address <code>String</code> <code>departureCoordinates</code> The departure coordinates <code>CLLocationCoordinate2D</code> <code>arrivalCoordinates</code> The arrival coordinates <code>CLLocationCoordinate2D</code> <code>sections</code> The list of journey sections <code>[SectionModel]</code> <p> <code>SectionModel</code></p> Name Description Type <code>departureTime</code> The departure time <code>Date</code> <code>arrivalTime</code> The arrival time <code>Date</code> <code>departureAddress</code> The departure address <code>String</code> <code>arrivalAddress</code> The arrival address <code>String</code> <code>departureCoordinates</code> The departure coordinates <code>CLLocationCoordinate2D</code> <code>arrivalCoordinates</code> The arrival coordinates <code>CLLocationCoordinate2D</code> <code>mobilityType</code> The mobility type <code>MobilityType</code> <code>distance</code> The distance in meters <code>Int</code> <code>duration</code> The duration in seconds <code>Int</code> <code>additionalInformation</code> The extra section information if the mobility type allows it <code>Any?</code> <p>Note</p> <p>Please note that the <code>additionalInformation</code> object can be of type:</p> <ul> <li><code>StreetNetworkSectionModel</code> if the <code>mobilityType</code> is <code>streetNetwork</code></li> <li><code>PublicTransportSectionModel</code> if the <code>mobilityType</code> is <code>public_transport</code></li> <li><code>CarParkingSectionModel</code> if the <code>mobilityType</code> is <code>carParking</code></li> </ul>"},{"location":"journey/ios/#roadmap-actions","title":"Roadmap actions","text":"<p>You can add some actions to the roadmap screen which can be configured using this appropriate delegate:</p> <pre><code>JourneySdk.shared.delegate = self\n</code></pre> <p>The designated protocol offers the following methods:</p> <pre><code>func allowedRoadmapScreenActionsFor(inputData: SharedRoadmapScreenData) -&gt; AllowedRoadmapScreenActions {\n    // Define the allowed actions on the roadmap screen\n}\n\nfunc onPrimaryButtonActionTriggered(inputData: SharedRoadmapScreenData) {\n    // Handle primary action button click\n}\n\nfunc onSecondaryButtonActionTriggered(inputData: SharedRoadmapScreenData) {\n    // Handle secondary action button click\n}\n</code></pre>"},{"location":"journey/ios/#roadmap-navigation","title":"Roadmap navigation","text":"<p>A journey may include sections for driving, walking, or cycling. This module provides the option in the Roadmap screen to enhance navigation accuracy using data from an external service. To enable this feature, first enable the <code>external_navigation</code> parameter in the features configuration. Then, implement the following method:</p> <pre><code>func onLaunchExternalNavigationApp(from: CLLocationCoordinate2D, to: CLLocationCoordinate2D, navigationMode: JourneyExternalNavigationMode) {\n    // launch your external navigation service screen or your custom screen\n}\n</code></pre> Param Type Description <code>from</code> <code>LatLng</code> Section departure coordinates <code>toCoords</code> <code>LatLng</code> Section arrival coordinates <code>navigationMode</code> <code>JourneyExternalNavigationMode</code> Section navigation mode <p>Note</p> <p><code>JourneyExternalNavigationMode</code> has 3 modes of transportation that describe the section: <code>bike</code>, <code>car</code>, and <code>walking</code>.</p>"},{"location":"journey/ios/#modules","title":"Modules","text":""},{"location":"journey/ios/#bookmark","title":"Bookmark","text":"<p> Enabling</p> <p>Journey module communicates with Bookmark module in order to display favorite stations, journeys and POIs. You should enable the <code>bookmark_mode</code> parameter in the features configuration.</p> <p> Methods</p> <p>The following methods from the <code>CustomJourneyBookmarkDelegate</code> interface should be implemented by the host application to enable navigation to the Bookmark module or any other custom screen. Note that the parameters of these methods can be omitted as needed.</p> <p>Warning</p> <p>If you don't implement this protocol, the Bookmark module will be shown.</p> <p>This method is called after click on the favorite home shortcut button, in case it is empty.</p> <pre><code>func onHomeAddressCompletionRequested(module: Router.BookmarkLinkedModule) {\n    // launch the bookmark module screen or your custom screen\n}\n</code></pre> Param Type Description Value <code>module</code> <code>Router.BookmarkLinkedModule</code> Module triggering the method call <code>Router.BookmarkLinkedModule.aroundMe</code> or <code>Router.BookmarkLinkedModule.journey</code> <p>This method is called after click on the favorite work shortcut button, in case it is empty.</p> <pre><code>func onWorkAddressCompletionRequested(module: Router.BookmarkLinkedModule) {\n    // launch the bookmark module screen or your custom screen\n}\n</code></pre> Param Type Description Value <code>module</code> <code>Router.BookmarkLinkedModule</code> Module triggering the method call <code>Router.BookmarkLinkedModule.aroundMe</code> or <code>Router.BookmarkLinkedModule.journey</code>"},{"location":"journey/ios/changelogs/","title":"Journey iOS Changelogs","text":"<ul> <li>v6.3.0 (11 Sep 2025)</li> <li>v6.2.1 (07 May 2025)</li> <li>v6.2.0 (22 Apr 2025)</li> <li>v6.1.0 (24 Mar 2025)</li> <li>v6.0.0 (24 Feb 2025)</li> <li>v5.17.4 (12 Feb 2025)</li> <li>v5.17.3 (04 Feb 2025)</li> <li>v5.17.2 (23 Jan 2025)</li> <li>v5.17.1 (08 Jan 2025)</li> <li>v5.17.0 (02 Dec 2024)</li> <li>v5.16.2 (19 Nov 2024)</li> <li>v5.16.1 (07 Nov 2024)</li> <li>v5.16.0 (30 Oct 2024)</li> <li>v5.15.0 (09 Oct 2024)</li> <li>v5.14.0 (24 Sep 2024)</li> <li>v5.13.0 (24 Jul 2024)</li> <li>v5.12.1 (24 Jun 2024)</li> <li>v5.12.0 (13 Jun 2024)</li> <li>v5.11.1 (07 Jun 2024)</li> <li>v5.11.0 (21 May 2024)</li> <li>v5.10.0 (27 Mar 2024)</li> <li>v5.9.0 (07 Mar 2024)</li> <li>v5.8.0 (30 Jan 2024)</li> <li>v5.7.0 (27 Dec 2023)</li> <li>v5.6.0 (14 Nov 2023)</li> <li>v5.5.0 (28 Aug 2023)</li> <li>v5.4.7 (18 Jul 2023)</li> <li>v5.4.6 (30 May 2023)</li> <li>v5.4.5 (11 May 2023)</li> <li>v5.4.4 (03 Apr 2023)</li> <li>v5.4.3 (24 Mar 2023)</li> <li>v5.4.2 (23 Mar 2023)</li> <li>v5.4.1 (22 Mar 2023)</li> <li>v5.4.0 (17 Mar 2023)</li> <li>v5.3.2 (28 Feb 2023)</li> <li>v5.3.1 (20 Feb 2023)</li> <li>v5.3.0 (15 Feb 2023)</li> <li>v5.2.2 (14 Feb 2023)</li> <li>v5.2.1 (09 Feb 2023)</li> <li>v5.2.0 (10 Jan 2023)</li> <li>v5.1.2 (20 Oct 2022)</li> <li>v5.0.0 (03 Aug 2022)</li> </ul>"},{"location":"journey/ios/releases/5.0.0/","title":"Journey iOS 5.0.0 Changelog","text":"\ud83d\uddd3 03 Aug 2022"},{"location":"journey/ios/releases/5.0.0/#features","title":"Features","text":"<ul> <li>Can consume a globalized configuration</li> <li>Journeys list, ridesharing offers and roadmap screens redesigned</li> <li>Form screen removed</li> <li>Address and distance shown from position in autocompletion results</li> <li>Asynchronous ridesharing requests supported</li> <li>Ridesharing solutions tab added</li> <li>Refresh journeys solutions added</li> </ul>"},{"location":"journey/ios/releases/5.0.0/#fixes","title":"Fixes","text":"<ul> <li>Contrast color formula fixed</li> </ul>"},{"location":"journey/ios/releases/5.1.2/","title":"Journey iOS 5.1.2 Changelog","text":"\ud83d\uddd3 20 Oct 2022"},{"location":"journey/ios/releases/5.1.2/#features","title":"Features","text":"<ul> <li>Add tabs to filter journey results by transport type</li> <li>Show 3 new detailed bike journey results</li> </ul>"},{"location":"journey/ios/releases/5.1.2/#fixes","title":"Fixes","text":"<ul> <li>Remove incompatible dependencies</li> </ul>"},{"location":"journey/ios/releases/5.1.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code>, <code>2.3.2</code></li> <li><code>RealmSwift</code> &gt; <code>10.17.0</code></li> </ul>"},{"location":"journey/ios/releases/5.10.0/","title":"Journey iOS 5.10.0 Changelog","text":"\ud83d\uddd3 27 Mar 2024"},{"location":"journey/ios/releases/5.10.0/#features","title":"Features","text":"<ul> <li>Sort multimodes journeys</li> </ul>"},{"location":"journey/ios/releases/5.10.0/#tasks","title":"Tasks","text":"<ul> <li>Remove recommended tag</li> <li>Expand horizontally the journeys list</li> <li>Update accessibility</li> </ul>"},{"location":"journey/ios/releases/5.10.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"journey/ios/releases/5.11.0/","title":"Journey iOS 5.11.0 Changelog","text":"\ud83d\uddd3 21 Mai 2024"},{"location":"journey/ios/releases/5.11.0/#features","title":"Features","text":"<ul> <li>Itineraries organized by tab and public transport based sections</li> <li>Alternative api calls for bike, car and ridesharing are launched on request</li> </ul>"},{"location":"journey/ios/releases/5.11.0/#tasks","title":"Tasks","text":"<ul> <li>Update next departures design</li> </ul>"},{"location":"journey/ios/releases/5.11.0/#fixes","title":"Fixes","text":"<ul> <li>Fix first card size on step by step screen launch</li> </ul>"},{"location":"journey/ios/releases/5.11.0/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.2.0</code></li> <li>DesignEngine <code>v2.13.0</code></li> </ul>"},{"location":"journey/ios/releases/5.11.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"journey/ios/releases/5.11.1/","title":"Journey iOS 5.11.1 Changelog","text":"\ud83d\uddd3 07 Jun 2024"},{"location":"journey/ios/releases/5.11.1/#fixes","title":"Fixes","text":"<ul> <li>Remove support of <code>car_no_park</code></li> <li>Fix next departures not properly displayed</li> <li>Remove ridesharing with public transport sections</li> <li>Fix finding alternative bikes result while bike mode is disabled (bss mode enabled)</li> </ul>"},{"location":"journey/ios/releases/5.11.1/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"journey/ios/releases/5.12.0/","title":"Journey iOS 5.12.0 Changelog","text":"\ud83d\uddd3 13 Jun 2024"},{"location":"journey/ios/releases/5.12.0/#tasks","title":"Tasks","text":"<ul> <li>Disable compass on maps</li> <li>Add new routing method</li> </ul>"},{"location":"journey/ios/releases/5.12.0/#fixes","title":"Fixes","text":"<ul> <li>Fix location alert labels</li> </ul>"},{"location":"journey/ios/releases/5.12.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"journey/ios/releases/5.12.1/","title":"Journey iOS 5.12.1 Changelog","text":"\ud83d\uddd3 24 Jun 2024"},{"location":"journey/ios/releases/5.12.1/#tasks","title":"Tasks","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"journey/ios/releases/5.12.1/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"journey/ios/releases/5.13.0/","title":"Journey iOS 5.13.0 Changelog","text":"\ud83d\uddd3 24 Jul 2024"},{"location":"journey/ios/releases/5.13.0/#tasks","title":"Tasks","text":"<ul> <li>Enable intercepting bookmark navigation events</li> </ul>"},{"location":"journey/ios/releases/5.13.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"journey/ios/releases/5.14.0/","title":"Journey iOS 5.14.0 Changelog","text":"\ud83d\uddd3 24 Sep 2024"},{"location":"journey/ios/releases/5.14.0/#features","title":"Features","text":"<ul> <li>Add configurable display of congestion for journeys including a car section</li> </ul>"},{"location":"journey/ios/releases/5.14.0/#tasks","title":"Tasks","text":"<ul> <li>Improve accessibility</li> <li>Update next departures API to terminus schedule API</li> </ul>"},{"location":"journey/ios/releases/5.14.0/#fixes","title":"Fixes","text":"<ul> <li>Fix UI issues</li> </ul>"},{"location":"journey/ios/releases/5.14.0/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.5.0</code></li> <li>DesignEngine <code>v2.15.0</code></li> </ul>"},{"location":"journey/ios/releases/5.14.0/#compiler","title":"Compiler","text":"<ul> <li>Swift <code>6.0</code></li> </ul>"},{"location":"journey/ios/releases/5.15.0/","title":"Journey iOS 5.15.0 Changelog","text":"\ud83d\uddd3 09 Oct 2024"},{"location":"journey/ios/releases/5.15.0/#tasks","title":"Tasks","text":"<ul> <li>Remove travel duration from tabs </li> <li>Improve accessibility</li> </ul>"},{"location":"journey/ios/releases/5.15.0/#fixes","title":"Fixes","text":"<ul> <li>Fix ridesharing crash when no driver information available</li> </ul>"},{"location":"journey/ios/releases/5.15.0/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.5.0</code></li> <li>DesignEngine <code>v2.15.0</code></li> </ul>"},{"location":"journey/ios/releases/5.15.0/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0</code></li> </ul>"},{"location":"journey/ios/releases/5.16.0/","title":"Journey iOS 5.16.0 Changelog","text":"\ud83d\uddd3 30 Oct 2024"},{"location":"journey/ios/releases/5.16.0/#features","title":"Features","text":"<ul> <li>Show upcoming public transport departures in the roadmap</li> <li>Show public transport delays and updated times in the roadmap</li> </ul>"},{"location":"journey/ios/releases/5.16.0/#tasks","title":"Tasks","text":"<ul> <li>Enhance bookmark mode configuration</li> <li>Improve accessibility</li> </ul>"},{"location":"journey/ios/releases/5.16.0/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.5.2</code></li> <li>DesignEngine <code>v2.17.0</code></li> </ul>"},{"location":"journey/ios/releases/5.16.0/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0</code></li> </ul>"},{"location":"journey/ios/releases/5.16.1/","title":"Journey iOS 5.16.1 Changelog","text":"\ud83d\uddd3 07 Nov 2024"},{"location":"journey/ios/releases/5.16.1/#fix","title":"Fix","text":"<ul> <li>Fix the activation and deactivation of the bookmark feature</li> </ul>"},{"location":"journey/ios/releases/5.16.2/","title":"Journey iOS 5.16.2 Changelog","text":"\ud83d\uddd3 19 Nov 2024"},{"location":"journey/ios/releases/5.16.2/#features","title":"Features","text":"<ul> <li>Show autocomplete results based on the user's location</li> </ul>"},{"location":"journey/ios/releases/5.17.0/","title":"Journey iOS 5.17.0 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"journey/ios/releases/5.17.0/#features","title":"Features","text":"<ul> <li>New ridesharing offer UI in the list of offers and in the roadmap</li> <li>Upcoming departures on the roadmap screen align with the route search date and time</li> </ul>"},{"location":"journey/ios/releases/5.17.0/#tasks","title":"Tasks","text":"<ul> <li>Show placeholder when favorites journeys or history are empty</li> <li>Make the elevation chart in bike roadmap foldable </li> </ul>"},{"location":"journey/ios/releases/5.17.0/#fix","title":"Fix","text":"<ul> <li>Fix car sections not showing in roadmap </li> <li>Fix configurable number of favorite elements in autocomplete</li> <li>Fix bottom sheet behavior in roadmap</li> <li>Fix margins, fonts and icons</li> </ul>"},{"location":"journey/ios/releases/5.17.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>v2.18.0</code></li> <li><code>RouterEngine</code> -&gt; <code>v1.5.3</code></li> <li><code>GraphEngine</code> -&gt; <code>v1.0.8</code></li> </ul>"},{"location":"journey/ios/releases/5.17.1/","title":"Journey iOS 5.17.1 Changelog","text":"\ud83d\uddd3 08 Jan 2025"},{"location":"journey/ios/releases/5.17.1/#fixes","title":"Fixes","text":"<ul> <li>Fix ridesharing network name not customizable in roadmap section card</li> </ul>"},{"location":"journey/ios/releases/5.17.2/","title":"Journey iOS 5.17.2 Changelog","text":"\ud83d\uddd3 23 Jan 2025"},{"location":"journey/ios/releases/5.17.2/#fixes","title":"Fixes","text":"<ul> <li>Fix bookmark items displayed in autocompletion when disabled</li> </ul>"},{"location":"journey/ios/releases/5.17.2/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"journey/ios/releases/5.17.3/","title":"Journey iOS 5.17.3 Changelog","text":"\ud83d\uddd3 04 Feb 2025"},{"location":"journey/ios/releases/5.17.3/#fixes","title":"Fixes","text":"<ul> <li>Fix car no park icon not showing for favorite journeys</li> </ul>"},{"location":"journey/ios/releases/5.17.3/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"journey/ios/releases/5.17.3/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>2.18.1</code></li> <li><code>RouterEngine</code> -&gt; <code>1.5.4</code></li> </ul>"},{"location":"journey/ios/releases/5.17.4/","title":"Journey iOS 5.17.4 Changelog","text":"\ud83d\uddd3 12 Feb 2025"},{"location":"journey/ios/releases/5.17.4/#tasks","title":"Tasks","text":"<ul> <li>Upgrade RealmSwift and FlexLayout dependencies</li> </ul>"},{"location":"journey/ios/releases/5.17.4/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"journey/ios/releases/5.17.4/#dependencies","title":"Dependencies","text":"<ul> <li><code>RealmSwift</code> -&gt; <code>20.0.1</code></li> <li><code>FlexLayout</code> -&gt; <code>2.1.0</code></li> </ul>"},{"location":"journey/ios/releases/5.2.0/","title":"Journey iOS 5.2.0 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"journey/ios/releases/5.2.0/#features","title":"Features","text":"<ul> <li>Add step by step feature</li> <li>Sort journeys by reliability</li> <li>Add a tertiary color</li> </ul>"},{"location":"journey/ios/releases/5.2.0/#tasks","title":"Tasks","text":"<ul> <li>Add favorites in autocomplete</li> <li>Update icons</li> </ul>"},{"location":"journey/ios/releases/5.2.0/#fixes","title":"Fixes","text":"<ul> <li>Fix chart values</li> <li>Fix travel duration </li> <li>Fix clear button in textfields</li> </ul>"},{"location":"journey/ios/releases/5.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>RouterEngine</code> &gt; <code>0.5.0</code></li> <li><code>ToolboxEngine</code> &gt; <code>1.6.6</code></li> <li><code>DesignEngine</code> &gt; <code>2.4.0</code></li> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> <li><code>GraphEngine</code>&gt; <code>1.0.0</code></li> </ul>"},{"location":"journey/ios/releases/5.2.1/","title":"Journey iOS 5.2.1 Changelog","text":"\ud83d\uddd3 09 Feb 2023"},{"location":"journey/ios/releases/5.2.1/#fixes","title":"Fixes","text":"<ul> <li>Fix next departures not showing when the departure time is set to now</li> <li>Fix public transport tab showing when connection modes are added to transport category modes</li> <li>Fix wrong tab selected after journey request</li> <li>Fix blinking animation for real time next departures</li> <li>Fix entrance and exist name truncated</li> </ul>"},{"location":"journey/ios/releases/5.2.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>RouterEngine</code> &gt; <code>0.5.0</code></li> <li><code>ToolboxEngine</code> &gt; <code>1.6.6</code></li> <li><code>DesignEngine</code> &gt; <code>2.4.0</code></li> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> <li><code>GraphEngine</code>&gt; <code>1.0.1</code></li> <li><code>BookmarkSDK</code>&gt; <code>1.0.4</code></li> </ul>"},{"location":"journey/ios/releases/5.2.2/","title":"Journey iOS 5.2.2 Changelog","text":"\ud83d\uddd3 14 Feb 2023"},{"location":"journey/ios/releases/5.2.2/#fixes","title":"Fixes","text":"<ul> <li>Fix step by step guidance</li> <li>Fix crash when showing autocompletion</li> </ul>"},{"location":"journey/ios/releases/5.3.0/","title":"Journey iOS 5.3.0 Changelog","text":"\ud83d\uddd3 15 Feb 2023"},{"location":"journey/ios/releases/5.3.0/#features","title":"Features","text":"<ul> <li>Can bookmark a journey</li> <li>A buy button can be configured and added to the roadmap</li> </ul>"},{"location":"journey/ios/releases/5.3.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> </ul>"},{"location":"journey/ios/releases/5.3.1/","title":"Journey iOS 5.3.1 Changelog","text":"\ud83d\uddd3 20 Feb 2023"},{"location":"journey/ios/releases/5.3.1/#fixes","title":"Fixes","text":"<ul> <li>Remove unused framework reference</li> </ul>"},{"location":"journey/ios/releases/5.3.2/","title":"Journey iOS 5.3.2 Changelog","text":"\ud83d\uddd3 28 Feb 2023"},{"location":"journey/ios/releases/5.3.2/#fixes","title":"Fixes","text":"<ul> <li>Fix crash on roadmap when bookmark is not enabled</li> </ul>"},{"location":"journey/ios/releases/5.4.0/","title":"Journey iOS 5.4.0 Changelog","text":"\ud83d\uddd3 17 Mar 2023"},{"location":"journey/ios/releases/5.4.0/#features","title":"Features","text":"<ul> <li>Add events analytics</li> <li>Show journeys history</li> <li>Show favorite journeys</li> <li>Show favorite addresses and POIs in auto completion</li> <li>Add BSS trip duration and distance</li> <li>Add <code>carNoPark</code> section mode support</li> </ul>"},{"location":"journey/ios/releases/5.4.0/#tasks","title":"Tasks","text":"<ul> <li>Add direct path modes configuration support</li> <li>Change <code>search</code> param to <code>searchOnly</code> param</li> <li>Change configuration color variable names</li> <li>Add bike configuration colors</li> <li>Ridesharing journeys request is made independent from the public transport request</li> <li>Remove <code>addPoiInfos</code>, <code>directPathModes</code>, <code>firstSectionModes</code>, <code>forbiddenUris</code> and <code>lastSectionModes</code> from <code>JourneysRequest</code></li> </ul>"},{"location":"journey/ios/releases/5.4.0/#fixes","title":"Fixes","text":"<ul> <li>Fix BSS bike and places availability not showing</li> <li>Fix bike path not showing on map</li> <li>Fix autocompletion wrong sections order</li> </ul>"},{"location":"journey/ios/releases/5.4.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>BookmarkSDK</code> -&gt; <code>1.2.0</code></li> </ul>"},{"location":"journey/ios/releases/5.4.1/","title":"Journey iOS 5.4.1 Changelog","text":"\ud83d\uddd3 22 Mar 2023"},{"location":"journey/ios/releases/5.4.1/#fixes","title":"Fixes","text":"<ul> <li>Fix transport tabs disabled when bike journeys are available</li> </ul>"},{"location":"journey/ios/releases/5.4.2/","title":"Journey iOS 5.4.2 Changelog","text":"\ud83d\uddd3 23 Mar 2023"},{"location":"journey/ios/releases/5.4.2/#fixes","title":"Fixes","text":"<ul> <li>Fix bss journeys not showing when no bike request is made</li> </ul>"},{"location":"journey/ios/releases/5.4.3/","title":"Journey iOS 5.4.3 Changelog","text":"\ud83d\uddd3 24 Mar 2023"},{"location":"journey/ios/releases/5.4.3/#fixes","title":"Fixes","text":"<ul> <li>Fix next departures not showing in public transport tab</li> </ul>"},{"location":"journey/ios/releases/5.4.4/","title":"Journey iOS 5.4.4 Changelog","text":"\ud83d\uddd3 03 Apr 2023"},{"location":"journey/ios/releases/5.4.4/#fixes","title":"Fixes","text":"<ul> <li>Fix bike journey not showing when no alternative bike journey is proposed</li> <li>Fix Realm configuration objects</li> <li>Fix missing ridesharing provider icon</li> </ul>"},{"location":"journey/ios/releases/5.4.5/","title":"Journey iOS 5.4.5 Changelog","text":"\ud83d\uddd3 11 May 2023"},{"location":"journey/ios/releases/5.4.5/#tasks","title":"Tasks","text":"<ul> <li>Add missing navitia params in <code>JourneysRequest</code> object</li> </ul>"},{"location":"journey/ios/releases/5.4.5/#fixes","title":"Fixes","text":"<ul> <li>Fix <code>car_no_park</code> not handled properly in journey request</li> </ul>"},{"location":"journey/ios/releases/5.4.6/","title":"Journey iOS 5.4.6 Changelog","text":"\ud83d\uddd3 30 May 2023"},{"location":"journey/ios/releases/5.4.6/#tasks","title":"Tasks","text":"<ul> <li>Hide journey time for ridesharing offers</li> </ul>"},{"location":"journey/ios/releases/5.4.6/#fixes","title":"Fixes","text":"<ul> <li>Fix font for disruption messages</li> <li>Fix rating stars display</li> <li>Show free instead of 0\u20ac for ridesharing offers</li> </ul>"},{"location":"journey/ios/releases/5.4.7/","title":"Journey iOS 5.4.7 Changelog","text":"\ud83d\uddd3 18 Jul 2023"},{"location":"journey/ios/releases/5.4.7/#tasks","title":"Tasks","text":"<ul> <li>Add ridesharing offers count</li> <li>Make ridesharing price customizable</li> </ul>"},{"location":"journey/ios/releases/5.4.7/#fixes","title":"Fixes","text":"<ul> <li>Hide journey time for ridesharing offers</li> </ul>"},{"location":"journey/ios/releases/5.4.7/#dependencies","title":"Dependencies","text":"<ul> <li><code>BookmarkSDK</code> &gt; <code>2.3.4</code></li> </ul>"},{"location":"journey/ios/releases/5.5.0/","title":"Journey iOS 5.5.0 Changelog","text":"\ud83d\uddd3 28 Aug 2023"},{"location":"journey/ios/releases/5.5.0/#features","title":"Features","text":"<ul> <li>Add specific error messages when a search request failed</li> <li>Update automatically walking instruction in the step by step guidance based on user location</li> <li>Update automatically the cards in guidance based on user location</li> <li>Can configure and show in a autocompletion result if this is included in the main region of the coverage or not</li> <li>Show if a journey contains a low emission zone for a car section</li> <li>Add a deep link to an map application for a walking, car or bike section in roadmap</li> <li>Show nearby bus station on the map in roadmap</li> <li>Show station entrance and station exit on the map in roadmap</li> <li>Show vehicle positions on the map in roadmap</li> <li>Show next departures beyond 1 hour</li> <li>Show icon for air-conditioned lines</li> <li>Add button to toggle between satellite and standard map types</li> <li>Add <code>ShowBack</code> param</li> <li>Can subscribe to a traffic alert when a journey is bookmarked</li> <li>Show the number of available ridesharing for a journey</li> <li>Hide tabs if corresponding filter is disabled</li> </ul>"},{"location":"journey/ios/releases/5.5.0/#tasks","title":"Tasks","text":"<ul> <li>Add custom analytic events</li> <li>Show guidance cards in full screen</li> <li>Add missing params in <code>JourneyRequest</code> object</li> </ul>"},{"location":"journey/ios/releases/5.5.0/#fixes","title":"Fixes","text":"<ul> <li>Fix header size in roadmap</li> <li>Fix ridesharing loading state when no ridesharing journeys found</li> <li>Fix car tabs not appearing when it's the only mode configured</li> <li>Fix bottom sheet scroll in roadmap and guidance</li> <li>Fix next departure annotations on guidance map</li> <li>Fix percentage of cyclable lanes</li> <li>Fix ridesharing offers count showing only with carbon and calories</li> </ul>"},{"location":"journey/ios/releases/5.5.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>FlexLayout</code> -&gt; <code>1.3.31</code></li> <li><code>RealmSwift</code> -&gt; <code>10.42.0</code></li> <li><code>DesignEngine</code> -&gt; <code>2.7.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.0.0</code></li> <li><code>BookmarkSDK</code> -&gt; <code>Removed</code></li> </ul>"},{"location":"journey/ios/releases/5.5.0/#deployment-target","title":"Deployment target","text":"<ul> <li><code>iOS 14</code> minimun</li> </ul>"},{"location":"journey/ios/releases/5.6.0/","title":"Journey iOS 5.6.0 Changelog","text":"\ud83d\uddd3 14 Nov 2023"},{"location":"journey/ios/releases/5.6.0/#features","title":"Features","text":"<ul> <li>External view injection in journeys and roadmap screens added</li> <li>Roadmap screen actions are now delegate dependent</li> <li>Show walking distance in journey summary</li> </ul>"},{"location":"journey/ios/releases/5.6.0/#tasks","title":"Tasks","text":"<ul> <li>Car path color and next departures frequency are customizable</li> <li>Accessibility updated</li> <li>App id and screen id trackers added</li> <li>Disruptions level color configuration added</li> </ul>"},{"location":"journey/ios/releases/5.6.0/#bugs","title":"Bugs","text":"<ul> <li>Fix PRM realtime icon color</li> <li>Fix earlier/later button text</li> <li>Fix wrong destination name in step by step screen card</li> </ul>"},{"location":"journey/ios/releases/5.6.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.5.0</code></li> <li><code>ToolboxEngine</code> -&gt; <code>1.10.0</code></li> <li><code>DesignEngine</code> -&gt; <code>2.8.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.1.0</code></li> </ul>"},{"location":"journey/ios/releases/5.6.0/#deployment-target","title":"Deployment target","text":"<ul> <li><code>iOS 14</code> minimun</li> </ul>"},{"location":"journey/ios/releases/5.7.0/","title":"Journey iOS 5.7.0 Changelog","text":"\ud83d\uddd3 27 Dec 2023"},{"location":"journey/ios/releases/5.7.0/#features","title":"Features","text":"<ul> <li>Add car parking highlight feature</li> <li>Handle indoor/outdoor car parking types</li> </ul>"},{"location":"journey/ios/releases/5.7.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.6.0</code></li> <li><code>ToolboxEngine</code> -&gt; <code>1.11.0</code></li> <li><code>DesignEngine</code> -&gt; <code>2.9.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.1.1</code></li> <li><code>GraphEngine</code> -&gt; <code>1.0.5</code></li> </ul>"},{"location":"journey/ios/releases/5.7.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.9.2</code></li> </ul>"},{"location":"journey/ios/releases/5.8.0/","title":"Journey iOS 5.8.0 Changelog","text":"\ud83d\uddd3 30 Jan 2023"},{"location":"journey/ios/releases/5.8.0/#features","title":"Features","text":"<ul> <li>Add timezone support for date format</li> <li>Add parking instruction in journey solution</li> <li>Disable journey solution when the parking is not available</li> <li>Show parking price when the parking is available</li> </ul>"},{"location":"journey/ios/releases/5.8.0/#fixes","title":"Fixes","text":"<ul> <li>Disable dark mode for guidance screen</li> </ul>"},{"location":"journey/ios/releases/5.8.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.7.0</code></li> <li><code>ToolboxEngine</code> -&gt; <code>1.12.0</code></li> <li><code>DesignEngine</code> -&gt; <code>2.10.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.1.2</code></li> <li><code>GraphEngine</code> -&gt; <code>1.0.6</code></li> </ul>"},{"location":"journey/ios/releases/5.8.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.9.2</code></li> </ul>"},{"location":"journey/ios/releases/5.9.0/","title":"Journey iOS 5.9.0 Changelog","text":"\ud83d\uddd3 07 Mar 2024"},{"location":"journey/ios/releases/5.9.0/#features","title":"Features","text":"<ul> <li>Can configure park availability frequency</li> </ul>"},{"location":"journey/ios/releases/5.9.0/#tasks","title":"Tasks","text":"<ul> <li>Remove useless parameters in BSS and P+R availability API calls</li> </ul>"},{"location":"journey/ios/releases/5.9.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>2.11.0</code></li> </ul>"},{"location":"journey/ios/releases/5.9.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.9.2</code></li> </ul>"},{"location":"journey/ios/releases/6.0.0/","title":"Journey iOS 6.0.0 Changelog","text":"\ud83d\uddd3 24 Feb 2025"},{"location":"journey/ios/releases/6.0.0/#features","title":"Features","text":"<ul> <li>Enable next departure selection in the roadmap screen</li> <li>Show/hide PRM availability based on configuration</li> <li>Change bike journeys section order</li> </ul>"},{"location":"journey/ios/releases/6.0.0/#tasks","title":"Tasks","text":"<ul> <li>Extract module configuration from unified configuration</li> <li>Add unified colors configuration</li> <li>Update minimum iOS deployment to 16</li> </ul>"},{"location":"journey/ios/releases/6.0.0/#fixes","title":"Fixes","text":"<ul> <li>Fix translation for traffic jam in french</li> <li>Fix accessibility voice over on journey list</li> <li>Fix bike journey's headers and error messages</li> <li>Fix crash when bike sharing service arrival name is empty in roadmap</li> <li>Fix thermometer view margins in roadmap </li> <li>Fix roadmap's bottom sheet bottom margin</li> <li>Fix +1 schedule occurrences in step by step cards</li> </ul>"},{"location":"journey/ios/releases/6.0.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.8.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.6.0</code></li> <li><code>DesignEngine</code> -&gt; <code>3.0.0</code></li> <li><code>GraphEngine</code> -&gt; <code>1.1.0</code></li> </ul>"},{"location":"journey/ios/releases/6.1.0/","title":"Journey iOS 6.1.0 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"journey/ios/releases/6.1.0/#features","title":"Features","text":"<ul> <li>Add bike park mode</li> </ul>"},{"location":"journey/ios/releases/6.1.0/#tasks","title":"Tasks","text":"<ul> <li>Route user to settings to activate notifications in case of traffic subscriptions</li> <li>Replace bike journey type fast with shortest in roadmap</li> <li>Display specific message for no RMP journey results</li> <li>Round carbon value to the nearest Integer</li> <li>Do not call autocompletion when query hasn't changed</li> <li>Show a specific error message if origin and destination of a journey are the same</li> </ul>"},{"location":"journey/ios/releases/6.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix text overflow in history and favorite journeys</li> <li>Fix the bottom sheet height in step by step screen</li> </ul>"},{"location":"journey/ios/releases/6.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.9.0</code></li> <li><code>DesignEngine</code> -&gt; <code>3.1.0</code></li> </ul>"},{"location":"journey/ios/releases/6.2.0/","title":"Journey iOS 6.2.0 Changelog","text":"\ud83d\uddd3 22 Apr 2025"},{"location":"journey/ios/releases/6.2.0/#features","title":"Features","text":"<ul> <li>Show notes of public transport sections in roadmap</li> </ul>"},{"location":"journey/ios/releases/6.2.0/#tasks","title":"Tasks","text":"<ul> <li>Convert long walking duration in hours on freeze</li> </ul>"},{"location":"journey/ios/releases/6.2.0/#fixes","title":"Fixes","text":"<ul> <li>Fix error message on bike journeys when PRM is enabled</li> <li>Fix request journeys when departure/arrival field is empty</li> </ul>"},{"location":"journey/ios/releases/6.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>3.2.0</code></li> </ul>"},{"location":"journey/ios/releases/6.2.1/","title":"Journey iOS 6.2.1 Changelog","text":"\ud83d\uddd3 07 May 2025"},{"location":"journey/ios/releases/6.2.1/#tasks","title":"Tasks","text":"<ul> <li>Added dSYM generation for symbolication of crash reports</li> </ul>"},{"location":"journey/ios/releases/6.2.1/#fixes","title":"Fixes","text":"<ul> <li>Fixed departure/arrival name in journeys history screen</li> <li>Removed forced date casting to prevent potential runtime crashes</li> <li>Added proper local date handling for improved consistency across time zones</li> </ul>"},{"location":"journey/ios/releases/6.2.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>3.2.1</code></li> </ul>"},{"location":"journey/ios/releases/6.3.0/","title":"Journey iOS 6.3.0 Changelog","text":"\ud83d\uddd3 11 Sep 2025"},{"location":"journey/ios/releases/6.3.0/#features","title":"Features","text":"<ul> <li>Added new traveler settings screen</li> <li>Added bike speed selection in settings screen</li> <li>Route to all schedules screen from roadmap sheet</li> <li>Make step by step launch button title configurable</li> <li>Make tabs in journeys list configurable</li> </ul>"},{"location":"journey/ios/releases/6.3.0/#tasks","title":"Tasks","text":"<ul> <li>Optimize bottom sheet behavior</li> <li>Adjusted transport modes behavior upon traveler profile activation</li> <li>Add line name to line subscriptions</li> <li>Hide calories for PRM traveler</li> <li>Add accessibility on traveler preferences screen</li> </ul>"},{"location":"journey/ios/releases/6.3.0/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.1.2</code></li> </ul>"},{"location":"journey/screens/","title":"Journey Screens","text":""},{"location":"journey/screens/#screen-flow","title":"Screen flow","text":"<p>Refer to the following schema to learn more about different interactions and how to navigate between module screens:</p> <pre><code>graph TB\n    LatestFavoriteJourneys(Latest journeys / Favorite journeys) --&gt; Search(Search)\n    LatestFavoriteJourneys(Latest journeys / Favorite journeys) --&gt; ResultJourneys(Result journeys)\n    LatestFavoriteJourneys(Latest journeys / Favorite journeys) --&gt; Roadmap(Roadmap)\n    Search(Search) --&gt; ResultJourneys(Result journeys)\n    ResultJourneys(Result journeys) --&gt; RidesharingOffers(Ridesharing offers)\n    ResultJourneys(Result journeys) --&gt; Roadmap(Roadmap)\n    Roadmap(Roadmap) --&gt; StepByStepGuidance(Step by step guidance)</code></pre>"},{"location":"journey/screens/#latest-journeys-favorite-journeys","title":"Latest journeys / Favorite journeys","text":"<p>404</p> <p>This section is not written yet</p>"},{"location":"journey/screens/#result-journeys","title":"Result journeys","text":"<p>The journeys screen is fundamental and offers the solutions to the user for the requested itinerary. After defining all the required parameters, this screen will popup with multiple results combining public transport, personal bikes/cars, bike sharing system and even ridesharing possibilities.</p> <p>Each result gives the needed information to the user in order to planify his journey. He can check the duration, the suggested means of transport, the next departure datetimes and many other useful details. This combination of data, being served by Navitia servers and translated into a comprehensible/user friendly interface, is perfectly shaped to the user profile and needs.</p> <p>The journeys are grouped into categories represented by different tabs: public transport, walking, bike, car and ridesharing. The visibility of each tab depends on the passed transport categories configuration. In the public transport tab, the journeys are grouped in two sections: recommended journeys and other journeys. The recommended journey ensures to the user that the arrival date is respected and yet, the journey is reliable.</p> AndroidiOS <p></p> <p></p> <p>In the bike tab, the bike journeys are classified depending on specific criteria: the fastest, the most comfortable and the most balanced. The cycling path percentage is also displayed to the user to help him choose the right journey. In the same tab, the journeys combining only bike sharing service and walking are also added.</p> AndroidiOS <p></p> <p></p> <p>Each made itinerary request is saved and shown to the user at the screen launch. The history can be easily deleted by choosing delete from the action menu of the target item. In the same screen, we also show the list of the favorite journeys that the user has added using the bookmark button (see Roadmap section below). To enable this feature, the <code>bookmark_mode</code>parameter should be set to <code>true</code> in Journey features.</p> AndroidiOS <p></p> <p></p>"},{"location":"journey/screens/#search","title":"Search","text":"<p>The search feature can be enabled in the configuration by setting the parameter <code>search_only</code> to <code>false</code> as mentioned in the Journey features section. In this screen, the user can choose the departure and the arrival of his itinerary. While typing in the target field, a list of options is shown below the field. The user can simply choose one of the suggested options and mark it as a departure or as an arrival point.</p> <p>The suggested options are grouped in sections, it's whether a station, an address or a place. In this screen, a geolocation service is used to get the user location. Therefore, another option is given and it allows the user to set his position as a departure or an arrival of the itinerary.</p> <p>A history feature is added to this screen, allowing the user to choose from the previous selected items. The <code>maxHistory</code> parameter defines the maximum number of items to show in the history list.</p> <p>If <code>bookmark_mode</code> feature is enabled in the Journey features, a bookmark section appears in the same screen allowing the user to choose from his favorite addresses/places. A shortcut button is also available for Home and Work favorites.</p> AndroidiOS <p></p> <p></p>"},{"location":"journey/screens/#roadmap","title":"Roadmap","text":"<p>We believe that the user needs more useful details about his journey and that's where the roadmap screen comes in. In this page, the user gets a visual overview about the selected itinerary with a simple colorful drawing on a map. Departure and arrival markers are also shown on the map along with the user location and itinerary segments delimiters.</p> <p>The screen also includes a draggable bottom sheet which offers a step-by-step journey sections. Each section is represented in a way that it makes it easier to the user to follow the given instructions. The public transport section is also well detailed when it comes to explain to the user how to take different means of transport from the departure to the arrival point.</p> <p>A customized button can be added in case an external action needs to be made from outside this screen. To enable this button, the parameter <code>buy_tickets</code> should be set in Journey features.</p> AndroidiOS <p></p> <p></p>"},{"location":"journey/screens/#ridesharing-offers","title":"Ridesharing offers","text":"<p>This screen lists the different ridesharing offers for the selected journey. Regardless of the fact that the journey can propose a full ridesharing trip or a partial ride, the user can select among different third party offers. He has all the information needed to choose the best offer that fits his needs including the departure time, the available seats, the price and some data about the driver offering the ride.</p> AndroidiOS <p></p> <p></p>"},{"location":"journey/screens/#step-by-step-guidance","title":"Step by step guidance","text":"<p>This screen shows the different steps that the user should go through to reach his destination. Those steps are designed to be simple and easily readable for the user and focuses on the most important information during his journey. Along with the user location, an interaction between the map and the step card is also added to zoom over the current portion of path that refers to the current selected card.</p> <p>The journey duration and the estimated arrival time are realtime-updated variables which depend on various parameters such as the highlighted step, the next departure of each public transport mode...</p> AndroidiOS <p></p> <p></p>"},{"location":"schedule/android/","title":"Schedule Android","text":""},{"location":"schedule/android/#setup","title":"Setup","text":"<p>Add the following dependencies in the <code>build.gradle</code> file of your application:</p> <pre><code>dependencies {\n    implementation(\"com.kisio.navitia.sdk.ui:schedule:2.10.1\")\n}\n</code></pre> <p>For the use of cartography, add your Google Maps API Key to your <code>AndroidManifest.xml</code> as well. Replace <code>YOUR_API_KEY</code> with your key:</p> <pre><code>&lt;meta-data\n    android:name=\"com.google.android.geo.API_KEY\"\n    android:value=\"YOUR_API_KEY\"/&gt;\n</code></pre> <p>The activity launching Schedule must handle the following configuration changes: <code>orientation|screenSize</code> declared into your <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;activity\n    android:configChanges=\"orientation|screenSize\"/&gt;\n</code></pre>"},{"location":"schedule/android/#implementation","title":"Implementation","text":"<p>Warning</p> <p>Make sure to read the modules configuration section before proceeding</p> <p>This module is set up by calling <code>ScheduleUI.getInstance()</code>. The singleton behaves like a builder in which each method allows you to configure the module. Then, you need to call the <code>init()</code> method at the end. You should call this method in an <code>Application</code> subclass. This method takes the following parameters:</p> Name Required Description Type Default <code>context</code> Context in which the module is launched <code>Context</code> <code>token</code> Get your token <code>String</code> <code>configuration</code> Module configuration object <code>ScheduleConfiguration</code> <code>null</code> <code>configurationJsonFile</code> Module configuration JSON file name <code>String</code> <code>null</code> <code>onNavigate</code> Listener for the navigation between module screens <code>Unit</code> <code>{ _ -&gt; }</code> <code>onBack</code> Listener for the navigation back button click event <code>Unit</code> <code>{ _ -&gt; }</code> Example Configuration with fileManual configuration <pre><code>ScheduleUI.getInstance().let { instance -&gt;\n    instance.init(\n        context = this,\n        token = \"your_token\",\n        configurationJsonFile = \"config.json\"\n    )\n}\n</code></pre> <pre><code>ScheduleUI.getInstance().let { instance -&gt;\n    instance.init(\n        context = this,\n        token = \"your_token\",\n        configuration = ScheduleConfiguration(\n            coverage = \"your_coverage\",\n            timezone = \"Europe/Paris\",\n            env = ScheduleEnvironment.PROD,\n            colors = ScheduleColors(\n                primary = \"#88819f\"\n            ),\n            transportCategories = listOf&lt;ScheduleTransportCategory&gt;()\n        )\n    )\n}\n</code></pre>"},{"location":"schedule/android/#navigation-listener","title":"Navigation listener","text":"<p>Since the module launches its own fragments, you may want your application to be aware of navigation events. For that, you have to set a navigation listener by calling this method before <code>init()</code>.</p> <pre><code>ScheduleUI.getInstance()\n    .setNavigationListener(scheduleNavigationListenerImpl) // (1)\n</code></pre> <ol> <li><code>scheduleNavigationListenerImpl</code> should be the class instance implementing <code>ScheduleNavigationListener</code> interface.</li> </ol> <p>This interface gives you the method <code>onBack()</code> for any back event between two fragments and the method <code>onNavigate</code> for the reverse. Each method has a <code>ScheduleNavigationListener.Event</code> parameter you can rely on.</p> <pre><code>// Navigation events\nLINES_BACK_TO_EXTERNAL\nLINES_TO_STATIONS\nLINES_TO_TIMETABLE\nSTATIONS_BACK_TO_LINE\nTIMETABLE_BACK_TO_LINES\n</code></pre>"},{"location":"schedule/android/#events-tracking","title":"Events tracking","text":"<p>In order to receive the list of generated events within Schedule module, you have to attach the tracker to the module instance. You can call this method before or after <code>init()</code>.</p> <pre><code>JourneyUI.getInstance()\n    .attachTracker(scheduleTrackerImpl) // (1)\n</code></pre> <ol> <li><code>scheduleTrackerImpl</code> should be the class instance implementing <code>ScheduleTracker</code> interface.</li> </ol>"},{"location":"schedule/android/#launching","title":"Launching","text":"<p>Schedule has a single entry point <code>LinesFragment</code>. Assuming you have an <code>Activity</code> with a fragment container, refer to the following example to launch the entry screen fragment:</p> <pre><code>supportFragmentManager.beginTransaction().run {\n    replace(\n        R.id.container_id,\n        LinesFragment.newInstance(showBack = false),\n        \"TAG\"\n    )\n    addToBackStack(\"TAG\")\n    commit()\n}\n</code></pre> <p>The <code>newInstance()</code> method creates an instance of the target fragment and takes the following parameters:</p> Name Required Description Type Default <code>showBack</code> Show/hide back button on the first screen <code>Boolean</code> <code>false</code>"},{"location":"schedule/android/#communicating-with-other-modules-or-the-app","title":"Communicating with other modules or the app","text":"<p>Schedule module navigate to other modules directly or via the host application. To do this, the host application must initialize <code>Router</code>. This singleton will ensure communication between the different modules or the app. Communication will not occur unless those are registered beforehand:</p> <pre><code>Router.getInstance()\n    ... // Register modules and/or app\n    .init()\n</code></pre>"},{"location":"schedule/android/#application","title":"Application","text":"<p>Some routes are delegated to the application. If you have to handle navigation between modules, the <code>Router</code> module must register a receiver:</p> <pre><code>Router.getInstance()\n    .register(appUi = appRouterUiImpl) // (1)\n</code></pre> <ol> <li><code>appRouterUiImpl</code> should be the class instance implementing <code>AppRouter.UI</code> interface. We recommend using a <code>Application</code> subclass.</li> </ol>"},{"location":"schedule/android/#modules","title":"Modules","text":""},{"location":"schedule/android/#bookmark","title":"Bookmark","text":"<p>This module communicates with Bookmark module in order to display favorite stations. You should enable the <code>bookmark_mode</code> parameter in the features configuration.</p>"},{"location":"schedule/android/#journey","title":"Journey","text":"<p>This module communicates with Journey module in order to get directions for a chosen itinerary. You should enable the <code>go_from_go_to</code> parameter in the features configuration.</p> <p>The following method from the <code>AppRouter.UI</code> interface should be implemented by the host application to enable navigation to the Journey module or any other custom screens. Note that the parameters of these methods can be ignored as needed.</p> <pre><code>override fun openJourneysViaHost(\n    origin: SharedData.JourneyPoint?,\n    destination: SharedData.JourneyPoint?,\n    showDirectlyAutoCompletion: Boolean,\n    showDirectlyJourneysSearch: Boolean\n) {\n    // launch the journey module screen or your custom screen\n}\n</code></pre> Param Type Description <code>origin</code> <code>SharedData.JourneyPoint?</code> Desired starting point of the journey. Optional <code>destination</code> <code>SharedData.JourneyPoint?</code> Desired endpoint of the journey. Optional <code>showDirectlyAutoCompletion</code> <code>Boolean</code> Directly displays the search for the starting point and/or endpoint. If true, <code>showDirectlyJourneysSearch</code> can only be false <code>showDirectlyJourneysSearch</code> <code>Boolean</code> Directly displays the journey search. If true, <code>showDirectlyAutoCompletion</code> can only be false"},{"location":"schedule/android/#theming","title":"Theming","text":""},{"location":"schedule/android/#app-theme","title":"App theme","text":"<p>The module utilizes graphical components from Material Design 3. To ensure these components function correctly and get displayed properly on the screen, it is crucial to apply the appropriate parent theme:</p> <pre><code>&lt;style name=\"Theme.App\" parent=\"Theme.Material3.*\"&gt; &lt;!-- (1) --&gt;\n    ...\n&lt;/style&gt;\n</code></pre> <ol> <li>Replace by the specific theme. For example: <code>Theme.Material3.Light.NoActionBar</code></li> </ol>"},{"location":"schedule/android/#date-time-picker","title":"Date time picker","text":"<p>The date picker theme in the Journeys screen is set by the system and cannot really offer yet some flexibility. If a dark mode is applied on the phone, the system will apply predefined colors regardless of the configured colors. If you want to theme the date picker, you can only add the following in your style or theme file of your app:</p> <pre><code>&lt;style name=\"Schedule.MaterialCalendar\" parent=\"ThemeOverlay.Material3.MaterialCalendar\"&gt;\n    &lt;item name=\"colorPrimary\"&gt;&lt;!-- your color --&gt;&lt;/item&gt;\n    &lt;item name=\"colorOnPrimary\"&gt;&lt;!-- your contrasted color --&gt;&lt;/item&gt;\n\n    &lt;item name=\"materialCalendarStyle\"&gt;@style/Schedule.MaterialCalendar.Style&lt;/item&gt;\n    &lt;item name=\"materialCalendarHeaderLayout\"&gt;@style/Schedule.MaterialCalendar.HeaderLayout&lt;/item&gt;\n    &lt;item name=\"materialCalendarHeaderTitle\"&gt;@style/Schedule.MaterialCalendar.HeaderTitle&lt;/item&gt;\n    &lt;item name=\"materialCalendarHeaderSelection\"&gt;@style/Schedule.MaterialCalendar.HeaderSelection&lt;/item&gt;\n    &lt;item name=\"materialCalendarHeaderToggleButton\"&gt;@style/Schedule.MaterialCalendar.HeaderToggleButton&lt;/item&gt;\n&lt;/style&gt;\n\n&lt;style name=\"Schedule.MaterialCalendar.Style\" parent=\"Widget.Material3.MaterialCalendar\"&gt;\n    &lt;item name=\"backgroundTint\"&gt;&lt;!-- your contrasted color --&gt;&lt;/item&gt;\n&lt;/style&gt;\n&lt;style name=\"Schedule.MaterialCalendar.HeaderLayout\" parent=\"Widget.Material3.MaterialCalendar.HeaderLayout\"&gt;\n    &lt;item name=\"android:background\"&gt;&lt;!-- your color --&gt;&lt;/item&gt;\n&lt;/style&gt;\n&lt;style name=\"Schedule.MaterialCalendar.HeaderTitle\" parent=\"Widget.MaterialComponents.MaterialCalendar.HeaderTitle\"&gt;\n    &lt;item name=\"android:textColor\"&gt;&lt;!-- your contrasted color --&gt;&lt;/item&gt;\n&lt;/style&gt;\n&lt;style name=\"Schedule.MaterialCalendar.HeaderSelection\" parent=\"Widget.MaterialComponents.MaterialCalendar.HeaderSelection\"&gt;\n    &lt;item name=\"android:textColor\"&gt;&lt;!-- your contrasted color --&gt;&lt;/item&gt;\n&lt;/style&gt;\n&lt;style name=\"Schedule.MaterialCalendar.HeaderToggleButton\" parent=\"Widget.MaterialComponents.MaterialCalendar.HeaderToggleButton\"&gt;\n    &lt;item name=\"android:tint\"&gt;&lt;!-- your contrasted color --&gt;&lt;/item&gt;\n&lt;/style&gt;\n</code></pre>"},{"location":"schedule/android/changelogs/","title":"Schedule Android Changelogs","text":"<ul> <li>v2.10.1 (18 Sep 2025)</li> <li>v2.10.0 (11 Sep 2025)</li> <li>v2.9.9 (11 Jun 2025)</li> <li>v2.9.8 (05 Jun 2025)</li> <li>v2.9.7 (23 Apr 2025)</li> <li>v2.9.6 (24 Mar 2025)</li> <li>v2.9.5 (05 Mar 2025)</li> <li>v2.9.4 (25 Feb 2025)</li> <li>v2.9.3 (03 Feb 2025)</li> <li>v2.9.2 (24 Dec 2024)</li> <li>v2.9.1 (02 Dec 2024)</li> <li>v2.9.0 (31 Oct 2024)</li> <li>v2.8.1 (24 Sept 2024)</li> <li>v2.8.0 (09 Sept 2024)</li> <li>v2.7.2 (08 Aug 2024)</li> <li>v2.7.1 (26 Jul 2024)</li> <li>v2.7.0 (24 Jun 2024)</li> <li>v2.6.0 (21 Mai 2024)</li> <li>v2.5.1 (21 Mar 2024)</li> <li>v2.5.0 (12 Feb 2024)</li> <li>v2.4.0 (11 Jan 2024)</li> <li>v2.3.0 (23 Aug 2023)</li> <li>v2.2.2 (03 Apr 2023)</li> <li>v2.2.1 (17 Mar 2023)</li> <li>v2.2.0 (15 Feb 2023)</li> <li>v2.1.0 (10 Jan 2023)</li> <li>v2.0.1 (19 Oct 2022)</li> <li>v2.0.0 (29 Sept 2022)</li> </ul>"},{"location":"schedule/android/releases/2.0.0/","title":"Schedule Android 2.0.0 Changelog","text":"\ud83d\uddd3 29 Sept 2022"},{"location":"schedule/android/releases/2.0.0/#features","title":"Features","text":"<ul> <li>Can consume a globalized configuration</li> <li>Redesign the whole module</li> </ul>"},{"location":"schedule/android/releases/2.0.0/#tasks","title":"Tasks","text":"<ul> <li>Remove sample app</li> <li>Can and should be used as a submodule</li> <li>Add some unit tests</li> </ul>"},{"location":"schedule/android/releases/2.0.0/#fixes","title":"Fixes","text":"<ul> <li>Fix text color on computed line logos</li> </ul>"},{"location":"schedule/android/releases/2.0.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlinVersion</code> &gt; <code>1.6.21</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.2.2</code></li> <li><code>com.google.firebase:firebase-crashlytics-gradle</code> &gt; <code>2.9.2</code></li> <li><code>com.google.gms:google-services</code> &gt; <code>4.3.14</code></li> <li><code>org.jfrog.buildinfo:build-info-extractor-gradle</code> &gt; <code>4.28.2</code></li> <li><code>daggerVersion</code> &gt; <code>2.42</code></li> <li><code>fragmentVersion</code> &gt; <code>1.5.2</code></li> <li><code>kotlinCoroutinesVersion</code> &gt; <code>1.6.3</code> </li> <li><code>lifecycleVersion</code> &gt; <code>2.5.1</code></li> <li><code>roomVersion</code> &gt; <code>2.4.3</code></li> <li><code>compileSdk</code> &gt; <code>33</code></li> <li><code>buildToolsVersion</code> &gt; <code>33.0.0</code></li> <li><code>targetSdk</code> &gt; <code>33</code></li> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.5.1</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.1.4</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.9.0</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.6.1</code></li> <li><code>com.google.code.gson:gson</code> &gt; <code>2.8.9</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.1</code></li> <li><code>androidx.test.ext:junit</code> &gt; <code>1.1.3</code></li> <li><code>org.mockito:mockito-inline</code> &gt;<code>3.11.2</code></li> <li><code>org.mockito.kotlin:mockito-kotlin</code> &gt; <code>3.2.0</code></li> <li><code>org.mockito:mockito-android</code> &gt; <code>2.23.4</code></li> </ul>"},{"location":"schedule/android/releases/2.0.1/","title":"Schedule Android 2.0.1 Changelog","text":"\ud83d\uddd3 19 Oct 2022"},{"location":"schedule/android/releases/2.0.1/#fixes","title":"Fixes","text":"<ul> <li>Fix publishing of variant modules dependencies</li> </ul>"},{"location":"schedule/android/releases/2.1.0/","title":"Schedule Android 2.1.0 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"schedule/android/releases/2.1.0/#features","title":"Features","text":"<ul> <li>Show bookmarks on home view</li> <li>Show bus vehicle positions on map</li> </ul>"},{"location":"schedule/android/releases/2.1.0/#tasks","title":"Tasks","text":"<ul> <li>Replace <code>Gson</code> by <code>kotlinx.serialization</code></li> <li>Prefix all layouts by <code>navitia_schedule_</code></li> <li>Token is passed via <code>init()</code> instead of configuration file or object</li> </ul>"},{"location":"schedule/android/releases/2.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix back button action</li> </ul>"},{"location":"schedule/android/releases/2.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle-wrapper</code> &gt; <code>7.4</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.3.1</code></li> <li><code>androidx.navigation:navigation-fragment-ktx</code> &gt; <code>2.5.3</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.2</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.4.1</code></li> </ul>"},{"location":"schedule/android/releases/2.10.0/","title":"Schedule Android 2.10.0 Changelog","text":"\ud83d\uddd3 11 Sep 2025"},{"location":"schedule/android/releases/2.10.0/#features","title":"Features","text":"<ul> <li>Added delete action in auto complete history items.</li> </ul>"},{"location":"schedule/android/releases/2.10.0/#tasks","title":"Tasks","text":"<ul> <li>Added scroll to schedule timetable to avoid truncated display</li> </ul>"},{"location":"schedule/android/releases/2.10.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.data:expert</code>&gt; <code>3.7.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code>&gt; <code>2.23.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code>&gt; <code>2.6.6</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code>&gt; <code>1.22.0</code></li> </ul>"},{"location":"schedule/android/releases/2.10.1/","title":"Schedule Android 2.10.1 Changelog","text":"\ud83d\uddd3 18 Sep 2025"},{"location":"schedule/android/releases/2.10.1/#fixes","title":"Fixes","text":"<ul> <li>Fixed timetable empty state showing when vehicule positions request failed</li> </ul>"},{"location":"schedule/android/releases/2.2.0/","title":"Schedule Android 2.2.0 Changelog","text":"\ud83d\uddd3 15 Feb 2023"},{"location":"schedule/android/releases/2.2.0/#features","title":"Features","text":"<ul> <li>Show disruption icon on favorite stations</li> </ul>"},{"location":"schedule/android/releases/2.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.6.1</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.8.0</code></li> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; <code>1.2.0</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.2</code></li> <li><code>androidx.test.ext:junit</code> &gt; <code>1.1.5</code></li> </ul>"},{"location":"schedule/android/releases/2.2.1/","title":"Schedule Android 2.2.1 Changelog","text":"\ud83d\uddd3 17 Mar 2023"},{"location":"schedule/android/releases/2.2.1/#tasks","title":"Tasks","text":"<ul> <li>Change configuration color variable names</li> </ul>"},{"location":"schedule/android/releases/2.2.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.recyclerview:recyclerview</code> &gt;<code>1.3.0</code></li> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; <code>1.2.1</code></li> </ul>"},{"location":"schedule/android/releases/2.2.2/","title":"Schedule Android 2.2.2 Changelog","text":"\ud83d\uddd3 03 Apr 2023"},{"location":"schedule/android/releases/2.2.2/#fixes","title":"Fixes","text":"<ul> <li>Fix infinite loader on lines for a mode</li> <li>Fix crash when clicking on back to return to the list of lines</li> <li>Fix empty favorite tabs</li> <li>Fix loading of next departures for a favorite</li> </ul>"},{"location":"schedule/android/releases/2.2.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; <code>1.2.2</code></li> </ul>"},{"location":"schedule/android/releases/2.3.0/","title":"Schedule Android 2.3.0 Changelog","text":"\ud83d\uddd3 23 Aug 2023"},{"location":"schedule/android/releases/2.3.0/#features","title":"Features","text":"<ul> <li>Add city and region for a searched station</li> <li>Add network for a searched line</li> <li>Add vehicle position configuration</li> </ul>"},{"location":"schedule/android/releases/2.3.0/#tasks","title":"Tasks","text":"<ul> <li>Add custom analytics events</li> <li>Update ScheduleEnvironment which can have SBX, CUS and PROD</li> <li>Delegate is no more accessible</li> <li>Add navigation listener and remove navigation callbacks from <code>ScheduleUI.init()</code></li> <li>Rename <code>ScheduleConfiguration.featuresConfiguration</code> by <code>ScheduleConfiguration.features</code></li> </ul>"},{"location":"schedule/android/releases/2.3.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.8.21</code></li> <li><code>gradle-wrapper</code> &gt; <code>8.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.0.2</code></li> <li><code>minSdk</code> &gt; <code>23</code></li> <li><code>daggerVersion</code> &gt; <code>2.44</code></li> <li><code>fragmentVersion</code> &gt; <code>1.6.1</code></li> <li><code>kotlinCoroutinesVersion</code> &gt; <code>1.6.4</code></li> <li><code>navigationVersion</code> &gt; <code>2.7.0</code></li> <li><code>roomVersion</code> &gt; <code>2.5.2</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.3.1</code></li> <li><code>com.kisio.navitia.sdk.ui:bookmark</code> &gt; Removed</li> </ul>"},{"location":"schedule/android/releases/2.4.0/","title":"Schedule Android 2.4.0 Changelog","text":"\ud83d\uddd3 11 Jan 2024"},{"location":"schedule/android/releases/2.4.0/#features","title":"Features","text":"<ul> <li>Customizable disruption colors</li> <li>New UI for a station schedules</li> <li>Add network filter in line list</li> <li>Show city for a station</li> </ul>"},{"location":"schedule/android/releases/2.4.0/#fix","title":"Fix","text":"<ul> <li>Fix wrong color on line badges</li> </ul>"},{"location":"schedule/android/releases/2.4.0/#tasks","title":"Tasks","text":"<ul> <li>Add proguard rules for Crashlytics</li> <li>Add proguard rules for <code>java.io.Serializable</code></li> <li>Add frequency for next departures request in configuration</li> </ul>"},{"location":"schedule/android/releases/2.4.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.1.1</code></li> <li><code>compileSdk</code> &gt; <code>34</code></li> <li><code>buildToolsVersion</code> &gt; <code>34.0.0</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.4.1</code></li> </ul>"},{"location":"schedule/android/releases/2.5.0/","title":"Schedule Android 2.5.0 Changelog","text":"\ud83d\uddd3 12 Feb 2024"},{"location":"schedule/android/releases/2.5.0/#features","title":"Features","text":"<ul> <li>Can add custom font</li> <li>Add timezone support for date format</li> <li>Enhance accessibility</li> </ul>"},{"location":"schedule/android/releases/2.5.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.9.22</code></li> <li><code>gradle-wrapper</code> &gt; <code>8.2</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.2.1</code></li> <li><code>com.google.firebase:firebase-crashlytics-gradle</code> &gt; <code>2.9.9</code></li> <li><code>com.google.gms:google-services</code> &gt; <code>4.4.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.12.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.6.2</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.6.2</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.3.2</code></li> <li><code>androidx.room:room-compiler</code> &gt; <code>2.6.1</code>. Use <code>ksp</code> instead of <code>kapt</code></li> <li><code>androidx.room:room-ktx</code> &gt; <code>2.6.1</code></li> <li><code>androidx.room:room-runtime</code> &gt; <code>2.6.1</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.11.0</code></li> <li><code>com.google.dagger:dagger</code> &gt; <code>2.50</code></li> <li><code>com.google.dagger:dagger-android-support</code> &gt; <code>2.50</code></li> <li><code>com.google.dagger:dagger-compiler</code> &gt; <code>2.50</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.13.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.3.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.13.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.5.1</code></li> <li><code>androidx.test.espresso:espresso-core</code> &gt; <code>3.5.1</code></li> <li><code>androidx.test:runner</code> &gt; <code>1.5.2</code></li> <li><code>androidx.test:rules</code> &gt; <code>1.5.2</code></li> </ul>"},{"location":"schedule/android/releases/2.5.1/","title":"Schedule Android 2.5.1 Changelog","text":"\ud83d\uddd3 21 Mar 2024"},{"location":"schedule/android/releases/2.5.1/#fixes","title":"Fixes","text":"<ul> <li>Fix autocompletion clear button</li> <li>Fix favorites data after an update</li> </ul>"},{"location":"schedule/android/releases/2.6.0/","title":"Schedule Android 2.6.0 Changelog","text":"\ud83d\uddd3 21 Mai 2024"},{"location":"schedule/android/releases/2.6.0/#features","title":"Features","text":"<ul> <li>Enhance accessibility</li> <li>Add <code>showDirectlyAutoCompletion()</code></li> </ul>"},{"location":"schedule/android/releases/2.6.0/#task","title":"Task","text":"<ul> <li>Enlarge horizontally main content</li> <li>Update next departure design</li> </ul>"},{"location":"schedule/android/releases/2.6.0/#fixes","title":"Fixes","text":"<ul> <li>Fix initialization of <code>ScheduleDisruptionColors</code></li> <li>Remove fallback on failed database migration</li> <li>Stop calling next departures when the screen is not visible</li> <li>Fix autocompletion when leaving and going back to the module</li> <li>Fix crash when clicking back button</li> <li>Fix crash when the user starts typing in autocompletion</li> <li>Reload favorites when switching tab</li> <li>Fix subcategories lines</li> </ul>"},{"location":"schedule/android/releases/2.6.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.14.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.4.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.14.0</code></li> </ul>"},{"location":"schedule/android/releases/2.7.0/","title":"Schedule Android 2.7.0 Changelog","text":"\ud83d\uddd3 24 Jun 2024"},{"location":"schedule/android/releases/2.7.0/#features","title":"Features","text":"<ul> <li>New timetable UI</li> </ul>"},{"location":"schedule/android/releases/2.7.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.core:core-ktx</code> &gt; <code>1.13.1</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.7.1</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.0</code></li> <li><code>androidx.viewpager2:viewpager2</code> &gt; <code>1.1.0</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.12.0</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.5.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.15.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.4.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.15.0</code></li> </ul>"},{"location":"schedule/android/releases/2.7.1/","title":"Schedule Android 2.7.1 Changelog","text":"\ud83d\uddd3 26 Jul 2024"},{"location":"schedule/android/releases/2.7.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.16.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.5.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.16.0</code></li> </ul>"},{"location":"schedule/android/releases/2.7.2/","title":"Schedule Android 2.7.2 Changelog","text":"\ud83d\uddd3 08 Aug 2024"},{"location":"schedule/android/releases/2.7.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.16.1</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.5.1</code></li> </ul>"},{"location":"schedule/android/releases/2.8.0/","title":"Schedule Android 2.8.0 Changelog","text":"\ud83d\uddd3 09 Sept 2024"},{"location":"schedule/android/releases/2.8.0/#features","title":"Features","text":"<ul> <li>New contextual menu with the Go from / Go to feature when clicking on a favorite station</li> <li>Add a <code>+1</code> label if a next departure is the next day</li> <li>Add an individual empty state if a destination has no next departures</li> </ul>"},{"location":"schedule/android/releases/2.8.0/#fixes","title":"Fixes","text":"<ul> <li>Fix history database in the autocompletion search</li> <li>Fix network filter mechanic and it can bet written in 2 lines</li> <li>Fix empty state and error handling on the lines pager</li> <li>Fix the timetable update after selecting an hour</li> </ul>"},{"location":"schedule/android/releases/2.8.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.7.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.2</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.4</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.17.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>2.17.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.3</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.3</code></li> <li><code>androidx.test:core</code> &gt; <code>1.6.1</code></li> <li><code>androidx.test.ext:junit</code> &gt; <code>1.2.1</code></li> <li><code>androidx.test:rules</code> &gt; <code>1.6.1</code></li> <li><code>androidx.test:runner</code> &gt; <code>1.6.1</code></li> <li><code>androidx.test.espresso:espresso-core</code> &gt; <code>3.6.1</code></li> </ul>"},{"location":"schedule/android/releases/2.8.1/","title":"Schedule Android 2.8.1 Changelog","text":"\ud83d\uddd3 24 Sept 2024"},{"location":"schedule/android/releases/2.8.1/#fix","title":"Fix","text":"<ul> <li>The height of next departures in the timetable adjusts based on its content</li> </ul>"},{"location":"schedule/android/releases/2.9.0/","title":"Schedule Android 2.9.0 Changelog","text":"\ud83d\uddd3 31 Oct 2024"},{"location":"schedule/android/releases/2.9.0/#features","title":"Features","text":"<ul> <li>Configurable display of a line's disruption level</li> <li>Hide upcoming departures if there is unavailable data in the timetable screen</li> </ul>"},{"location":"schedule/android/releases/2.9.0/#fixes","title":"Fixes","text":"<ul> <li>Remove problematic animations in the timetable screen</li> </ul>"},{"location":"schedule/android/releases/2.9.0/#tasks","title":"Tasks","text":"<ul> <li>Enhance bookmark mode configuration</li> <li>Enhance calendar theme overlaying</li> </ul>"},{"location":"schedule/android/releases/2.9.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.1</code></li> <li><code>com.google.firebase:firebase-crashlytics-gradle</code> &gt; <code>3.0.2</code></li> <li><code>com.google.gms:google-services</code> &gt; <code>4.4.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.18.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>2.18.0</code></li> </ul>"},{"location":"schedule/android/releases/2.9.1/","title":"Schedule Android 2.9.1 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"schedule/android/releases/2.9.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.9.25</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.2</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.15.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.5</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.7</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.5.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.19.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.2</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.19.0</code></li> </ul>"},{"location":"schedule/android/releases/2.9.2/","title":"Schedule Android 2.9.2 Changelog","text":"\ud83d\uddd3 24 Dec 2024"},{"location":"schedule/android/releases/2.9.2/#fixes","title":"Fixes","text":"<ul> <li>Add a fallback for database migrations</li> </ul>"},{"location":"schedule/android/releases/2.9.3/","title":"Schedule Android 2.9.3 Changelog","text":"\ud83d\uddd3 03 Feb 2025"},{"location":"schedule/android/releases/2.9.3/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.3</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.3</code></li> </ul>"},{"location":"schedule/android/releases/2.9.4/","title":"Schedule Android 2.9.4 Changelog","text":"\ud83d\uddd3 25 Feb 2025"},{"location":"schedule/android/releases/2.9.4/#fixes","title":"Fixes","text":"<ul> <li>Fix lines list not updated when a network is selected</li> <li>Fix the preselection of the date in the timetable</li> <li>Directly show the direction when it is unique in the timetable</li> <li>Fix the display of the direction selector when there is no data to show</li> <li>Fix the action of the external navigation buttons when the roadmap is opened for a favorite journey from another module</li> </ul>"},{"location":"schedule/android/releases/2.9.4/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.10.2</code></li> <li><code>kotlinVersion</code> &gt; <code>2.1.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.8.0</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>buildToolsVersion</code> &gt; <code>35.0.0</code></li> <li><code>daggerVersion</code> &gt; <code>2.55</code></li> <li><code>fragmentVersion</code> &gt; <code>1.8.5</code></li> <li><code>lifecycleVersion</code> &gt; <code>2.8.7</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.15.0</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.4.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.20.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.4</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.20.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.6.3</code></li> </ul>"},{"location":"schedule/android/releases/2.9.5/","title":"Schedule Android 2.9.5 Changelog","text":"\ud83d\uddd3 05 Mar 2025"},{"location":"schedule/android/releases/2.9.5/#fixes","title":"Fixes","text":"<ul> <li>Destinations without upcoming departures are no longer displayed in the timetable</li> </ul>"},{"location":"schedule/android/releases/2.9.6/","title":"Schedule Android 2.9.6 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"schedule/android/releases/2.9.6/#dependencies","title":"Dependencies","text":"<ul> <li><code>fragmentVersion</code> &gt; <code>1.8.6</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.1</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.7.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.21.0</code></li> </ul>"},{"location":"schedule/android/releases/2.9.7/","title":"Schedule Android 2.9.7 Changelog","text":"\ud83d\uddd3 23 Apr 2025"},{"location":"schedule/android/releases/2.9.7/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.11.1</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.9.1</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.7.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.22.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.5</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.21.0</code></li> <li><code>androidx.room:room-compiler</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-ktx</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-runtime</code> &gt; <code>2.7.0</code></li> <li><code>androidx.core:core-ktx</code>&gt; <code>1.16.0</code></li> </ul>"},{"location":"schedule/android/releases/2.9.8/","title":"Schedule Android 2.9.8 Changelog","text":"\ud83d\uddd3 05 Jun 2025"},{"location":"schedule/android/releases/2.9.8/#fixes","title":"Fixes","text":"<ul> <li>Fix enum serialization</li> <li>Fix nullable binding</li> <li>Fix same view id for recycler view</li> <li>Fix binding called when the view is destroyed</li> </ul>"},{"location":"schedule/android/releases/2.9.9/","title":"Schedule Android 2.9.9 Changelog","text":"\ud83d\uddd3 05 Jun 2025"},{"location":"schedule/android/releases/2.9.9/#fixes","title":"Fixes","text":"<ul> <li>Fix crash when redirecting to time table screen</li> <li>Fix crash when no network is available</li> <li>Fix crash view state same id</li> </ul>"},{"location":"schedule/ios/","title":"Schedule iOS","text":""},{"location":"schedule/ios/#setup","title":"Setup","text":"<p>In your project, add the following lines to your <code>Podfile</code>:</p> <pre><code>source 'https://github.com/CocoaPods/Specs.git' # Default Cocoapods URL\nsource 'https://github.com/hove-io/Podspecs.git' # Schedule podspec URL\n\ntarget 'YOUR_PROJECT_SCHEME' do\n  pod 'ScheduleSDK', '4.2.1' # Schedule Pod definition\nend\n\n# Required for XCFramework\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n    end\n  end\nend\n</code></pre> <p>Using your CLI, run <code>pod install</code> in your project directory.</p>"},{"location":"schedule/ios/#implementation","title":"Implementation","text":"<p>Warning</p> <p>Make sure to read the modules configuration section before proceeding</p> <p>This module is set up by calling <code>Schedule.shared.initialize()</code> method which takes the following parameters:</p> Name Required Description Type Example <code>coverage</code> Navitia coverage <code>String</code> <code>fr-idf</code> <code>token</code> Navitia token <code>String</code> <code>ABCD-1234-...</code> <code>timeZone</code> Time zone <code>String</code> <code>Europe/Paris</code> <code>env</code> Navitia environment <code>String</code> <code>PROD</code> <code>colors</code> Define the custom colors <code>ScheduleColorsConfiguration</code> - <code>unifiedColors</code> Define the custom colors <code>UnifiedColorsConfiguration</code> - <code>fonts</code> Use custom fonts <code>ScheduleFontsConfiguration</code> - <code>lineResources</code> List of transport lines resource IDs <code>[LineResource]</code> - <code>modeResources</code> List of transport modes resource IDs <code>[ModeResource]</code> - <code>transportCategories</code> List of supported transport modes <code>[TransportCategory]</code> - <code>networkResources</code> List of network resource IDs <code>[NetworkResource]</code> - <code>providerResources</code> Transport providers configuration <code>[ProviderResource]</code> - <code>features</code> Enable/disable some features <code>ScheduleFeaturesConfiguration</code> - <p>You can also call the <code>initialize()</code> method with the global JSON configuration file added to your application bundle:</p> Name Required Description Type Example <code>configurationJsonFile</code> Global configuration JSON file name <code>String</code> <code>configuration.json</code> Example Configuration with fileManual configuration <pre><code>do {\n    try Schedule.shared.initialize(\n        token: \"your_token\", \n        configurationJsonFile: \"schedule_configuration.json\"\n    )                                                               \n} catch {\n    Logger.error(\"%@\", String(\n        format: \"Schedule SDK cannot be initialized! %@\", \n        error.localizedDescription\n    ))\n}                                   \n</code></pre> <pre><code>do {\n    let transportCategories = [TransportCategory(\n        modules: [\"schedule\"],\n        iconRes: \"ic_section_mode_metro\",\n        nameRes: \"metro\",\n        selected: true,\n        modes: [TransportCategoryMode(\n            physical: TransportPhysicalMode(\n                id: \"physical_mode:Metro\", \n                nameRes: \"metro\"\n            ),\n            commercial: TransportCommercialMode(\n                id: \"commercial_mode:Metro\", \n                name: \"Metro\"\n            )\n        )],\n        firstSectionModes: [\"walking\"],\n        lastSectionModes: [\"walking\"]\n    )]\n\n    let scheduleColorsConfiguration = ScheduleColorsConfiguration(\n        primaryColor: \"#88819f\", \n        secondaryColor: \"#8faa96\"\n    )\n\n    try Schedule.shared.initialize(\n        coverage: \"fr-idf\",\n        token: \"your_token\",\n        timeZone: \"your_country\",\n        env: \"PROD\",\n        colors: scheduleColorsConfiguration,\n        transportCategories: transportCategories\n    )                                                                  \n} catch {\n    Logger.error(\"%@\", String(\n        format: \"Schedule SDK cannot be initialized! %@\", \n        error.localizedDescription\n    ))\n}                                   \n</code></pre>"},{"location":"schedule/ios/#events-tracking","title":"Events tracking","text":"<p>In order to receive the list of generated events within Schedule module, you have to assign the instance of the tracker to the Schedule module instance as follows and implement the required methods:</p> <pre><code>Schedule.shared.tracker = self\n</code></pre>"},{"location":"schedule/ios/#launching","title":"Launching","text":"<p>This module has a single entry point. The parameter <code>showBack</code> handles the back button visibility on the first screen.</p> <pre><code>guard let scheduleViewController = Schedule.shared.rootViewController else {\n    return nil\n}\nscheduleViewController.showBack = false // Hide back button embedded in the first screen\n</code></pre> <p>If you want to use the <code>rootViewController</code> as a <code>ChildViewController</code> of your <code>ViewController</code>, you should embed it in an <code>NavigationController</code>. </p> Using a <code>NavigationController</code>Using a <code>ChildViewController</code> <pre><code>navigationController?.pushViewController(scheduleViewController, animated: false)\n</code></pre> <pre><code>yourViewController.addChild(UINavigationController(\n    rootViewController: scheduleViewController\n))\n</code></pre>"},{"location":"schedule/ios/#communicating-with-other-modules","title":"Communicating with other modules","text":"<p>Schedule module navigate to other modules directly. To do this, the host application must initialize <code>Router</code>. This singleton will ensure communication between the different modules. Communication will not occur unless those are registered beforehand:</p> <pre><code>try Router.shared\n    .register(schedule: Schedule.shared.scheduleRouter)\n    ... // Register modules and/or app\n    .initialize()\n</code></pre>"},{"location":"schedule/ios/#modules","title":"Modules","text":""},{"location":"schedule/ios/#bookmark","title":"Bookmark","text":"<p>Schedule module communicates with Bookmark module in order to display favorite stations. You should enable the <code>bookmark_mode</code> parameter in the features configuration.</p> <p>Bookmark module must be registered in the <code>Router</code> to build the connection between these modules</p> <pre><code>Router.shared.register(bookmark: Bookmark.shared.bookmarkRouter)\n</code></pre>"},{"location":"schedule/ios/#journey","title":"Journey","text":"<p>This module communicates with Journey module in order to get directions for a chosen itinerary. You should enable the <code>go_from_go_to</code> parameter in the features configuration.</p> <p>Bookmark module must be registered in the <code>Router</code> to build the connection between these modules</p> <pre><code>Router.shared.register(journey: JourneySdk.shared.journeyRouter)\n</code></pre>"},{"location":"schedule/ios/changelogs/","title":"Schedule iOS Changelogs","text":"<ul> <li>v4.2.1 (14 Oct 2025)</li> <li>v4.2.0 (11 Sep 2025)</li> <li>v4.1.2 (09 May 2025)</li> <li>v4.1.1 (22 Apr 2025)</li> <li>v4.1.0 (24 Mar 2025)</li> <li>v4.0.0 (24 Feb 2025)</li> <li>v3.10.2 (12 Feb 2025)</li> <li>v3.10.1 (04 Feb 2025)</li> <li>v3.10.0 (02 Dec 2024)</li> <li>v3.9.1 (07 Nov 2024)</li> <li>v3.9.0 (30 Oct 2024)</li> <li>v3.8.0 (24 Sep 2024)</li> <li>v3.7.0 (24 Jul 2024)</li> <li>v3.6.1 (27 Jun 2024)</li> <li>v3.6.0 (25 Jun 2024)</li> <li>v3.5.1 (13 Jun 2024)</li> <li>v3.5.0 (21 Mai 2024)</li> <li>v3.4.0 (27 Mar 2024)</li> <li>v3.3.0 (25 Aug 2023)</li> <li>v3.2.2 (03 Apr 2023)</li> <li>v3.2.1 (17 Mar 2023)</li> <li>v3.2.0 (15 Feb 2023)</li> <li>v3.1.2 (19 Jan 2023)</li> <li>v3.1.1 (13 Jan 2023)</li> <li>v3.1.0 (10 Jan 2023)</li> <li>v3.0.2 (20 Oct 2022)</li> </ul>"},{"location":"schedule/ios/releases/3.0.2/","title":"Schedule iOS 3.0.2 Changelog","text":"\ud83d\uddd3 20 Oct 2022"},{"location":"schedule/ios/releases/3.0.2/#features","title":"Features","text":"<ul> <li>Can consume a globalized configuration</li> <li>Redesign the whole module</li> </ul>"},{"location":"schedule/ios/releases/3.0.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>Swift</code> &gt; <code>5.6</code></li> <li><code>NavitiaSDK</code>, <code>2.3.2</code></li> <li><code>RealmSwift</code> &gt; <code>10.17.0</code></li> </ul>"},{"location":"schedule/ios/releases/3.1.0/","title":"Schedule iOS 3.1.0 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"schedule/ios/releases/3.1.0/#features","title":"Features","text":"<ul> <li>Add favorites </li> <li>Add real time vehicle position </li> </ul>"},{"location":"schedule/ios/releases/3.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix page scrolling </li> </ul>"},{"location":"schedule/ios/releases/3.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>RouterEngine</code> &gt; <code>0.5.0</code></li> <li><code>ToolboxEngine</code> &gt; <code>1.6.6</code></li> <li><code>DesignEngine</code> &gt; <code>2.4.0</code></li> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> </ul>"},{"location":"schedule/ios/releases/3.1.1/","title":"Schedule iOS 3.1.1 Changelog","text":"\ud83d\uddd3 13 Jan 2023"},{"location":"schedule/ios/releases/3.1.1/#fixes","title":"Fixes","text":"<ul> <li>Fix back button when <code>ScheduleViewController</code> is embedded as a child view controller. </li> </ul>"},{"location":"schedule/ios/releases/3.1.2/","title":"Schedule iOS 3.1.2 Changelog","text":"\ud83d\uddd3 19 Jan 2023"},{"location":"schedule/ios/releases/3.1.2/#tasks","title":"Tasks","text":"<ul> <li>Add back button visibility param</li> </ul>"},{"location":"schedule/ios/releases/3.1.2/#fixes","title":"Fixes","text":"<ul> <li>Fix crash when bookmark is not enabled</li> </ul>"},{"location":"schedule/ios/releases/3.10.0/","title":"Schedule iOS 3.10.0 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"schedule/ios/releases/3.10.0/#tasks","title":"Tasks","text":"<ul> <li>Show/hide options in popup based on configuration</li> </ul>"},{"location":"schedule/ios/releases/3.10.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>v2.18.0</code></li> <li><code>RouterEngine</code> -&gt; <code>v1.5.3</code></li> </ul>"},{"location":"schedule/ios/releases/3.10.1/","title":"Schedule iOS 3.10.1 Changelog","text":"\ud83d\uddd3 04 Feb 2025"},{"location":"schedule/ios/releases/3.10.1/#fixes","title":"Fixes","text":"<ul> <li>Remove Navitia call when choosing to show next departures screen from favorites list</li> <li>Fix wrong line text color displayed</li> </ul>"},{"location":"schedule/ios/releases/3.10.1/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"schedule/ios/releases/3.10.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>2.18.1</code></li> <li><code>RouterEngine</code> -&gt; <code>1.5.4</code></li> </ul>"},{"location":"schedule/ios/releases/3.10.2/","title":"Schedule iOS 3.10.2 Changelog","text":"\ud83d\uddd3 12 Feb 2025"},{"location":"schedule/ios/releases/3.10.2/#tasks","title":"Tasks","text":"<ul> <li>Upgrade RealmSwift and FlexLayout dependencies</li> </ul>"},{"location":"schedule/ios/releases/3.10.2/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"schedule/ios/releases/3.10.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>RealmSwift</code> -&gt; <code>20.0.1</code></li> <li><code>FlexLayout</code> -&gt; <code>2.1.0</code> </li> </ul>"},{"location":"schedule/ios/releases/3.2.0/","title":"Schedule iOS 3.2.0 Changelog","text":"\ud83d\uddd3 15 Feb 2023"},{"location":"schedule/ios/releases/3.2.0/#features","title":"Features","text":"<ul> <li>Show disruption icon on favorite stations</li> </ul>"},{"location":"schedule/ios/releases/3.2.1/","title":"Schedule iOS 3.2.1 Changelog","text":"\ud83d\uddd3 17 Mar 2023"},{"location":"schedule/ios/releases/3.2.1/#tasks","title":"Tasks","text":"<ul> <li>Change configuration color variable names</li> </ul>"},{"location":"schedule/ios/releases/3.2.1/#fixes","title":"Fixes","text":"<ul> <li>Fix saved coordinates in history</li> </ul>"},{"location":"schedule/ios/releases/3.2.2/","title":"Schedule iOS 3.2.2 Changelog","text":"\ud83d\uddd3 03 Apr 2023"},{"location":"schedule/ios/releases/3.2.2/#fixes","title":"Fixes","text":"<ul> <li>Fix Realm configuration objects</li> </ul>"},{"location":"schedule/ios/releases/3.3.0/","title":"Schedule iOS 3.3.0 Changelog","text":"\ud83d\uddd3 25 Aug 2023"},{"location":"schedule/ios/releases/3.3.0/#features","title":"Features","text":"<ul> <li>Add city and region for a searched station</li> <li>Add network for a searched line</li> <li>Add <code>ShowBack</code> param</li> </ul>"},{"location":"schedule/ios/releases/3.3.0/#tasks","title":"Tasks","text":"<ul> <li>Add custom analytic events</li> </ul>"},{"location":"schedule/ios/releases/3.3.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>FlexLayout</code> -&gt; <code>1.3.31</code></li> <li><code>RealmSwift</code> -&gt; <code>10.42.0</code></li> <li><code>DesignEngine</code> -&gt; <code>2.7.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.0.0</code></li> <li><code>BookmarkSDK</code> -&gt; <code>Removed</code></li> <li><code>RxSwift</code> -&gt; <code>Removed</code></li> </ul>"},{"location":"schedule/ios/releases/3.3.0/#deployment-target","title":"Deployment target","text":"<ul> <li><code>iOS 14</code> minimun</li> </ul>"},{"location":"schedule/ios/releases/3.4.0/","title":"Schedule iOS 3.4.0 Changelog","text":"\ud83d\uddd3 27 Mar 2024"},{"location":"schedule/ios/releases/3.4.0/#features","title":"Features","text":"<ul> <li>Update all schedules screen</li> </ul>"},{"location":"schedule/ios/releases/3.4.0/#tasks","title":"Tasks","text":"<ul> <li>Expand horizontally the lines container</li> <li>Customize colors for disruptions level</li> <li>Add accessibility</li> <li>Add title on main screen</li> </ul>"},{"location":"schedule/ios/releases/3.4.0/#fixes","title":"Fixes","text":"<ul> <li>Fix disruptions icon display</li> </ul>"},{"location":"schedule/ios/releases/3.4.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"schedule/ios/releases/3.5.0/","title":"Schedule iOS 3.5.0 Changelog","text":"\ud83d\uddd3 21 Mai 2024"},{"location":"schedule/ios/releases/3.5.0/#features","title":"Features","text":"<ul> <li>Add routing to autocompletion screen</li> </ul>"},{"location":"schedule/ios/releases/3.5.0/#tasks","title":"Tasks","text":"<ul> <li>Update next departure's design</li> </ul>"},{"location":"schedule/ios/releases/3.5.0/#fixes","title":"Fixes","text":"<ul> <li>Fix navigation to line details screen</li> </ul>"},{"location":"schedule/ios/releases/3.5.0/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.2.0</code></li> <li>DesignEngine <code>v2.13.0</code></li> </ul>"},{"location":"schedule/ios/releases/3.5.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"schedule/ios/releases/3.5.1/","title":"Schedule iOS 3.5.1 Changelog","text":"\ud83d\uddd3 13 Jun 2024"},{"location":"schedule/ios/releases/3.5.1/#tasks","title":"Tasks","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"schedule/ios/releases/3.5.1/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"schedule/ios/releases/3.6.0/","title":"Schedule iOS 3.6.0 Changelog","text":"\ud83d\uddd3 25 Jun 2024"},{"location":"schedule/ios/releases/3.6.0/#features","title":"Features","text":"<ul> <li>New time schedules screen</li> </ul>"},{"location":"schedule/ios/releases/3.6.0/#tasks","title":"Tasks","text":"<ul> <li>Ability to show/hide the station map</li> <li>Disable compass on station map</li> </ul>"},{"location":"schedule/ios/releases/3.6.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"schedule/ios/releases/3.6.1/","title":"Schedule iOS 3.6.1 Changelog","text":"\ud83d\uddd3 28 Jun 2024"},{"location":"schedule/ios/releases/3.6.1/#fixes","title":"Fixes","text":"<ul> <li>Fix selection when only one direction is available in schedules time table</li> <li>Fix bottom sheet not fully expanded</li> <li>Fix back button not showing when bottom sheet is expanded</li> </ul>"},{"location":"schedule/ios/releases/3.6.1/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"schedule/ios/releases/3.7.0/","title":"Schedule iOS 3.7.0 Changelog","text":"\ud83d\uddd3 24 Jul 2024"},{"location":"schedule/ios/releases/3.7.0/#tasks","title":"Tasks","text":"<ul> <li>Use Terminus schedules API for next departures calls</li> </ul>"},{"location":"schedule/ios/releases/3.7.0/#fixes","title":"Fixes","text":"<ul> <li>Fix bottom sheet size issue on line details screen launch</li> </ul>"},{"location":"schedule/ios/releases/3.7.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"schedule/ios/releases/3.8.0/","title":"Schedule iOS 3.8.0 Changelog","text":"\ud83d\uddd3 24 Sep 2024"},{"location":"schedule/ios/releases/3.8.0/#features","title":"Features","text":"<ul> <li>Add next departures screen entry point</li> <li>Add see all schedules button for favorite stations</li> <li>Display tomorrow indicator in next departures</li> </ul>"},{"location":"schedule/ios/releases/3.8.0/#tasks","title":"Tasks","text":"<ul> <li>Use TerminusSchedule API to show next departures</li> <li>Use direction name for next departures</li> </ul>"},{"location":"schedule/ios/releases/3.8.0/#fixes","title":"Fixes","text":"<ul> <li>Fix next departures empty state</li> <li>Fix blinking animation</li> </ul>"},{"location":"schedule/ios/releases/3.8.0/#compiler","title":"Compiler","text":"<ul> <li><code>Swift</code> -&gt; <code>6.0</code></li> </ul>"},{"location":"schedule/ios/releases/3.9.0/","title":"Schedule iOS 3.9.0 Changelog","text":"\ud83d\uddd3 30 Oct 2024"},{"location":"schedule/ios/releases/3.9.0/#features","title":"Features","text":"<ul> <li>Configurable display of a line's disruption level</li> <li>Hide upcoming departures if there is unavailable data in the timetable screen</li> </ul>"},{"location":"schedule/ios/releases/3.9.0/#tasks","title":"Tasks","text":"<ul> <li>Enhance bookmark mode configuration</li> </ul>"},{"location":"schedule/ios/releases/3.9.0/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.5.2</code></li> <li>DesignEngine <code>v2.17.0</code></li> </ul>"},{"location":"schedule/ios/releases/3.9.0/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0</code></li> </ul>"},{"location":"schedule/ios/releases/3.9.1/","title":"Schedule iOS 3.9.1 Changelog","text":"\ud83d\uddd3 07 Nov 2024"},{"location":"schedule/ios/releases/3.9.1/#fix","title":"Fix","text":"<ul> <li>Fix the activation and deactivation of the bookmark feature</li> </ul>"},{"location":"schedule/ios/releases/4.0.0/","title":"Schedule iOS 4.0.0 Changelog","text":"\ud83d\uddd3 24 Feb 2025"},{"location":"schedule/ios/releases/4.0.0/#tasks","title":"Tasks","text":"<ul> <li>Extract module configuration from unified configuration</li> <li>Add unified colors configuration</li> <li>Update minimum iOS deployment to 16</li> <li>Better error handling for pagination</li> </ul>"},{"location":"schedule/ios/releases/4.0.0/#fixes","title":"Fixes","text":"<ul> <li>Fix back button margin</li> <li>Fix font registering </li> <li>Fix map centering</li> <li>Fix next departures margins in favorite cell </li> <li>Remove rounded corners on top of next departures screen when no map is displayed</li> <li>Fix autocompletion title</li> </ul>"},{"location":"schedule/ios/releases/4.0.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.8.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.6.0</code></li> <li><code>DesignEngine</code> -&gt; <code>3.0.0</code></li> </ul>"},{"location":"schedule/ios/releases/4.1.0/","title":"Schedule iOS 4.1.0 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"schedule/ios/releases/4.1.0/#tasks","title":"Tasks","text":"<ul> <li>Display line name for configured commercial mode</li> </ul>"},{"location":"schedule/ios/releases/4.1.0/#fixes","title":"Fixes","text":"<ul> <li>Sort transport modes in autocompletion</li> <li>Filter directions by name and not by id</li> <li>Remove permission alert to go to journey when user location is disabled </li> </ul>"},{"location":"schedule/ios/releases/4.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.9.0</code></li> <li><code>DesignEngine</code> -&gt; <code>3.1.0</code></li> </ul>"},{"location":"schedule/ios/releases/4.1.1/","title":"Schedule iOS 4.1.1 Changelog","text":"\ud83d\uddd3 22 Apr 2025"},{"location":"schedule/ios/releases/4.1.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>3.2.0</code></li> </ul>"},{"location":"schedule/ios/releases/4.1.2/","title":"Schedule iOS 4.1.2 Changelog","text":"\ud83d\uddd3 09 May 2025"},{"location":"schedule/ios/releases/4.1.2/#tasks","title":"Tasks","text":"<ul> <li>Added dSYM generation for symbolication of crash reports</li> </ul>"},{"location":"schedule/ios/releases/4.1.2/#fixes","title":"Fixes","text":"<ul> <li>Fixed infinite loader in line details screen</li> </ul>"},{"location":"schedule/ios/releases/4.1.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>3.2.1</code></li> </ul>"},{"location":"schedule/ios/releases/4.2.0/","title":"Schedule iOS 4.2.0 Changelog","text":"\ud83d\uddd3 11 Sep 2025"},{"location":"schedule/ios/releases/4.2.0/#features","title":"Features","text":"<ul> <li>Add external link to all schedules screen</li> <li>Add delete feature to search history</li> </ul>"},{"location":"schedule/ios/releases/4.2.0/#tasks","title":"Tasks","text":"<ul> <li>Make all schedules screen scrollable</li> <li>Optimize bottom sheet behavior</li> </ul>"},{"location":"schedule/ios/releases/4.2.0/#compiler","title":"Compiler","text":"<ul> <li>Swift  `6.1.2``</li> </ul>"},{"location":"schedule/ios/releases/4.2.1/","title":"Schedule iOS 4.2.1 Changelog","text":"\ud83d\uddd3 14 Oct 2025"},{"location":"schedule/ios/releases/4.2.1/#fixes","title":"Fixes","text":"<ul> <li>Fix app freezing after date change in all schedules screen</li> </ul>"},{"location":"schedule/ios/releases/4.2.1/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.2.0</code></li> </ul>"},{"location":"schedule/screens/","title":"Schedule Screens","text":""},{"location":"schedule/screens/#screen-flow","title":"Screen flow","text":"<p>Refer to the following schema to learn more about different interactions and how to navigate between module screens:</p> <pre><code>graph TB\n    Lines(Lines) --&gt; Search(Search)\n    Lines(Lines) --&gt; Timetable(Timetable)\n    Search(Search) --&gt; Stations(Stations)\n    Lines(Lines) --&gt; Stations(Stations)\n    Search(Search) --&gt; Timetable(Timetable)\n    Stations(Stations) --&gt; Timetable(Timetable)</code></pre>"},{"location":"schedule/screens/#lines","title":"Lines","text":"<p>The lines screen allows the user to see all the lines of the defined coverage. The lines are sorted by the different configurable transport categories. Another filter is added for each transport mode in the selected transport category. </p> <p>The lines can also be grouped by networks. To enable this feature, you need to switch the <code>transport_networks</code> parameter to <code>true</code> in the features configuration. </p> AndroidiOS <p></p> <p></p> <p>If there is any favorite station, an additional tab will be shown listing all bookmarked stations. Each station has a maximum of 3 next departures by destination or an empty state if data is unavailable.</p> AndroidiOS <p></p> <p></p>"},{"location":"schedule/screens/#search","title":"Search","text":"<p>The search screen allows the user to seek for a station or a line using a built-in autocompletion. The result is based on the user search input text. The station result combines both the name of the station and all the lines passing through that station. This will allow the user to select directly the searched line and get the list of all destinations starting from the target station point.</p> <p>A history feature is added to this screen, allowing the user to choose from the previous selected items. The <code>maxHistory</code> parameter defines the maximum number of items to show in the history list.</p> AndroidiOS <p></p> <p></p>"},{"location":"schedule/screens/#stations","title":"Stations","text":"<p>The station screen lists all the stations of the selected line alphabetically sorted. A search feature is added to filter the lines and makes it easier for the user to search for the desired station. In case the <code>directions_first</code> parameter is set to <code>true</code> in the features configuration, this screen will show all stations of a defined route (destination).</p> AndroidiOS <p></p> <p></p>"},{"location":"schedule/screens/#timetable","title":"Timetable","text":"<p>This screen allows the user to see the next departures of the target transport mode through the selected station which is heading to the chosen destination. The map gives more details about the vehicle journey by drawing the line path and both selected station and destination markers.</p> AndroidiOS <p></p> <p></p> <p>The user can also bookmark this selected station by taping the Favorite button on the bottom-right corner of the map. To enable this feature, you need to switch the <code>bookmark_mode</code> parameter to <code>true</code> in the features configuration. </p> AndroidiOS <p></p> <p></p> <p>When the user taps on the All schedules button in the next departures screen, the all schedules screen shows up and gives all theoretical departures of the selected line from the selected station to the target destination.</p> <p>This screen includes a datepicker button allowing the user to choose a date and see all the scheduled departures on that date.</p> AndroidiOS <p></p> <p></p>"},{"location":"traffic/android/","title":"Traffic Android","text":""},{"location":"traffic/android/#setup","title":"Setup","text":"<p>Add the following dependencies in the <code>build.gradle</code> file of your application:</p> <pre><code>dependencies {\n    implementation(\"com.kisio.navitia.sdk.ui:traffic:3.2.1\")\n}\n</code></pre> <p>The activity launching Traffic must handle the following configuration changes: <code>orientation|screenSize</code> declared into your <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;activity\n    android:configChanges=\"orientation|screenSize\"/&gt;\n</code></pre>"},{"location":"traffic/android/#implementation","title":"Implementation","text":"<p>Warning</p> <p>Make sure to read the modules configuration section before proceeding</p> <p>This module is set up by calling <code>TrafficUI.getInstance()</code>. The singleton behaves like a builder in which each method allows you to configure the module. Then, you need to call the <code>init()</code> method at the end. You should call this method in an <code>Application</code> subclass. This method takes the following parameters:</p> Name Required Description Type Default <code>context</code> Context in which the module is launched <code>Context</code> <code>token</code> Get your token <code>String</code> <code>configuration</code> Module configuration object <code>TrafficConfiguration</code> <code>null</code> <code>configurationJsonFile</code> Module configuration JSON file name <code>String</code> <code>null</code> <code>onNavigate</code> Listener for the navigation between module screens <code>Unit</code> <code>{ _ -&gt; }</code> <code>onBack</code> Listener for the navigation back button click event <code>Unit</code> <code>{ _ -&gt; }</code> Example Configuration with fileManual configuration <pre><code>TrafficUI.getInstance().let { instance -&gt;\n    instance.init(\n        context = this,\n        token = \"your_token\"\n        configurationJsonFile = \"config.json\"\n    )\n}\n</code></pre> <pre><code>TrafficUI.getInstance().let { instance -&gt;\n    instance.init(\n        context = this,\n        token = \"your_token\",\n        configuration = TrafficConfiguration(\n            coverage = \"your_coverage\",\n            timezone = \"Europe/Paris\",\n            env = TrafficEnvironment.PROD,\n            colors = TrafficColors(\n                primary = \"#88819f\"\n            ),\n            transportCategories = listOf&lt;TrafficTransportCategory&gt;()\n        )\n    )\n}\n</code></pre>"},{"location":"traffic/android/#navigation-listener","title":"Navigation listener","text":"<p>Since the module launches its own fragments, you may want your application to be aware of navigation events. For that, you have to set a navigation listener by calling this method before <code>init()</code>.</p> <pre><code>TrafficUI.getInstance()\n    .setNavigationListener(trafficNavigationListenerImpl) // (1)\n</code></pre> <ol> <li><code>trafficNavigationListenerImpl</code> should be the class instance implementing <code>TrafficNavigationListener</code> interface.</li> </ol> <p>This interface gives you the method <code>onBack()</code> for any back event between two fragments and the method <code>onNavigate</code> for the reverse. Each method has a <code>TrafficNavigationListener.Event</code> parameter you can rely on.</p> <pre><code>// Navigation events\nALL_DISRUPTIONS_BACK_TO_EXTERNAL\nALL_DISRUPTIONS_TO_AUTO_COMPLETION\nALL_DISRUPTIONS_TO_DISRUPTION\nALL_DISRUPTIONS_TO_MY_ALERTS\nAUTO_COMPLETION_BACK_TO_ALL_DISRUPTIONS\nAUTO_COMPLETION_TO_EDIT_ALERT\nDISRUPTION_BACK_TO_ALL_DISRUPTIONS\nEDIT_ALERT_BACK_TO_AUTO_COMPLETION\nEDIT_ALERT_BACK_TO_ALL_DISRUPTIONS\nEXTERNAL_TO_TRAFFIC\nMY_ALERTS_BACK_TO_ALL_DISRUPTIONS\nMY_ALERTS_TO_AUTO_COMPLETION\nMY_ALERTS_TO_EDIT_ALERT\n</code></pre>"},{"location":"traffic/android/#alert-subscription","title":"Alert subscription","text":"<p>To enable the alert subscription feature, the following instructions are required: - Add the environment configuration - Pass the Kronos API credentials to the initialization method - Set the firebase token <code>TrafficUI.getInstance().firebaseToken(\"token\")</code> once received from the Firebase API at runtime</p>"},{"location":"traffic/android/#traffic-alert-subscription-credentials","title":"Traffic alert subscription credentials","text":"Name Required Description Type <code>username</code> Kronos authentication username <code>String</code> <code>password</code> Kronos authentication password <code>String</code>"},{"location":"traffic/android/#events-tracking","title":"Events tracking","text":"<p>In order to receive the list of generated events within Traffic module, you have to attach the tracker to the module instance. You can call this method before or after <code>init()</code>.</p> <pre><code>TrafficUI.getInstance()\n    .attachTracker(trafficTrackerImpl) // (1)\n</code></pre> <ol> <li><code>trafficTrackerImpl</code> should be the class instance implementing <code>TrafficTracker</code> interface.</li> </ol>"},{"location":"traffic/android/#launching","title":"Launching","text":"<p>Traffic has a single entry point <code>AllDisruptionsFragment</code>. Assuming you have an <code>Activity</code> with a fragment container, refer to the following example to launch the entry screen fragment:</p> <pre><code>supportFragmentManager.beginTransaction().run {\n    replace(\n        R.id.container_id,\n        AllDisruptionsFragment.newInstance(showBack = false),\n        \"TAG\"\n    )\n    addToBackStack(\"TAG\")\n    commit()\n}\n</code></pre> <p>The <code>newInstance()</code> method creates an instance of the target fragment and takes the following parameters:</p> Name Required Description Type Default <code>showBack</code> Show/hide back button on the first screen <code>Boolean</code> <code>false</code>"},{"location":"traffic/android/#theming","title":"Theming","text":"<p>The module uses graphical components from Material Design 3. To ensure these components function correctly and get displayed properly on the screen, it is crucial to apply the appropriate parent theme:</p> <pre><code>&lt;style name=\"Theme.App\" parent=\"Theme.Material3.*\"&gt; &lt;!-- (1) --&gt;\n    ...\n&lt;/style&gt;\n</code></pre> <ol> <li>Replace by the specific theme. For example: <code>Theme.Material3.Light.NoActionBar</code></li> </ol>"},{"location":"traffic/android/changelogs/","title":"Traffic Android Changelogs","text":"<ul> <li>v3.2.1 (18 Sep 2025)</li> <li>v3.2.0 (11 Sep 2025)</li> <li>v3.1.3 (11 Jun 2025)</li> <li>v3.1.2 (05 Jun 2025)</li> <li>v3.1.1 (23 Apr 2025)</li> <li>v3.1.0 (24 Feb 2025)</li> <li>v3.0.0 (25 Feb 2025)</li> <li>v2.7.2 (03 Feb 2025)</li> <li>v2.7.1 (24 Dec 2024)</li> <li>v2.7.0 (02 Dec 2024)</li> <li>v2.6.1 (31 Oct 2024)</li> <li>v2.6.0 (15 Oct 2024)</li> <li>v2.5.6 (09 Sep 2024)</li> <li>v2.5.5 (08 Aug 2024)</li> <li>v2.5.4 (26 Jul 2024)</li> <li>v2.5.3 (24 Jun 2024)</li> <li>v2.5.2 (21 Mai 2024)</li> <li>v2.5.1 (21 Mar 2024)</li> <li>v2.5.0 (12 Feb 2024)</li> <li>v2.4.0 (11 Jan 2024)</li> <li>v2.3.0 (23 Aug 2023)</li> <li>v2.2.0 (03 Apr 2023)</li> <li>v2.1.3 (17 Mar 2023)</li> <li>v2.1.2 (15 Feb 2023)</li> <li>v2.1.1 (07 Feb 2023)</li> <li>v2.1.0 (10 Jan 2023)</li> <li>v2.0.1 (19 Oct 2022)</li> <li>v2.0.0 (29 Sep 2022)</li> </ul>"},{"location":"traffic/android/releases/2.0.0/","title":"Traffic Android 2.0.0 Changelog","text":"\ud83d\uddd3 29 Sept 2022"},{"location":"traffic/android/releases/2.0.0/#features","title":"Features","text":"<ul> <li>Can consume a globalized configuration</li> <li>Redesign the whole module</li> </ul>"},{"location":"traffic/android/releases/2.0.0/#tasks","title":"Tasks","text":"<ul> <li>Remove sample app</li> <li>Can and should be used as a submodule</li> </ul>"},{"location":"traffic/android/releases/2.0.0/#fixes","title":"Fixes","text":"<ul> <li>Fix application of new filters for the disruptions list</li> <li>Fix text color on computed line logos</li> </ul>"},{"location":"traffic/android/releases/2.0.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlinVersion</code> &gt; <code>1.6.21</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.2.2</code></li> <li><code>com.google.firebase:firebase-crashlytics-gradle</code> &gt; <code>2.9.2</code></li> <li><code>com.google.gms:google-services</code> &gt; <code>4.3.14</code></li> <li><code>org.jfrog.buildinfo:build-info-extractor-gradle</code> &gt; <code>4.28.2</code></li> <li><code>daggerVersion</code> &gt; <code>2.42</code></li> <li><code>fragmentVersion</code> &gt; <code>1.5.2</code></li> <li><code>kotlinCoroutinesVersion</code> &gt; <code>1.6.3</code></li> <li><code>lifecycleVersion</code> &gt; <code>2.5.1</code></li> <li><code>roomVersion</code> &gt; <code>2.4.3</code></li> <li><code>compileSdk</code> &gt; <code>33</code></li> <li><code>buildToolsVersion</code> &gt; <code>33.0.0</code></li> <li><code>targetSdk</code> &gt; <code>33</code></li> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.5.1</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.1.4</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.9.0</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.6.1</code></li> <li><code>com.google.code.gson:gson</code> &gt; <code>2.8.9</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.1</code></li> </ul>"},{"location":"traffic/android/releases/2.0.1/","title":"Traffic Android 2.0.1 Changelog","text":"\ud83d\uddd3 19 Oct 2022"},{"location":"traffic/android/releases/2.0.1/#fixes","title":"Fixes","text":"<ul> <li>Fix publishing of variant modules dependencies</li> </ul>"},{"location":"traffic/android/releases/2.1.0/","title":"Traffic Android 2.1.0 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"traffic/android/releases/2.1.0/#features","title":"Features","text":"<ul> <li>Around me can open directly Traffic</li> </ul>"},{"location":"traffic/android/releases/2.1.0/#tasks","title":"Tasks","text":"<ul> <li>Replace <code>Gson</code> by <code>kotlinx.serialization</code></li> <li>Prefix all layouts by <code>navitia_traffic_</code></li> <li>Token is passed via <code>init()</code> instead of configuration file or object</li> </ul>"},{"location":"traffic/android/releases/2.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix link colors</li> <li>Fix back button action</li> </ul>"},{"location":"traffic/android/releases/2.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle-wrapper</code> &gt; <code>7.4</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>7.3.1</code></li> <li><code>androidx.navigation:navigation-fragment-ktx</code> &gt; <code>2.5.3</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.2.2</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.4.1</code></li> </ul>"},{"location":"traffic/android/releases/2.1.1/","title":"Traffic Android 2.1.1 Changelog","text":"\ud83d\uddd3 07 Feb 2023"},{"location":"traffic/android/releases/2.1.1/#fixes","title":"Fixes","text":"<ul> <li>Fix showing of back button when traffic is opened with another module</li> </ul>"},{"location":"traffic/android/releases/2.1.2/","title":"Traffic Android 2.1.2 Changelog","text":"\ud83d\uddd3 15 Feb 2023"},{"location":"traffic/android/releases/2.1.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.6.1</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.8.0</code></li> </ul>"},{"location":"traffic/android/releases/2.1.3/","title":"Traffic Android 2.1.3 Changelog","text":"\ud83d\uddd3 17 Mar 2023"},{"location":"traffic/android/releases/2.1.3/#tasks","title":"Tasks","text":"<ul> <li>Change configuration color variable names</li> </ul>"},{"location":"traffic/android/releases/2.1.3/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.recyclerview:recyclerview</code> &gt;<code>1.3.0</code> \u2020- <code>androidx.test.ext:junit</code> &gt; <code>1.1.5</code></li> </ul>"},{"location":"traffic/android/releases/2.2.0/","title":"Traffic Android 2.2.0 Changelog","text":"\ud83d\uddd3 03 Apr 2023"},{"location":"traffic/android/releases/2.2.0/#features","title":"Features","text":"<ul> <li>Can add, edit and remove an alert for a line</li> <li>Can show line alerts</li> </ul>"},{"location":"traffic/android/releases/2.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.google.android.flexbox:flexbox</code> &gt; <code>3.0.0</code></li> </ul>"},{"location":"traffic/android/releases/2.3.0/","title":"Traffic Android 2.3.0 Changelog","text":"\ud83d\uddd3 23 Aug 2023"},{"location":"traffic/android/releases/2.3.0/#features","title":"Features","text":"<ul> <li>Show network list</li> <li>Add traffic alert subscription for a network</li> </ul>"},{"location":"traffic/android/releases/2.3.0/#tasks","title":"Tasks","text":"<ul> <li>Add custom analytics events</li> <li>Update <code>TrafficEnvironment</code> which can have <code>SBX</code>, <code>CUS</code> and <code>PROD</code></li> <li>Delegate is no more accessible</li> <li>Add navigation listener and remove navigation callbacks from <code>TrafficUI.init()</code></li> <li>Remove display of first disruption when selecting a disrupted line</li> </ul>"},{"location":"traffic/android/releases/2.3.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.8.21</code></li> <li><code>gradle-wrapper</code> &gt; <code>8.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.0.2</code></li> <li><code>minSdk</code> &gt; <code>23</code></li> <li><code>daggerVersion</code> &gt; <code>2.44</code></li> <li><code>fragmentVersion</code> &gt; <code>1.6.1</code></li> <li><code>kotlinCoroutinesVersion</code> &gt; <code>1.6.4</code></li> <li><code>navigationVersion</code> &gt; <code>2.7.0</code></li> <li><code>roomVersion</code> &gt; <code>2.5.2</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.3.1</code></li> </ul>"},{"location":"traffic/android/releases/2.4.0/","title":"Traffic Android 2.4.0 Changelog","text":"\ud83d\uddd3 11 Jan 2024"},{"location":"traffic/android/releases/2.4.0/#features","title":"Features","text":"<ul> <li>Customizable disruption colors</li> <li>Add network filter in line list</li> <li>Enhance accessibility</li> </ul>"},{"location":"traffic/android/releases/2.4.0/#fixes","title":"Fixes","text":"<ul> <li>Avoid possible crash on day selection for a new line alert</li> <li>Fix lines not showing in My Alerts after adding a subscription</li> <li>Fix title length for a line disruption</li> </ul>"},{"location":"traffic/android/releases/2.4.0/#tasks","title":"Tasks","text":"<ul> <li>Add proguard rules for Crashlytics</li> <li>Add proguard rules for <code>java.io.Serializable</code></li> </ul>"},{"location":"traffic/android/releases/2.4.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.1.1</code></li> <li><code>compileSdk</code> &gt; <code>34</code></li> <li><code>buildToolsVersion</code> &gt; <code>34.0.0</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.4.1</code></li> </ul>"},{"location":"traffic/android/releases/2.5.0/","title":"Traffic Android 2.5.0 Changelog","text":"\ud83d\uddd3 12 Feb 2024"},{"location":"traffic/android/releases/2.5.0/#features","title":"Features","text":"<ul> <li>Can add custom font</li> <li>Add timezone support for date format</li> <li>Enhance accessibility</li> </ul>"},{"location":"traffic/android/releases/2.5.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlinVersion</code> &gt; <code>1.9.22</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.2.1</code></li> <li><code>com.google.firebase:firebase-crashlytics-gradle</code> &gt; <code>2.9.9</code></li> <li><code>com.google.gms:google-services</code> &gt; <code>4.4.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.12.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.6.2</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.6.2</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.3.2</code></li> <li><code>androidx.room:room-compiler</code> &gt; <code>2.6.1</code>. Use <code>ksp</code> instead of <code>kapt</code></li> <li><code>androidx.room:room-ktx</code> &gt; <code>2.6.1</code></li> <li><code>androidx.room:room-runtime</code> &gt; <code>2.6.1</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.11.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.13.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.3.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.13.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.1</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.5.1</code></li> <li><code>androidx.test:runner</code> &gt; <code>1.5.2</code></li> <li><code>androidx.test:rules</code> &gt; <code>1.5.2</code></li> </ul>"},{"location":"traffic/android/releases/2.5.1/","title":"Traffic Android 2.5.1 Changelog","text":"\ud83d\uddd3 21 Mar 2024"},{"location":"traffic/android/releases/2.5.1/#fixes","title":"Fixes","text":"<ul> <li>Fix crash due to R8 minification</li> </ul>"},{"location":"traffic/android/releases/2.5.2/","title":"Traffic Android 2.5.2 Changelog","text":"\ud83d\uddd3 21 Mai 2024"},{"location":"traffic/android/releases/2.5.2/#features","title":"Features","text":"<ul> <li>Show network for a line in disruptions line screen and alert edition screen</li> <li>Enhance accessibility</li> </ul>"},{"location":"traffic/android/releases/2.5.2/#task","title":"Task","text":"<ul> <li>Enlarge horizontally main content</li> </ul>"},{"location":"traffic/android/releases/2.5.2/#fixes","title":"Fixes","text":"<ul> <li>Fix string resources persistance in database</li> <li>Fix inability to remove a traffic alert</li> <li>Fix the reloading of subscriptions when going back to all disruptions</li> <li>Fix infinite loader for disrupted lines</li> </ul>"},{"location":"traffic/android/releases/2.5.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.14.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.4.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.14.0</code></li> </ul>"},{"location":"traffic/android/releases/2.5.3/","title":"Traffic Android 2.5.3 Changelog","text":"\ud83d\uddd3 24 Jun 2024"},{"location":"traffic/android/releases/2.5.3/#fixes","title":"Fixes","text":"<ul> <li>Fix initialization of <code>TrafficDisruptionColors</code></li> <li>Show http logs only in <code>DEBUG</code></li> </ul>"},{"location":"traffic/android/releases/2.5.3/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.5.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.15.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.4.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.15.0</code></li> </ul>"},{"location":"traffic/android/releases/2.5.4/","title":"Traffic Android 2.5.4 Changelog","text":"\ud83d\uddd3 26 Jul 2024"},{"location":"traffic/android/releases/2.5.4/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.16.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.5.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.16.0</code></li> </ul>"},{"location":"traffic/android/releases/2.5.5/","title":"Traffic Android 2.5.5 Changelog","text":"\ud83d\uddd3 08 Aug 2024"},{"location":"traffic/android/releases/2.5.5/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.16.1</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.5.1</code></li> </ul>"},{"location":"traffic/android/releases/2.5.6/","title":"Traffic Android 2.5.6 Changelog","text":"\ud83d\uddd3 09 Sept 2024"},{"location":"traffic/android/releases/2.5.6/#fixes","title":"Fixes","text":"<ul> <li>A network filter can bet written in 2 lines</li> <li>Fix redirection when clicking to <code>Back to disruptions</code></li> </ul>"},{"location":"traffic/android/releases/2.5.6/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.appcompat:appcompat</code> &gt; <code>1.7.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.2</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.4</code></li> <li><code>com.google.android.material:material</code> &gt; <code>1.12.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.17.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.0</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>2.17.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-android</code> &gt; <code>1.7.3</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-coroutines-core</code> &gt; <code>1.7.3</code></li> <li><code>androidx.test:core</code> &gt; <code>1.6.1</code></li> <li><code>androidx.test.ext:junit</code> &gt; <code>1.2.1</code></li> <li><code>androidx.test:rules</code> &gt; <code>1.6.1</code></li> <li><code>androidx.test.espresso:espresso-core</code> &gt; <code>3.6.1</code></li> <li><code>androidx.test:runner</code> &gt; <code>1.6.1</code></li> </ul>"},{"location":"traffic/android/releases/2.6.0/","title":"Traffic Android 2.6.0 Changelog","text":"\ud83d\uddd3 15 Oct 2024"},{"location":"traffic/android/releases/2.6.0/#features","title":"Features","text":"<ul> <li>Add a configuration parameter to display/hide the disruption application periods</li> </ul>"},{"location":"traffic/android/releases/2.6.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.4</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.6</code></li> <li><code>androidx.test:runner</code> &gt; <code>1.6.2</code></li> </ul>"},{"location":"traffic/android/releases/2.6.1/","title":"Traffic Android 2.6.1 Changelog","text":"\ud83d\uddd3 31 Oct 2024"},{"location":"traffic/android/releases/2.6.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.18.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.1</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>2.18.0</code></li> </ul>"},{"location":"traffic/android/releases/2.7.0/","title":"Traffic Android 2.7.0 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"traffic/android/releases/2.7.0/#features","title":"Features","text":"<ul> <li>Handle html titles for disruptions</li> </ul>"},{"location":"traffic/android/releases/2.7.0/#fixes","title":"Fixes","text":"<ul> <li>Remove the display of disruptions not related to a line</li> <li>Fix the display of a long network disruption</li> </ul>"},{"location":"traffic/android/releases/2.7.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>kotlin</code> &gt; <code>1.9.25</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.7.2</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.15.0</code></li> <li><code>androidx.fragment:fragment-ktx</code> &gt; <code>1.8.5</code></li> <li><code>androidx.lifecycle:lifecycle-viewmodel-ktx</code> &gt; <code>2.8.7</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.5.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.19.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.2</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.19.0</code></li> </ul>"},{"location":"traffic/android/releases/2.7.1/","title":"Traffic Android 2.7.1 Changelog","text":"\ud83d\uddd3 24 Dec 2024"},{"location":"traffic/android/releases/2.7.1/#fixes","title":"Fixes","text":"<ul> <li>Add a fallback for database migrations</li> </ul>"},{"location":"traffic/android/releases/2.7.2/","title":"Traffic Android 2.7.2 Changelog","text":"\ud83d\uddd3 03 Feb 2025"},{"location":"traffic/android/releases/2.7.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.3</code></li> </ul>"},{"location":"traffic/android/releases/3.0.0/","title":"Traffic Android 3.0.0 Changelog","text":"\ud83d\uddd3 25 Feb 2025"},{"location":"traffic/android/releases/3.0.0/#features","title":"Features","text":"<ul> <li>New UI for all disruptions and custom alerts</li> </ul>"},{"location":"traffic/android/releases/3.0.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.10.2</code></li> <li><code>kotlinVersion</code> &gt; <code>2.1.0</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.8.0</code></li> <li><code>compileSdk</code> &gt; <code>35</code></li> <li><code>buildToolsVersion</code> &gt; <code>35.0.0</code></li> <li><code>daggerVersion</code> &gt; <code>2.55</code></li> <li><code>fragmentVersion</code> &gt; <code>1.8.5</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.0</code></li> <li><code>androidx.core:core-ktx</code> &gt; <code>1.15.0</code></li> <li><code>androidx.recyclerview:recyclerview</code> &gt; <code>1.4.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.20.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.4</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.20.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> &gt; <code>1.6.3</code></li> </ul>"},{"location":"traffic/android/releases/3.1.0/","title":"Traffic Android 3.1.0 Changelog","text":"\ud83d\uddd3 24 Feb 2025"},{"location":"traffic/android/releases/3.1.0/#features","title":"Features","text":"<ul> <li>Add the ability to specify transport networks to prevent the display of associated disruptions</li> </ul>"},{"location":"traffic/android/releases/3.1.0/#tasks","title":"Tasks","text":"<ul> <li>Rename <code>networks_filter</code> to filters in the configuration</li> </ul>"},{"location":"traffic/android/releases/3.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>fragmentVersion</code> &gt; <code>1.8.6</code></li> <li><code>androidx.constraintlayout:constraintlayout</code> &gt; <code>2.2.1</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.7.0</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.21.0</code></li> </ul>"},{"location":"traffic/android/releases/3.1.1/","title":"Traffic Android 3.1.1 Changelog","text":"\ud83d\uddd3 23 Apr 2025"},{"location":"traffic/android/releases/3.1.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>gradle</code> &gt; <code>8.11.1</code></li> <li><code>com.android.tools.build:gradle</code> &gt; <code>8.9.1</code></li> <li><code>com.kisio.navitia.sdk.data:expert</code> &gt; <code>3.7.1</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code> &gt; <code>2.22.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code> &gt; <code>2.6.5</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code> &gt; <code>1.21.0</code></li> <li><code>androidx.room:room-compiler</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-ktx</code> &gt; <code>2.7.0</code></li> <li><code>androidx.room:room-runtime</code> &gt; <code>2.7.0</code></li> <li><code>androidx.core:core-ktx</code>&gt; <code>1.16.0</code></li> </ul>"},{"location":"traffic/android/releases/3.1.2/","title":"Traffic Android 3.1.2 Changelog","text":"\ud83d\uddd3 05 Jun 2025"},{"location":"traffic/android/releases/3.1.2/#fixes","title":"Fixes","text":"<ul> <li>Fix enum serialization</li> <li>Fix view state same id for recycler view</li> </ul>"},{"location":"traffic/android/releases/3.1.3/","title":"Traffic Android 3.1.3 Changelog","text":"\ud83d\uddd3 11 Jun 2025"},{"location":"traffic/android/releases/3.1.3/#fixes","title":"Fixes","text":"<ul> <li>Fix enum serialization</li> <li>Fix view state same id for recycler view</li> </ul>"},{"location":"traffic/android/releases/3.2.0/","title":"Traffic Android 3.2.0 Changelog","text":"\ud83d\uddd3 11 Sep 2025"},{"location":"traffic/android/releases/3.2.0/#features","title":"Features","text":"<ul> <li>Display an empty state message for a favorite line with no disruptions.</li> <li>Dark mode is now available</li> <li>Added swipe-to-refresh capability on disruptions list.</li> </ul>"},{"location":"traffic/android/releases/3.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>com.kisio.navitia.sdk.data:expert</code>&gt; <code>3.7.2</code></li> <li><code>com.kisio.navitia.sdk.engine:design</code>&gt; <code>2.23.0</code></li> <li><code>com.kisio.navitia.sdk.engine:router</code>&gt; <code>2.6.6</code></li> <li><code>com.kisio.navitia.sdk.engine:toolbox</code>&gt; <code>1.22.0</code></li> </ul>"},{"location":"traffic/android/releases/3.2.1/","title":"Traffic Android 3.2.1 Changelog","text":"\ud83d\uddd3 18 Sep 2025"},{"location":"traffic/android/releases/3.2.1/#fixes","title":"Fixes","text":"<ul> <li>Fixed filters not applied after saving</li> </ul>"},{"location":"traffic/ios/","title":"Traffic iOS","text":""},{"location":"traffic/ios/#setup","title":"Setup","text":"<p>In your project, add the following lines to your <code>Podfile</code>:</p> <pre><code>source 'https://github.com/CocoaPods/Specs.git' # Default Cocoapods URL\nsource 'https://github.com/hove-io/Podspecs.git' # Traffic podspec URL\n\ntarget 'YOUR_PROJECT_SCHEME' do\n  pod 'TrafficSDK', '4.3.0' # Traffic Pod definition\nend\n\n# Required for XCFramework\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n    end\n  end\nend\n</code></pre> <p>Using your CLI, run <code>pod install</code> in your project directory.</p>"},{"location":"traffic/ios/#implementation","title":"Implementation","text":"<p>Warning</p> <p>Make sure to read the modules configuration section before proceeding</p> <p>This module is set up by calling <code>Traffic.shared.initialize()</code> method which takes the following parameters:</p> Name Required Description Type Example <code>coverage</code> Navitia coverage <code>String</code> <code>fr-idf</code> <code>token</code> Navitia token <code>String</code> <code>ABCD-1234-...</code> <code>timeZone</code> Time zone <code>String</code> <code>Europe/Paris</code> <code>env</code> Navitia environment <code>String</code> <code>PROD</code> <code>alertCredentials</code> Kronos alert subscription credentials <code>TrafficAlertSubscriptionCredentials</code> - <code>colors</code> Define the custom colors <code>TrafficColorsConfiguration</code> - <code>unifiedColors</code> Define the custom colors <code>UnifiedColorsConfiguration</code> - <code>fonts</code> Use custom fonts <code>TrafficFontsConfiguration</code> - <code>lineResources</code> List of transport lines resource IDs <code>[LineResource]</code> - <code>modeResources</code> List of transport modes resource IDs <code>[ModeResource]</code> - <code>providerResources</code> Transport providers configuration <code>[ProviderResource]</code> - <code>transportCategories</code> List of supported transport modes <code>[TransportCategory]</code> - <code>networkResources</code> List of network resource IDs <code>[NetworkResource]</code> - <code>features</code> Enable/disable some features <code>TrafficFeaturesConfiguration</code> - <p>You can also call the <code>initialize()</code> method with the global JSON configuration file added to your application bundle:</p> Name Required Description Type Example <code>configurationJsonFile</code> Global configuration JSON file name <code>String</code> <code>configuration.json</code> Example Configuration with fileManual configuration <pre><code>do {\n    try Traffic.shared.initialize(\n        token: \"your_token\", \n        configurationJsonFile: \"traffic_configuration.json\"\n    )                                       \n} catch {\n    Logger.error(\"%@\", String(\n        format: \"Traffic SDK cannot be initialized! %@\", \n        error.localizedDescription\n    ))\n}\n</code></pre> <pre><code>do {\n    let transportCategories = [TransportCategory(\n        modules: [\"traffic\"],\n        iconRes: \"ic_section_mode_metro\",\n        nameRes: \"metro\",\n        selected: true,\n        modes: [TransportCategoryMode(\n            physical: TransportPhysicalMode(\n                id: \"physical_mode:Metro\", \n                nameRes: \"metro\"\n            ),\n            commercial: TransportCommercialMode(\n                id: \"commercial_mode:Metro\", \n                name: \"Metro\"\n            )\n        )],\n        firstSectionModes: [\"walking\"],\n        lastSectionModes: [\"walking\"]\n    )]\n    let trafficColorsConfiguration = TrafficColorsConfiguration(\n        primaryColor: \"#88819f\", \n        secondaryColor: \"#8faa96\"\n    )\n\n    try Traffic.shared.initialize(\n        coverage: \"fr-idf\",\n        token: \"your_token\",\n        timeZone: \"your_country\",\n        env: \"PROD\",\n        colors: trafficColorsConfiguration,\n        transportCategories: transportCategories\n    )                                                                  \n} catch {\n    Logger.error(\"%@\", String(\n        format: \"Traffic SDK cannot be initialized! %@\", \n        error.localizedDescription\n    ))\n}\n</code></pre>"},{"location":"traffic/ios/#alert-subscription","title":"Alert subscription","text":"<p>To enable the alert subscription feature, the following instructions are required:</p> <ul> <li>Add the environment configuration</li> <li>Pass the Kronos API credentials to the initialization method</li> <li>Set the firebase token <code>Traffic.shared.firebaseToken = \"token\"</code> once received from the Firebase API at runtime</li> </ul>"},{"location":"traffic/ios/#traffic-alert-subscription-credentials","title":"Traffic alert subscription credentials","text":"Name Required Description Type <code>username</code> Kronos authentication username <code>String</code> <code>password</code> Kronos authentication password <code>String</code>"},{"location":"traffic/ios/#events-tracking","title":"Events tracking","text":"<p>In order to receive the list of generated events within Traffic module, you have to assign the instance of the tracker to the Traffic module instance as follows and implement the required methods:</p> <pre><code>Traffic.shared.tracker = self\n</code></pre>"},{"location":"traffic/ios/#launching","title":"Launching","text":"<p>This module has a single entry point. The parameter <code>showBack</code> handles the back button visibility on the first screen.</p> <pre><code>guard let trafficViewController = Traffic.shared.rootViewController else {\n    return nil\n}\ntrafficViewController.showBack = false // Hide back button embedded in the first screen\n</code></pre> <p>If you want to use the <code>rootViewController</code> as a <code>ChildViewController</code> of your <code>ViewController</code>, you should embed it in an <code>NavigationController</code>. </p> Using a <code>NavigationController</code>Using a <code>ChildViewController</code> <pre><code>navigationController?.pushViewController(trafficViewController, animated: false)\n</code></pre> <pre><code>yourViewController.addChild(UINavigationController(\n    rootViewController: trafficViewController\n))\n</code></pre>"},{"location":"traffic/ios/changelogs/","title":"Traffic iOS Changelogs","text":"<ul> <li>v4.3.0 (11 Sep 2025)</li> <li>v4.2.2 (11 Aug 2025)</li> <li>v4.2.1 (09 May 2025)</li> <li>v4.2.0 (22 Apr 2025)</li> <li>v4.1.0 (24 Mar 2025)</li> <li>v4.0.0 (24 Feb 2025)</li> <li>v3.7.2 (12 Feb 2025)</li> <li>v3.7.1 (04 Feb 2025)</li> <li>v3.7.0 (02 Dec 2024)</li> <li>v3.6.1 (30 Oct 2024)</li> <li>v3.6.0 (17 Oct 2024)</li> <li>v3.5.6 (24 Sep 2024)</li> <li>v3.5.5 (24 Jul 2024)</li> <li>v3.5.3 (25 Jun 2024)</li> <li>v3.5.2 (13 Jun 2024)</li> <li>v3.5.1 (21 Mai 2024)</li> <li>v3.5.0 (27 Mar 2024)</li> <li>v3.4.0 (25 Aug 2023)</li> <li>v3.3.1 (12 Apr 2023)</li> <li>v3.3.0 (03 Apr 2023)</li> <li>v3.2.0 (17 Mar 2023)</li> <li>v3.1.0 (15 Feb 2023)</li> <li>v3.0.4 (10 Jan 2023)</li> <li>v3.0.2 (20 Oct 2022)</li> </ul>"},{"location":"traffic/ios/releases/3.0.2/","title":"Traffic iOS 3.0.2 Changelog","text":"\ud83d\uddd3 20 Oct 2022"},{"location":"traffic/ios/releases/3.0.2/#feature","title":"Feature","text":"<ul> <li>Redesign the whole module</li> </ul>"},{"location":"traffic/ios/releases/3.0.2/#fixes","title":"Fixes","text":"<ul> <li>Remove incompatible dependencies</li> </ul>"},{"location":"traffic/ios/releases/3.0.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> &gt; <code>2.3.2</code></li> <li><code>RealmSwift</code> &gt; <code>10.17.0</code></li> <li><code>XCode</code> &gt; <code>13.4</code></li> </ul>"},{"location":"traffic/ios/releases/3.0.4/","title":"Traffic iOS 3.0.4 Changelog","text":"\ud83d\uddd3 10 Jan 2023"},{"location":"traffic/ios/releases/3.0.4/#fixes","title":"Fixes","text":"<ul> <li>Fix back button in navigation bar</li> </ul>"},{"location":"traffic/ios/releases/3.0.4/#dependencies","title":"Dependencies","text":"<ul> <li><code>RouterEngine</code> &gt; <code>0.5.0</code></li> <li><code>ToolboxEngine</code> &gt; <code>1.6.6</code></li> <li><code>DesignEngine</code> &gt; <code>2.4.0</code></li> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> </ul>"},{"location":"traffic/ios/releases/3.1.0/","title":"Traffic iOS 3.1.0 Changelog","text":"\ud83d\uddd3 15 Feb 2023"},{"location":"traffic/ios/releases/3.1.0/#tasks","title":"Tasks","text":"<ul> <li>Use unique Realm path configuration file</li> </ul>"},{"location":"traffic/ios/releases/3.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix disruption text not constrained</li> <li>Fix database initialization issue</li> </ul>"},{"location":"traffic/ios/releases/3.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> &gt; <code>2.3.4</code></li> </ul>"},{"location":"traffic/ios/releases/3.2.0/","title":"Traffic iOS 3.2.0 Changelog","text":"\ud83d\uddd3 17 Mar 2023"},{"location":"traffic/ios/releases/3.2.0/#tasks","title":"Tasks","text":"<ul> <li>Change configuration color variable names</li> </ul>"},{"location":"traffic/ios/releases/3.2.0/#fixes","title":"Fixes","text":"<ul> <li>Fix wrong results showing after filters configuration changes</li> <li>Fix network disruption display issues</li> <li>Fix links not clickable in the disruption description</li> </ul>"},{"location":"traffic/ios/releases/3.3.0/","title":"Traffic iOS 3.3.0 Changelog","text":"\ud83d\uddd3 03 Apr 2023"},{"location":"traffic/ios/releases/3.3.0/#features","title":"Features","text":"<ul> <li>Add alert subscription feature</li> </ul>"},{"location":"traffic/ios/releases/3.3.0/#fixes","title":"Fixes","text":"<ul> <li>Fix links not clickable on disruption message</li> </ul>"},{"location":"traffic/ios/releases/3.3.1/","title":"Traffic iOS 3.3.1 Changelog","text":"\ud83d\uddd3 12 Apr 2023"},{"location":"traffic/ios/releases/3.3.1/#fixes","title":"Fixes","text":"<ul> <li>Remove SSL checks for Kronos PROD environment</li> </ul>"},{"location":"traffic/ios/releases/3.4.0/","title":"Traffic iOS 3.4.0 Changelog","text":"\ud83d\uddd3 25 Aug 2023"},{"location":"traffic/ios/releases/3.4.0/#features","title":"Features","text":"<ul> <li>Add <code>ShowBack</code> param</li> <li>Show Network list</li> <li>Add traffic alert subscription for a network</li> </ul>"},{"location":"traffic/ios/releases/3.4.0/#tasks","title":"Tasks","text":"<ul> <li>Add custom analytic events</li> <li>Remove display of first disruption when selecting a disrupted line</li> </ul>"},{"location":"traffic/ios/releases/3.4.0/#enhancements","title":"Enhancements","text":"<ul> <li>Fetch physical modes before disrupted lines</li> </ul>"},{"location":"traffic/ios/releases/3.4.0/#fixes","title":"Fixes","text":"<ul> <li>Fix localized texts</li> <li>Fix redirection after subsribing to an alert</li> <li>Fix mode icon when editing an alert</li> </ul>"},{"location":"traffic/ios/releases/3.4.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>2.7.0</code></li> <li><code>RealmSwift</code> -&gt; <code>10.42.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.0.0</code></li> <li><code>FlexLayout</code> -&gt; <code>1.3.31</code></li> </ul>"},{"location":"traffic/ios/releases/3.4.0/#deployment-target","title":"Deployment target","text":"<ul> <li><code>iOS 14</code> minimun</li> </ul>"},{"location":"traffic/ios/releases/3.5.0/","title":"Traffic iOS 3.5.0 Changelog","text":"\ud83d\uddd3 27 Mar 2024"},{"location":"traffic/ios/releases/3.5.0/#features","title":"Features","text":"<ul> <li>Add time zone parameter</li> <li>Show network name on disruptions list screen</li> <li>Add networks filter</li> </ul>"},{"location":"traffic/ios/releases/3.5.0/#tasks","title":"Tasks","text":"<ul> <li>Remove open source license</li> <li>Add accessibility</li> </ul>"},{"location":"traffic/ios/releases/3.5.0/#fixes","title":"Fixes","text":"<ul> <li>Fix update alert subscription request</li> </ul>"},{"location":"traffic/ios/releases/3.5.0/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"traffic/ios/releases/3.5.1/","title":"Traffic iOS 3.5.1 Changelog","text":"\ud83d\uddd3 21 Mai 2024"},{"location":"traffic/ios/releases/3.5.1/#fixes","title":"Fixes","text":"<ul> <li>Fix network disruption view</li> <li>Fix transport mode filters at first launch</li> <li>Fix routing from other module to traffic</li> </ul>"},{"location":"traffic/ios/releases/3.5.1/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.2.0</code></li> <li>DesignEngine <code>v2.13.0</code></li> </ul>"},{"location":"traffic/ios/releases/3.5.1/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"traffic/ios/releases/3.5.2/","title":"Traffic iOS 3.5.2 Changelog","text":"\ud83d\uddd3 13 Jun 2024"},{"location":"traffic/ios/releases/3.5.2/#tasks","title":"Tasks","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"traffic/ios/releases/3.5.2/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"traffic/ios/releases/3.5.3/","title":"Traffic iOS 3.5.3 Changelog","text":"\ud83d\uddd3 25 Jun 2024"},{"location":"traffic/ios/releases/3.5.3/#tasks","title":"Tasks","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"traffic/ios/releases/3.5.3/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"traffic/ios/releases/3.5.5/","title":"Traffic iOS 3.5.5 Changelog","text":"\ud83d\uddd3 24 Jul 2024"},{"location":"traffic/ios/releases/3.5.5/#task","title":"Task","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"traffic/ios/releases/3.5.5/#compiler","title":"Compiler","text":"<ul> <li>Swift -&gt; <code>5.10</code></li> </ul>"},{"location":"traffic/ios/releases/3.5.6/","title":"Traffic iOS 3.5.6 Changelog","text":"\ud83d\uddd3 24 Sep 2024"},{"location":"traffic/ios/releases/3.5.6/#fixes","title":"Fixes","text":"<ul> <li>Fix reversed disruption application periods</li> <li>Fix all time text misplaced</li> </ul>"},{"location":"traffic/ios/releases/3.5.6/#compiler","title":"Compiler","text":"<ul> <li><code>Swift</code> -&gt; <code>6.0</code></li> </ul>"},{"location":"traffic/ios/releases/3.6.0/","title":"Traffic iOS 3.6.0 Changelog","text":"\ud83d\uddd3 17 Oct 2024"},{"location":"traffic/ios/releases/3.6.0/#tasks","title":"Tasks","text":"<ul> <li>Disruption application periods is now configurable</li> </ul>"},{"location":"traffic/ios/releases/3.6.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>RouterEngine</code> &gt; <code>1.5.1</code></li> <li><code>DesignEngine</code> &gt; <code>2.16.0</code></li> </ul>"},{"location":"traffic/ios/releases/3.6.0/#compiler","title":"Compiler","text":"<ul> <li><code>Swift</code> -&gt; <code>6.0</code></li> </ul>"},{"location":"traffic/ios/releases/3.6.1/","title":"Traffic iOS 3.6.1 Changelog","text":"\ud83d\uddd3 30 Oct 2024"},{"location":"traffic/ios/releases/3.6.1/#tasks","title":"Tasks","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"traffic/ios/releases/3.6.1/#dependencies","title":"Dependencies","text":"<ul> <li>RouterEngine <code>v1.5.2</code></li> <li>DesignEngine <code>v2.17.0</code></li> </ul>"},{"location":"traffic/ios/releases/3.7.0/","title":"Traffic iOS 3.7.0 Changelog","text":"\ud83d\uddd3 02 Dec 2024"},{"location":"traffic/ios/releases/3.7.0/#features","title":"Features","text":"<ul> <li>Handle html titles for disruptions</li> </ul>"},{"location":"traffic/ios/releases/3.7.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>v2.18.0</code></li> <li><code>RouterEngine</code> -&gt; <code>v1.5.3</code></li> </ul>"},{"location":"traffic/ios/releases/3.7.1/","title":"Traffic iOS 3.7.1 Changelog","text":"\ud83d\uddd3 04 Feb 2025"},{"location":"traffic/ios/releases/3.7.1/#tasks","title":"Tasks","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"traffic/ios/releases/3.7.1/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"traffic/ios/releases/3.7.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>2.18.1</code></li> <li><code>RouterEngine</code> -&gt; <code>1.5.4</code></li> </ul>"},{"location":"traffic/ios/releases/3.7.2/","title":"Traffic iOS 3.7.2 Changelog","text":"\ud83d\uddd3 12 Feb 2025"},{"location":"traffic/ios/releases/3.7.2/#tasks","title":"Tasks","text":"<ul> <li>Upgrade RealmSwift and FlexLayout dependencies</li> </ul>"},{"location":"traffic/ios/releases/3.7.2/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.0.3</code></li> </ul>"},{"location":"traffic/ios/releases/3.7.2/#dependencies","title":"Dependencies","text":"<ul> <li><code>RealmSwift</code> -&gt; <code>20.0.1</code></li> <li><code>FlexLayout</code> -&gt; <code>2.1.0</code> </li> </ul>"},{"location":"traffic/ios/releases/4.0.0/","title":"Traffic iOS 4.0.0 Changelog","text":"\ud83d\uddd3 24 Feb 2025"},{"location":"traffic/ios/releases/4.0.0/#features","title":"Features","text":"<ul> <li>New UI for all disruptions and custom alerts</li> </ul>"},{"location":"traffic/ios/releases/4.0.0/#tasks","title":"Tasks","text":"<ul> <li>Extract module configuration from unified configuration</li> <li>Add unified colors configuration</li> <li>Update minimum iOS deployment to 16</li> </ul>"},{"location":"traffic/ios/releases/4.0.0/#fixes","title":"Fixes","text":"<ul> <li>Fix alert day view margins</li> <li>Fix background color in alert subscriptions </li> <li>Fix dismiss action</li> </ul>"},{"location":"traffic/ios/releases/4.0.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.8.0</code></li> <li><code>RouterEngine</code> -&gt; <code>1.6.0</code></li> <li><code>DesignEngine</code> -&gt; <code>3.0.0</code> </li> </ul>"},{"location":"traffic/ios/releases/4.1.0/","title":"Traffic iOS 4.1.0 Changelog","text":"\ud83d\uddd3 24 Mar 2025"},{"location":"traffic/ios/releases/4.1.0/#features","title":"Features","text":"<ul> <li>Add forbidden networks in configuration</li> </ul>"},{"location":"traffic/ios/releases/4.1.0/#tasks","title":"Tasks","text":"<ul> <li>Rename <code>networks_filter</code> to <code>filters</code> in configuration</li> <li>Show alert when notification aren't activated for line subscription</li> </ul>"},{"location":"traffic/ios/releases/4.1.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>NavitiaSDK</code> -&gt; <code>2.9.0</code></li> <li><code>DesignEngine</code> -&gt; <code>3.1.0</code></li> </ul>"},{"location":"traffic/ios/releases/4.2.0/","title":"Traffic iOS 4.2.0 Changelog","text":"\ud83d\uddd3 22 Apr 2025"},{"location":"traffic/ios/releases/4.2.0/#tasks","title":"Tasks","text":"<ul> <li>Hide filter button if there is less than one filter item</li> </ul>"},{"location":"traffic/ios/releases/4.2.0/#fixes","title":"Fixes","text":"<ul> <li>Select the first transport mode tab if My Info Traffic is disabled</li> </ul>"},{"location":"traffic/ios/releases/4.2.0/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>3.2.0</code></li> </ul>"},{"location":"traffic/ios/releases/4.2.1/","title":"Traffic iOS 4.2.1 Changelog","text":"\ud83d\uddd3 06 May 2025"},{"location":"traffic/ios/releases/4.2.1/#tasks","title":"Tasks","text":"<ul> <li>Enabled dSYM generation to support crash report symbolication</li> </ul>"},{"location":"traffic/ios/releases/4.2.1/#fixes","title":"Fixes","text":"<ul> <li>Added proper local date handling for improved consistency across time zones</li> </ul>"},{"location":"traffic/ios/releases/4.2.1/#dependencies","title":"Dependencies","text":"<ul> <li><code>DesignEngine</code> -&gt; <code>3.2.1</code></li> </ul>"},{"location":"traffic/ios/releases/4.2.2/","title":"Traffic iOS 4.2.2 Changelog","text":"\ud83d\uddd3 11 Aug 2025"},{"location":"traffic/ios/releases/4.2.2/#fixes","title":"Fixes","text":"<ul> <li>Fix transport categories not properly filtered</li> </ul>"},{"location":"traffic/ios/releases/4.2.2/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.1.2</code></li> </ul>"},{"location":"traffic/ios/releases/4.3.0/","title":"Traffic iOS 4.3.0 Changelog","text":"\ud83d\uddd3 11 Sep 2025"},{"location":"traffic/ios/releases/4.3.0/#features","title":"Features","text":"<ul> <li>Display an empty state message for a favorite line with no disruptions.</li> <li>Display line name for subscripted lines</li> <li>Implement dark mode support</li> <li>Add pull to refresh to disrupted lines list</li> </ul>"},{"location":"traffic/ios/releases/4.3.0/#tasks","title":"Tasks","text":"<ul> <li>Removed Alamofire dependency to reduce external library usage and improve maintainability</li> <li>Added loading indicator when subscribing to a line in the line disruption view for better user feedback</li> </ul>"},{"location":"traffic/ios/releases/4.3.0/#compiler","title":"Compiler","text":"<ul> <li>Swift  <code>6.1.2</code></li> </ul>"},{"location":"traffic/screens/","title":"Traffic Screens","text":""},{"location":"traffic/screens/#screen-flow","title":"Screen flow","text":"<p>Refer to the following schema to learn more about different interactions and how to navigate between module screens:</p> <pre><code>graph TB\n    DisruptedLines(Disrupted lines) --&gt; LineNetworkDisruptions(Line / Network disruptions)\n    DisruptedLines(Disrupted lines) --&gt; SubscribedLines(Subscribed lines)\n    DisruptedLines(Disrupted lines) --&gt; LineSelection(Line selection)\n    SubscribedLines(Subscribed lines) --&gt; LineSelection(Line selection)\n    LineSelection(Line selection) --&gt; SubscriptionSchedule(Subscription schedule)</code></pre>"},{"location":"traffic/screens/#all-disruptions","title":"All disruptions","text":"<p>The all disruptions screen allows the user to view all the line and network disruptions sorted by transport category. When clicking on a disrupted line, it redirects the user to the line disruptions screen.</p> AndroidiOS <p></p> <p></p>"},{"location":"traffic/screens/#filters","title":"Filters","text":"<p>The all disruptions screen integrated a menu accessible through the header right button. This menu shows the different transport categories with a default selection. If the user hits the Apply button after changing the selection state, the all disruptions screen will refresh and will show the disruptions according to the updated filters.</p> AndroidiOS <p></p> <p></p>"},{"location":"traffic/screens/#linenetwork-disruptions","title":"Line/network disruptions","text":"<p>This screen lists the disruptions related to the selected line or to all disrupted networks. Each element shows the title, the message and the application period of a target disruption. Some disruptions have messages with included hyperlinks. Those links are also accessible to the user and will redirect him to an external browser to view the related link.</p> <p>If the alert subscription feature is enabled, a bell button appears allowing the user to subscribe/unsubscribe to/from the line alerts.</p> AndroidiOS <p></p> <p></p>"},{"location":"traffic/screens/#line-selection","title":"Line selection","text":"<p>This screen includes an autocompletion that enables the user to search the transport line needed for alert subscription. The parameter <code>transport_networks</code> allows to show the network providing the searched line. </p> AndroidiOS <p></p> <p></p>"},{"location":"traffic/screens/#subscription-schedule","title":"Subscription schedule","text":"<p>After selecting a line from the autocompletion screen, this screen appears giving the ability to the user to choose/modify the periods in which the alert subscription can be received. Please verify that you have passed valid Kronos API credentials to the module initialization method in order to ensure a successful alert subscription process.</p> AndroidiOS <p></p> <p></p>"},{"location":"traffic/screens/#subscriptions-list","title":"Subscriptions list","text":"<p>This screen lists all the alert subscriptions that the user have registered. The subscriptions are also grouped by transport categories allowing to filter the subscriptions depending on the impacted line transport mode.</p> AndroidiOS <p></p> <p></p>"}]}